<?xml version="1.0"?>
<doc>
    <assembly>
        <name>uclib</name>
    </assembly>
    <members>
        <member name="T:CoreLib.Audio.AudioOutput">
            <summary>
            Represents the current machine's audio output
            </summary>
        </member>
        <member name="T:CoreLib.Audio.C">
            <summary>
            A compact structure representing a complex number
            </summary>
        </member>
        <member name="F:CoreLib.Audio.C.R">
            <summary>
            Real value
            </summary>
        </member>
        <member name="F:CoreLib.Audio.C.I">
            <summary>
            Imaginary value
            </summary>
        </member>
        <member name="T:CoreLib.Audio.ID3Tag">
            <summary>
            An ID3-Tag implementation
            </summary>
        </member>
        <member name="M:CoreLib.Audio.ID3Tag.GetID3V1(System.String)">
            <summary>
            Returns the ID3v1-Tag from the given file
            </summary>
            <param name="file">File containing a binary ID3v1-Tag</param>
            <returns>ID3v1-Tag</returns>
        </member>
        <member name="M:CoreLib.Audio.ID3Tag.GetID3V2(System.String)">
            <summary>
            Returns the ID3v2-Tag from the given file
            </summary>
            <param name="file">File containing a binary ID3v2-Tag</param>
            <returns>ID3v2-Tag</returns>
        </member>
        <member name="M:CoreLib.Audio.ID3Tag.__internal__InitLib">
            <summary>
            Initializes the library containing basic ID3-methods
            </summary>
        </member>
        <member name="T:CoreLib.Audio.ID3V1Tag">
            <summary>
            An ID3v1-Tag implementation
            </summary>
        </member>
        <member name="M:CoreLib.Audio.ID3V1Tag.#ctor">
            <summary>
            creates a new ID3v1-Tag instance
            </summary>
        </member>
        <member name="M:CoreLib.Audio.ID3V1Tag.GetTag(System.IO.Stream)">
            <summary>
            Reads the ID3v1-Tag from a binary stream
            </summary>
            <param name="s">Binary stream</param>
            <returns>ID3v1-Tag</returns>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.TAGID">
            <summary>
            Tag ID
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.Genre">
            <summary>
            Genre
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.Album">
            <summary>
            Album
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.Artist">
            <summary>
            Artist
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V1Tag.Comment">
            <summary>
            Commment(s)
            </summary>
        </member>
        <member name="T:CoreLib.Audio.ID3V2Tag">
            <summary>
            An ID3v2-Tag implementation
            </summary>
        </member>
        <member name="M:CoreLib.Audio.ID3V2Tag.#ctor">
            <summary>
            creates a new ID3v2-Tag instance
            </summary>
        </member>
        <member name="M:CoreLib.Audio.ID3V2Tag.GetTag(System.IO.Stream)">
            <summary>
            Reads the ID3v2-Tag from a binary stream
            </summary>
            <param name="s">Binary stream</param>
            <returns>ID3v2-Tag</returns>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.Version">
            <summary>
            Tag version
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.Flags">
            <summary>
            Tag binary flags
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.Size">
            <summary>
            Tag size
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.FrameId">
            <summary>
            Frame ID
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.FrameSize">
            <summary>
            Frame size
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.FrameFlags">
            <summary>
            Frame binary flags
            </summary>
        </member>
        <member name="P:CoreLib.Audio.ID3V2Tag.Body">
            <summary>
            (Frame) body
            </summary>
        </member>
        <member name="T:CoreLib.Audio.Beeper">
            <summary>
            A helper class which contains functions to generate beeps
            </summary>
        </member>
        <member name="M:CoreLib.Audio.Beeper.Beep(System.Int32,System.Int32,System.Int32)">
            <summary>
            Beeps at a given volume, frequency and duration
            </summary>
            <param name="ŝ">Beep volume (0...1000)</param>
            <param name="δ">Beep duration [in ms]</param>
            <param name="ƒ">Beep frequency [in Hz]</param>
        </member>
        <member name="M:CoreLib.Audio.Beeper.Beep(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Beeps multiple frequencies at a given volume and duration
            </summary>
            <param name="ŝ">Beep volume (0...1000)</param>
            <param name="δ">Beep duration [in ms]</param>
            <param name="ƒs">Arry of frequencies [in Hz]</param>
        </member>
        <member name="M:CoreLib.Audio.Beeper.Beep(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Beeps multiple frequencies at a given volume and duration
            </summary>
            <param name="ŝ">Beep volume (0...1000)</param>
            <param name="δ">Beep duration [in ms]</param>
            <param name="ƒs">Arry of frequencies [in Hz]</param>
        </member>
        <member name="M:CoreLib.Audio.Beeper.Beep(System.Int32,System.Tuple{System.Int32,System.Int32}[])">
            <summary>
            Beeps multiple frequencies at their individual volume and at a given duration
            </summary>
            <param name="δ">Beep duration [in ms]</param>
            <param name="ŝƒs">Tuple of &lt;Volume, Frequency&gt; [&lt;0...1000, Hz&gt;]</param>
        </member>
        <member name="M:CoreLib.Audio.Beeper.Beep(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Beeps multiple frequencies at their individual volume and at a given duration
            </summary>
            <param name="δ">Beep duration [in ms]</param>
            <param name="ŝƒs">Tuple of &lt;Volume, Frequency&gt; [&lt;0...1000, Hz&gt;]</param>
        </member>
        <member name="T:CoreLib.Audio.Note">
            <summary>
            Represents a musical note
            </summary>
        </member>
        <member name="M:CoreLib.Audio.Note.Play">
            <summary>
            Plays the musical note
            </summary>
            <returns>returns true if a playback error occured - otherwise false</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.Convert(CoreLib.Audio.NoteConversionMode)">
            <summary>
            Converts the current note using the given note conversion mode
            </summary>
            <param name="mode">Note conversion mode</param>
            <returns>Returns whether the note has been converted</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.ToString">
            <summary>
            Returns the string representation of the current note
            </summary>
            <returns>String representation of the current note</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.ToString(CoreLib.Audio.NoteConversionMode)">
            <summary>
            Returns the string representation of the current note under consideration of the given note conversion mode
            </summary>
            <param name="mode">Note conversion mode</param>
            <returns>String representation of the current note</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.#ctor(CoreLib.Audio.NoteFrequency,CoreLib.Audio.NoteDuration)">
            <summary>
            Creates a new note
            </summary>
            <param name="ƒ">The note frequency</param>
            <param name="δ">The note duration</param>
        </member>
        <member name="M:CoreLib.Audio.Note.#ctor(CoreLib.Audio.NoteDuration,CoreLib.Audio.NoteFrequency)">
            <summary>
            Creates a new note
            </summary>
            <param name="δ">The note duration</param>
            <param name="ƒ">The note frequency</param>
        </member>
        <member name="M:CoreLib.Audio.Note.#ctor(System.Int16,System.Int16)">
            <summary>
            Creates a new note
            </summary>
            <param name="s1">The note duration</param>
            <param name="s2">The note frequency</param>
        </member>
        <member name="M:CoreLib.Audio.Note.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a new note
            </summary>
            <param name="s1">The note duration</param>
            <param name="s2">The note frequency</param>
        </member>
        <member name="M:CoreLib.Audio.Note.#ctor(System.Int32)">
            <summary>
            Creates a new note
            </summary>
            <param name="i">A signed integer value representating the note duration and frequency</param>
        </member>
        <member name="M:CoreLib.Audio.Note.#ctor(System.UInt32)">
            <summary>
            Creates a new note
            </summary>
            <param name="i">An unsigned integer value representating the note duration and frequency</param>
        </member>
        <member name="M:CoreLib.Audio.Note.Play(System.Int32)">
            <summary>
            Plays the given integer value which will be interpreted as musical note
            </summary>
            <param name="i">Value</param>
            <returns>returns true if a playback error occured - otherwise false</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.Play(System.UInt32)">
            <summary>
            Plays the given unsigned integer value which will be interpreted as musical note
            </summary>
            <param name="u">Value</param>
            <returns>returns true if a playback error occured - otherwise false</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.Play(CoreLib.Audio.Note)">
            <summary>
            Plays the given musical note
            </summary>
            <param name="n">Note</param>
            <returns>returns true if a playback error occured - otherwise false</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.Play(CoreLib.Audio.NoteFrequency,CoreLib.Audio.NoteDuration)">
            <summary>
            Plays a musical note which has the given frequency and the given duration
            </summary>
            <param name="ƒ">Note frequency</param>
            <param name="δ">Note duration</param>
            <returns>returns true if a playback error occured - otherwise false</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.Play(CoreLib.Audio.NoteDuration,CoreLib.Audio.NoteFrequency)">
            <summary>
            Plays a musical note which has the given frequency and the given duration
            </summary>
            <param name="δ">Note duration</param>
            <param name="ƒ">Note frequency</param>
            <returns>returns true if a playback error occured - otherwise false</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.Convert(CoreLib.Audio.Note@,CoreLib.Audio.NoteConversionMode)">
            <summary>
            Converts the given musical note using the given note conversion mode
            </summary>
            <param name="note">Note</param>
            <param name="mode">Note conversion mode</param>
            <returns>Returns whether the note has been converted</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.ConvertFrequency(CoreLib.Audio.NoteFrequency@,CoreLib.Audio.NoteConversionMode)">
            <summary>
            Converts the referenced frequency using the given note conversion mode
            </summary>
            <param name="frequency">Frequency reference</param>
            <param name="mode">Note conversion mode</param>
            <returns>Returns whether the note has been converted</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.op_Implicit(CoreLib.Audio.Note)~CoreLib.Audio.NoteFrequency">
            <summary>
            Returns the note frequency of the given musical note
            </summary>
            <param name="n">musical note</param>
            <returns>Note frequency</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.op_Implicit(CoreLib.Audio.Note)~CoreLib.Audio.NoteDuration">
            <summary>
            Returns the note duration of the given musical note
            </summary>
            <param name="n">musical note</param>
            <returns>Note duration</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.op_Implicit(CoreLib.Audio.Note)~System.UInt32">
            <summary>
            Returns the unsigned integer value representating the given musical note
            </summary>
            <param name="n">musical note</param>
            <returns>Unsigned integer value</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.op_Implicit(System.UInt32)~CoreLib.Audio.Note">
            <summary>
            Returns a musical note representated by an unsigned integer value
            </summary>
            <param name="u">Unsigned integer value</param>
            <returns>Musical note</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.op_Implicit(CoreLib.Audio.Note)~System.Int32">
            <summary>
            Returns the signed integer value representating the given musical note
            </summary>
            <param name="n">musical note</param>
            <returns>Signed integer value</returns>
        </member>
        <member name="M:CoreLib.Audio.Note.op_Implicit(System.Int32)~CoreLib.Audio.Note">
            <summary>
            Returns a musical note representated by an signed integer value
            </summary>
            <param name="i">Signed integer value</param>
            <returns>Musical note</returns>
        </member>
        <member name="P:CoreLib.Audio.Note.Duration">
            <summary>
            Note duration
            </summary>
        </member>
        <member name="P:CoreLib.Audio.Note.Frequency">
            <summary>
            Note frequency
            </summary>
        </member>
        <member name="T:CoreLib.Audio.NoteDuration">
            <summary>
            Represents a note duration
            </summary>
        </member>
        <member name="T:CoreLib.Audio.NoteFrequency">
            <summary>
            Represents a note frequency
            </summary>
        </member>
        <member name="T:CoreLib.Audio.NoteConversionMode">
            <summary>
            Represents possible note conversion methods
            </summary>
        </member>
        <member name="F:CoreLib.Audio.NoteConversionMode.AsIs">
            <summary>
            Does not change the note frequency
            </summary>
        </member>
        <member name="F:CoreLib.Audio.NoteConversionMode.ToHigher">
            <summary>
            Converts notes (when possible) to their higher counterparts.
            <para/>
            ('Higher' being here the the ♯-Modifier. The actual frequency does not change)
            <para/>
            e.g.: G♭ ---> F♯ 
            </summary>
        </member>
        <member name="F:CoreLib.Audio.NoteConversionMode.ToLower">
            <summary>
            Converts notes (when possible) to their lower counterparts.
            <para/>
            ('Lower' being here the the ♭-Modifier. The actual frequency does not change)
            <para/>
            e.g.: A♯ ---> G♭
            </summary>
        </member>
        <member name="T:CoreLib.Audio.VolumeMeter">
            <summary>
            An output volume meter
            </summary>
        </member>
        <member name="M:CoreLib.Audio.VolumeMeter.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:CoreLib.Audio.VolumeMeter.LeftChannel">
            <summary>
            Returns the current left channel audio volume (0...1)
            </summary>
        </member>
        <member name="P:CoreLib.Audio.VolumeMeter.RightChannel">
            <summary>
            Returns the current right channel audio volume (0...1)
            </summary>
        </member>
        <member name="P:CoreLib.Audio.VolumeMeter.MasterChannel">
            <summary>
            Returns the current master channel audio volume (0...1)
            </summary>
        </member>
        <member name="P:CoreLib.Audio.VolumeMeter.AllChannels">
            <summary>
            Returns an array of all audio volume channels [left, right, master]
            </summary>
        </member>
        <member name="T:CoreLib.Audio.Win32_o">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:CoreLib.Audio.Win32_o.Volume">
            <summary>
            Returns the current averaged audio volume (0...1)
            </summary>
        </member>
        <member name="M:CoreLib.Audio.Win32_o.Volume2D">
            <summary>
            Returns the current output audio volume in a 2-dimensional form:
            <para/>
            { left, right }
            </summary>
        </member>
        <member name="P:CoreLib.Audio.Win32_o.VOL">
            <summary>
            Returns an array of all audio volume channels [left, right, master]
            </summary>
        </member>
        <member name="T:CoreLib.Audio.MorsePlayer">
            <summary>
            Manages a basic interface between ASCII[r]-strings and their audio morse representation
            </summary>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.GetDurations(System.String)">
            <summary>
            Returns the duration timetamps for the morse representation of the given ASCII[r]-string
            </summary>
            <param name="str">ASCII[r]-string</param>
            <returns>Duration timetamps</returns>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.ReadableString(System.Collections.Generic.IEnumerable{System.Tuple{System.Boolean,System.Int32}})">
            <summary>
            Prints a readable version of the given duration timestamps
            </summary>
            <param name="durations">Duration timestamps</param>
            <returns>Readable string</returns>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.Play(System.Collections.Generic.IEnumerable{System.Tuple{System.Boolean,System.Int32}},System.Int32)">
            <summary>
            Plays the given duration timestamps at a frequency of 783.99Hz [G5] using the given tick duration
            </summary>
            <param name="durations">Duration timestamps</param>
            <param name="tickdur">Tick duration [in ms]</param>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.Play(System.String,System.Int32)">
            <summary>
            Plays the calculated duration timestamps at a frequency of 783.99Hz [G5] based on the morse representation of the given ASCII[r]-string
            </summary>
            <param name="str">ASCII[r]-string</param>
            <param name="tickdur">Tick duration [in ms]</param>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.PlayBinary(System.String,System.Int32)">
            <summary>
            Plays the calculated duration timestamps at a frequency of 783.99Hz [G5] based on the binary morse representation of the given ASCII[r]-string
            </summary>
            <param name="str">ASCII[r]-string</param>
            <param name="tickdur">Tick duration [in ms]</param>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.PlayAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.Boolean,System.Int32}},System.Int32)">
            <summary>
            Asynchroniously plays the given duration timestamps at a frequency of 783.99Hz [G5] using the given tick duration
            </summary>
            <param name="durations">Duration timestamps</param>
            <param name="tickdur">Tick duration [in ms]</param>
            <returns>Asynchronious thread</returns>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.PlayAsync(System.String,System.Int32)">
            <summary>
            Asynchroniously plays the calculated duration timestamps at a frequency of 783.99Hz [G5] based on the morse representation of the given ASCII[r]-string
            </summary>
            <param name="str">ASCII[r]-string</param>
            <param name="tickdur">Tick duration [in ms]</param>
            <returns>Asynchronious thread</returns>
        </member>
        <member name="M:CoreLib.Audio.MorsePlayer.PlayAsyncBinary(System.String,System.Int32)">
            <summary>
            Asynchroniously plays the calculated duration timestamps at a frequency of 783.99Hz [G5] based on the binary morse representation of the given ASCII[r]-string
            </summary>
            <param name="str">ASCII[r]-string</param>
            <param name="tickdur">Tick duration [in ms]</param>
            <returns>Asynchronious thread</returns>
        </member>
        <member name="P:CoreLib.Audio.MorsePlayer.BinaryMorseCode">
            <summary>
            Returns an internal binary morse translation dictionary
            </summary>
        </member>
        <member name="F:CoreLib.Controls.MathFunctionControl.components">
            <summary> 
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:CoreLib.Controls.MathFunctionControl.Dispose(System.Boolean)">
            <summary> 
            Verwendete Ressourcen bereinigen.
            </summary>
            <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
        </member>
        <member name="M:CoreLib.Controls.MathFunctionControl.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="F:CoreLib.Controls.ApplicationManagerPreviewPictureBox.components">
            <summary> 
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:CoreLib.Controls.ApplicationManagerPreviewPictureBox.Dispose(System.Boolean)">
            <summary> 
            Verwendete Ressourcen bereinigen.
            </summary>
            <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
        </member>
        <member name="M:CoreLib.Controls.ApplicationManagerPreviewPictureBox.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="T:CoreLib.Controls.CopyrightDialog">
            <summary>
            UCLIB copyright dialog
            </summary>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialog.Show">
            <summary>
            Shows the copyright dialog for this assembly
            </summary>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialog.Show(System.Boolean)">
            <summary>
            Shows the copyright dialog for this assembly
            </summary>
            <param name="TopMost">Sets, whether the dialog window should be the top-most window or not</param>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialog.Show(System.Int32,System.Int32)">
            <summary>
            Shows the copyright dialog for this assembly
            </summary>
            <param name="XPos">Absolute X-position on the screen</param>
            <param name="YPos">Absolute Y-position on the screen</param>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the copyright dialog for this assembly
            </summary>
            <param name="Parent">The parent window</param>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialog.Show(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Shows the copyright dialog for this assembly
            </summary>
            <param name="Parent">The parent window</param>
            <param name="TopMost">Sets, whether the dialog window should be the top-most window or not</param>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialog.Show(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Shows the copyright dialog for this assembly
            </summary>
            <param name="TopMost">Sets, whether the dialog window should be the top-most window or not</param>
            <param name="XPos">Absolute X-position on the screen</param>
            <param name="YPos">Absolute Y-position on the screen</param>
        </member>
        <member name="F:CoreLib.Controls.CopyrightDialogBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialogBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CoreLib.Controls.CopyrightDialogBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CoreLib.Controls.PasswordCheckerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CoreLib.Controls.PasswordCheckerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CoreLib.Controls.PasswordCheckerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CoreLib.Controls.TaskDialog">
            <summary>
            The windows task dialog
            </summary>
        </member>
        <member name="T:CoreLib.Controls.TDButton">
            <summary>
            Windows task dialog buttons
            </summary>
        </member>
        <member name="T:CoreLib.Controls.TDResult">
            <summary>
            Windows task dialog result
            </summary>
        </member>
        <member name="T:CoreLib.Controls.TDIcon">
            <summary>
            Windows task dialog icon
            </summary>
        </member>
        <member name="F:CoreLib.Controls.TaskDialogBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CoreLib.Controls.TaskDialogBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CoreLib.Controls.TaskDialogBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CoreLib.Controls.TriangularTextBox.components">
            <summary> 
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:CoreLib.Controls.TriangularTextBox.Dispose(System.Boolean)">
            <summary> 
            Verwendete Ressourcen bereinigen.
            </summary>
            <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
        </member>
        <member name="M:CoreLib.Controls.TriangularTextBox.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.Brainfuck">
            <summary>
            Managing the Brainfuck programming language
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.CleanBrainfuckCode(System.String)">
            <summary>
            Cleans up brainfuck code to match the eight basic commands
            </summary>
            <param name="bf">Brainfuck code</param>
            <returns>Cleaned brainfuck code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.CleanBrainfuckCode(CoreLib.Conversion.BrainfuckCommand[])">
            <summary>
            Cleans up brainfuck instructions to match the eight basic commands
            </summary>
            <param name="bf">Brainfuck instructions</param>
            <returns>Cleaned brainfuck instructions</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.InstructionsToBrainfuck(CoreLib.Conversion.BrainfuckCommand[])">
            <summary>
            Converts brainfuck instructions to brainfuck code
            </summary>
            <param name="instructions">Brainfuck instructions</param>
            <returns>Brainfuck code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToInstructions(System.String)">
            <summary>
            Converts brainfuck code to brainfuck instructions
            </summary>
            <param name="bf">Brainfuck code</param>
            <returns>Brainfuck instructions</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.ToBasicBrainfuck(System.String)">
            <summary>
            Converts advanced brainfuck code to basic brainfuck code
            </summary>
            <param name="bf">Advanced brainfuck code</param>
            <returns>Basic brainfuck code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.ToBasicBrainfuck(CoreLib.Conversion.BrainfuckCommand[])">
            <summary>
            Converts advanced brainfuck instructions to basic brainfuck instructions
            </summary>
            <param name="instructions">Advanced brainfuck instructions</param>
            <returns>Basic brainfuck instructions</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToCPP(System.String)">
            <summary>
            Converts brainfuck instructions to C++ code
            </summary>
            <param name="bf">Brainfuck instructions</param>
            <param name="size">Brainfuck buffer size</param>
            <returns>C++ code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToCPP(CoreLib.Conversion.BrainfuckCommand[])">
            <summary>
            Converts brainfuck instructions to C++ code
            </summary>
            <param name="bf">Brainfuck instructions</param>
            <param name="size">Brainfuck buffer size</param>
            <returns>C++ code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToASM(System.String,System.UInt32)">
            <summary>
            Converts brainfuck instructions to assembler code
            </summary>
            <param name="bf">Brainfuck code</param>
            <param name="size">Assembler stack size</param>
            <returns>Assembler code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToASM(CoreLib.Conversion.BrainfuckCommand[],System.UInt32)">
            <summary>
            Converts brainfuck instructions to assembler code
            </summary>
            <param name="bf">Brainfuck instructions</param>
            <param name="size">Assembler stack size</param>
            <returns>Assembler code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToCS(System.String,System.UInt32)">
            <summary>
            Converts brainfuck instructions to C# code
            </summary>
            <param name="bf">Brainfuck code</param>
            <param name="size">Brainfuck buffer size</param>
            <returns>C# code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToCS(CoreLib.Conversion.BrainfuckCommand[],System.UInt32)">
            <summary>
            Converts brainfuck instructions to C# code
            </summary>
            <param name="bf">Brainfuck instructions</param>
            <param name="size">Brainfuck buffer size</param>
            <returns>C# code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToCCS(System.String,System.UInt32)">
            <summary>
            Converts brainfuck instructions to compact C# code
            </summary>
            <param name="bf">Brainfuck code</param>
            <param name="size">Brainfuck buffer size</param>
            <returns>Compact C# code</returns>
        </member>
        <member name="M:CoreLib.Conversion.Brainfuck.BrainfuckToCCS(CoreLib.Conversion.BrainfuckCommand[],System.UInt32)">
            <summary>
            Converts brainfuck instructions to compact C# code
            </summary>
            <param name="bf">Brainfuck instructions [basic set]</param>
            <param name="size">Brainfuck buffer size</param>
            <returns>Compact C# code</returns>
        </member>
        <member name="T:CoreLib.Conversion.BrainfuckCommand">
            <summary>
            Brainfuck instructions
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.NOP">
            <summary>
            0x00, 0x20 - No Operation
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.VUP">
            <summary>
            0x01, 0x2b - Value Up
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.VDN">
            <summary>
            0x02, 0x2d - Value Down
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.PRT">
            <summary>
            0x03, 0x3e - Pointer Up
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.PLF">
            <summary>
            0x04, 0x3c - Pointer Down
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.OUT">
            <summary>
            0x05, 0x2e - Output char
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.IN">
            <summary>
            0x06, 0x2c - Input char
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.WHL">
            <summary>
            0x07, 0x5b - While start
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.END">
            <summary>
            0x08, 0x5d - While end
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.NUL">
            <summary>
            0x09, 0x30 - Set to 0
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.FUL">
            <summary>
            0x0a, 0x24 - Set to 255
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.NOT">
            <summary>
            0x0b, 0x7e - Binary not
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.OR">
            <summary>
            0x0c, 0x7c - Binary or
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.AND">
            <summary>
            0x0d, 0x26 - Binary and
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.XOR">
            <summary>
            0x0e, 0x5e - Binary xor
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.PLN">
            <summary>
            0x0f, 0x21 - PrintLine
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.ADD">
            <summary>
            0x10, 0x22 - Addition
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.SUB">
            <summary>
            0x11, 0x27 - Subtraction
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.MUL">
            <summary>
            0x12, 0x2a - Multiplication
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.DIV">
            <summary>
            0x13, 0x2f - Division
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.MOD">
            <summary>
            0x14, 0x25 - Modulo division
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.SHL">
            <summary>
            0x15, 0x4c - Bitshift left
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.SHR">
            <summary>
            0x16, 0x52 - Bitshift right
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.ROL">
            <summary>
            0x17, 0x6c - Binary rotation left
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.ROR">
            <summary>
            0x18, 0x72 - Binary rotation right
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.WLE">
            <summary>
            0x19, 0x28 - while less or equal
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.WGE">
            <summary>
            0x1a, 0x29 - while greater or equal
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.IFN">
            <summary>
            0x1b, 0x7b - if not zero
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.ILE">
            <summary>
            0x1c, 0x7d - if less or equal
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.SWP">
            <summary>
            0x1d, 0x23 - Swap cells [ptr, ++ptr]
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.MVL">
            <summary>
            0x1e, 0xb2 - Move content to left
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.MVR">
            <summary>
            0x1f, 0xb3 - Move content to right
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.SPC">
            <summary>
            0x20, 0x64 - Prints space
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.BrainfuckCommand.DEB">
            <summary>
            0xff, 0x3f - Debug command
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.ByteConverter">
            <summary>
            Manages the conversion of native/simple datatypes to their corresponding byte-arrays
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the byte-array representing the given boolean value
            </summary>
            <param name="value">Boolean value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Byte)">
            <summary>
            Returns the byte-array representing the given byte value
            </summary>
            <param name="value">Byte value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Char)">
            <summary>
            Returns the byte-array representing the given character value
            </summary>
            <param name="value">Character value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Int16)">
            <summary>
            Returns the byte-array representing the given short integer value
            </summary>
            <param name="value">Short integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the byte-array representing the given unsigned short integer value
            </summary>
            <param name="value">Unsigned short integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Int32)">
            <summary>
            Returns the byte-array representing the given integer value
            </summary>
            <param name="value">Integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the byte-array representing the given unsigned integer value
            </summary>
            <param name="value">Unsigned integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Int64)">
            <summary>
            Returns the byte-array representing the given long integer value
            </summary>
            <param name="value">Long integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the byte-array representing the given unsigned long integer value
            </summary>
            <param name="value">Unsigned long integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Single)">
            <summary>
            Returns the byte-array representing the given single-precision floating-point value
            </summary>
            <param name="value">Single-precision floating-point value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Double)">
            <summary>
            Returns the byte-array representing the given double-precision floating-point value
            </summary>
            <param name="value">Double-precision floating-point value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the byte-array representing the given decimal value
            </summary>
            <param name="value">Decimal value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBool(System.Byte[])">
            <summary>
            Returns the boolean value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetByte(System.Byte[])">
            <summary>
            Returns the byte value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Byte value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetChar(System.Byte[])">
            <summary>
            Returns the character value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Character value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetShort(System.Byte[])">
            <summary>
            Returns the short integer value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Short integer</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetUShort(System.Byte[])">
            <summary>
            Returns the unsigned short integer value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Unsigned short integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetInt(System.Byte[])">
            <summary>
            Returns the integer value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetUInt(System.Byte[])">
            <summary>
            Returns the unsigned integer value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Unsigned integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetLong(System.Byte[])">
            <summary>
            Returns the long integer value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Long integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetULong(System.Byte[])">
            <summary>
            Returns the unsigned long integer value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Unsigned long integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetFloat(System.Byte[])">
            <summary>
            Returns the single-precision floating-point value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Single-precision floating-point value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetDouble(System.Byte[])">
            <summary>
            Returns the double-precision value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Double-precision value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetDecimal(System.Byte[])">
            <summary>
            Returns the decimal value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Decimal value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPBool(System.Byte[])">
            <summary>
            Returns the boolean value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPByte(System.Byte[])">
            <summary>
            Returns the byte value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Byte value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPChar(System.Byte[])">
            <summary>
            Returns the character value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Character value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPShort(System.Byte[])">
            <summary>
            Returns the short integer value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Short integer</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPUShort(System.Byte[])">
            <summary>
            Returns the unsigned short integer value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Unsigned short integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPInt(System.Byte[])">
            <summary>
            Returns the integer value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPUInt(System.Byte[])">
            <summary>
            Returns the unsigned integer value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Unsigned integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPLong(System.Byte[])">
            <summary>
            Returns the long integer value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Long integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPULong(System.Byte[])">
            <summary>
            Returns the unsigned long integer value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Unsigned long integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPFloat(System.Byte[])">
            <summary>
            Returns the single-precision floating-point value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Single-precision floating-point value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPDouble(System.Byte[])">
            <summary>
            Returns the double-precision value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Double-precision value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetPDecimal(System.Byte[])">
            <summary>
            Returns the decimal value represented by the given byte-array
            </summary>
            <param name="bts">Byte-array</param>
            <returns>Decimal value</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.Net.IPAddress)">
            <summary>
            Returns the byte-array representing the given IP-Address
            </summary>
            <param name="value">IP-Address</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetBytes(System.DateTime)">
            <summary>
            Returns the byte-array representing the given date/time value
            </summary>
            <param name="value">Date/time value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetIPAddress(System.Byte[])">
            <summary>
            Returns the IP-Address represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>IP-Address</returns>
        </member>
        <member name="M:CoreLib.Conversion.ByteConverter.GetDateTime(System.Byte[])">
            <summary>
            Returns the date/time value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Date/time value</returns>
        </member>
        <member name="T:CoreLib.Text">
            <summary>
            Contains basic conversion and extension methods
            </summary>
        </member>
        <member name="F:CoreLib.Text.CHR_NULL">
            <summary>
            Symbolic NUL-character ('\x00', NULL)
            </summary>
        </member>
        <member name="F:CoreLib.Text.CHR_SP">
            <summary>
            Symbolic SP-character ('\x20', SPACE)
            </summary>
        </member>
        <member name="F:CoreLib.Text.CHR_NL">
            <summary>
            Symbolic NL-character ('\x0a', NEWLINE)
            </summary>
        </member>
        <member name="F:CoreLib.Text.CHR_SPECIALS">
            <summary>
            An array of special character representations
            </summary>
        </member>
        <member name="F:CoreLib.Text.NumericTypes">
            <summary>
            A list of datatypes, which can be used as numeric values
            </summary>
        </member>
        <member name="M:CoreLib.Text.ROL(System.Int32,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.UInt32,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.Int64,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.UInt64,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.UInt16,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.Int16,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.Byte,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.SByte,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROL(System.Char,System.Int32)">
            <summary>
            Rotates the value binarily to the left
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.Int32,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.UInt32,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.Int64,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.UInt64,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.UInt16,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.Int16,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.Byte,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.SByte,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.ROR(System.Char,System.Int32)">
            <summary>
            Rotates the value binarily to the right
            </summary>
            <param name="inp">Input value</param>
            <param name="offset">Rotation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.Int32)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.UInt32)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.Int64)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.UInt64)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.Int16)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.UInt16)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.Byte)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.SByte)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.GetBits(System.Char)">
            <summary>
            Returns an array of boolean values, which represent the given value
            </summary>
            <param name="inp">Value to be converted into a boolean value array</param>
            <returns>Array of boolean values</returns>
        </member>
        <member name="M:CoreLib.Text.ReverseBits(System.Int32)">
            <summary>
            Reverses the given interger's bits and returns the reversed number
            </summary>
            <param name="inp">Integer number</param>
            <returns>Reversed number</returns>
        </member>
        <member name="M:CoreLib.Text.ReverseBits(System.UInt32)">
            <summary>
            Reverses the given unsigned interger's bits and returns the reversed number
            </summary>
            <param name="inp">Unsigned integer number</param>
            <returns>Reversed number</returns>
        </member>
        <member name="M:CoreLib.Text.tBA(System.Int32[])">
            <summary>
            Returns the byte array, which represents the given integer array
            </summary>
            <param name="arr">Integer array</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:CoreLib.Text.tIA(System.Byte[])">
            <summary>
            Returns the integer array, which the given byte array represents
            </summary>
            <param name="arr">Byte array</param>
            <returns>Integer array</returns>
        </member>
        <member name="M:CoreLib.Text.tI(System.Byte[])">
            <summary>
            Returns the integer value, which is represented by the given byte array
            </summary>
            <param name="arr">Byte array</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:CoreLib.Text.tUI(System.Byte[])">
            <summary>
            Returns the unsigned integer value, which is represented by the given byte array
            </summary>
            <param name="arr">Byte array</param>
            <returns>Unsigned integer value</returns>
        </member>
        <member name="M:CoreLib.Text.tL(System.Byte[])">
            <summary>
            Returns the long integer value, which is represented by the given byte array
            </summary>
            <param name="arr">Byte array</param>
            <returns>Long integer value</returns>
        </member>
        <member name="M:CoreLib.Text.tUL(System.Byte[])">
            <summary>
            Returns the unsigned long integer value, which is represented by the given byte array
            </summary>
            <param name="arr">Byte array</param>
            <returns>Unsigned long integer value</returns>
        </member>
        <member name="M:CoreLib.Text.tS(System.Byte[])">
            <summary>
            Returns the short integer value, which is represented by the given byte array
            </summary>
            <param name="arr">Byte array</param>
            <returns>Short integer value</returns>
        </member>
        <member name="M:CoreLib.Text.tUS(System.Byte[])">
            <summary>
            Returns the unsigned short integer value, which is represented by the given byte array
            </summary>
            <param name="arr">Byte array</param>
            <returns>Unsigned short integer value</returns>
        </member>
        <member name="M:CoreLib.Text.tUS(System.Int32)">
            <summary>
            Returns an array of unsigned short integer values, which is representing the given integer value
            </summary>
            <param name="value">Integer value</param>
            <returns>Array of unsigned short integer values</returns>
        </member>
        <member name="M:CoreLib.Text.tUS(System.UInt32)">
            <summary>
            Returns an array of unsigned short integer values, which is representing the given unsigned integer value
            </summary>
            <param name="value">Unsigned integer value</param>
            <returns>Array of unsigned short integer values</returns>
        </member>
        <member name="M:CoreLib.Text.tUS(System.String)">
            <summary>
            Returns an array of unsigned short integer values, which is representing the given UTF16-string value
            </summary>
            <param name="value">UTF16-string</param>
            <returns>Array of unsigned short integer values</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.Int32)">
            <summary>
            Returns the byte-array representing the given integer value
            </summary>
            <param name="value">Integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.UInt32)">
            <summary>
            Returns the byte-array representing the given unsigned integer value
            </summary>
            <param name="value">Unsigned integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.Int64)">
            <summary>
            Returns the byte-array representing the given long integer value
            </summary>
            <param name="value">Long integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.UInt64)">
            <summary>
            Returns the byte-array representing the given unsigned long integer value
            </summary>
            <param name="value">Unsigned long integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.Int16)">
            <summary>
            Returns the byte-array representing the given short integer value
            </summary>
            <param name="value">Short integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.UInt16)">
            <summary>
            Returns the byte-array representing the given unsigned short integer value
            </summary>
            <param name="value">Unsigned short integer value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.fB(System.Byte[])">
            <summary>
            Returns the ASCII8-string value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.String)">
            <summary>
            Returns the byte-array representing the given ASCII8-string
            </summary>
            <param name="val">ASCII8-string</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tB(System.DateTime)">
            <summary>
            Returns the byte-array representing the given date/time value
            </summary>
            <param name="val">Date/time value</param>
            <returns>Byte-array</returns>
        </member>
        <member name="M:CoreLib.Text.tDate(System.Byte[])">
            <summary>
            Returns the date/time value represented by the given byte-array
            </summary>
            <param name="value">Byte-array</param>
            <returns>Date/time value</returns>
        </member>
        <member name="M:CoreLib.Text.tStr(System.Byte[])">
            <summary>
            Returns a string, which represents the given byte array in the following form:
            <para/>
            0x00 0x00 0x00 ...
            </summary>
            <param name="arr">Byte array</param>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.UInt32)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.Int32)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.UInt64)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.Int64)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.UInt16)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.Int16)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.SByte)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tASCII8(System.Byte)">
            <summary>
            Returns an ASCII8-string, which represents the given numeric value
            </summary>
            <param name="value">Numeric value</param>
            <returns>ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Text.tHEX(System.Byte[],CoreLib.OMode,System.Boolean)">
            <summary>
            Displays the given byte array as hexadecimal string using the given rules 
            </summary>
            <param name="value">Byte array</param>
            <param name="mode">Casing mode</param>
            <param name="UseSpacing">Spacing</param>
            <returns>Hexadecimal string</returns>
        </member>
        <member name="M:CoreLib.Text.StrHex(System.String,CoreLib.HMode)">
            <summary>
            Converts a given string to its ASCII8 or hexadecimal counterpart
            </summary>
            <param name="value">Input string</param>
            <param name="mode">Conversion mode</param>
            <returns>Output string</returns>
        </member>
        <member name="M:CoreLib.Text.ByteHex(System.String)">
            <summary>
            Returns the byte array parsed from the given hexadecimal string
            </summary>
            <param name="hex">Hexadecimal string</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:CoreLib.Text.ByteHex(System.Byte[])">
            <summary>
            Returns a hexadecimal string, which represents the given byte array
            </summary>
            <param name="dat">Byte array</param>
            <returns>Hexadecimal string</returns>
        </member>
        <member name="M:CoreLib.Text.tB64(System.String,System.Text.Encoding)">
            <summary>
            Encodes the given plain string to a Base64-encoded string using the given (optional) encoding
            </summary>
            <param name="inp">Plain string</param>
            <param name="enc">(Optional) Encoding [default: UTF16]</param>
            <returns>Base64-encoded string</returns>
        </member>
        <member name="M:CoreLib.Text.fB64(System.String,System.Text.Encoding)">
            <summary>
            Decodes the given Base64-encoded string using the given (optional) encoding
            </summary>
            <param name="inp">Base64-encoded string</param>
            <param name="enc">(Optional) Encoding [default: UTF16]</param>
            <returns>Plain string</returns>
        </member>
        <member name="M:CoreLib.Text.Zip(System.String,System.Text.Encoding)">
            <summary>
            Compresses a given plain string using the given (optional) encoding
            </summary>
            <param name="inp">Plain string</param>
            <param name="enc">(Optional) Encoding [default: UTF16]</param>
            <returns>Compressed string</returns>
        </member>
        <member name="M:CoreLib.Text.Unzip(System.String,System.Text.Encoding)">
            <summary>
            Decompresses a given compressed string using the given (optional) encoding
            </summary>
            <param name="inp">Compressed string</param>
            <param name="enc">(Optional) Encoding [default: UTF16]</param>
            <returns>Decompressed string</returns>
        </member>
        <member name="M:CoreLib.Text.Zip(System.Byte[])">
            <summary>
            Compresses the given byte array and returns the compressed result
            </summary>
            <param name="inp">Plain byte array</param>
            <returns>Compressed byte array</returns>
        </member>
        <member name="M:CoreLib.Text.Unzip(System.Byte[])">
            <summary>
            Decompresses the given byte array and returns the plain result
            </summary>
            <param name="inp">Compressed byte array</param>
            <returns>Decompressed byte array</returns>
        </member>
        <member name="M:CoreLib.Text.tHEX__wchar_t(System.String)">
            <summary>
            Converts a given UTF16-string to its hexadecimal counterpart
            </summary>
            <param name="str">UTF16-string</param>
            <returns>Hexadecimal string</returns>
        </member>
        <member name="M:CoreLib.Text.fHEX__wchar_t(System.String)">
            <summary>
            Converts a given hexadecimal string to its UTF16 counterpart
            </summary>
            <param name="str">Hexadecimal string</param>
            <returns>UTF16-string</returns>
        </member>
        <member name="M:CoreLib.Text.RotateLeft(System.Byte[])">
            <summary>
            Rotates the given byte array bitwise to the left by one bit
            </summary>
            <param name="bytes">Byte array</param>
        </member>
        <member name="M:CoreLib.Text.RotateLeft(System.Byte[],System.Int32)">
            <summary>
            Rotates the given byte array bitwise to the left by the given offset
            </summary>
            <param name="bytes">Byte array</param>
            <param name="offset">Rotation offset</param>
        </member>
        <member name="M:CoreLib.Text.RotateRight(System.Byte[])">
            <summary>
            Rotates the given byte array bitwise to the right by one bit
            </summary>
            <param name="bytes">Byte array</param>
        </member>
        <member name="M:CoreLib.Text.RotateRight(System.Byte[],System.Int32)">
            <summary>
            Rotates the given byte array bitwise to the right by given offset
            </summary>
            <param name="bytes">Byte array</param>
            <param name="offset">Rotation offset</param>
        </member>
        <member name="M:CoreLib.Text.ShiftLeft(System.Byte[])">
            <summary>
            Shifts the given byte array bitwise to the left by one bit and returns a boolean value based on the overhang bit
            </summary>
            <param name="bytes">Byte array</param>
            <returns>Overhang bit</returns>
        </member>
        <member name="M:CoreLib.Text.ShiftRight(System.Byte[])">
            <summary>
            Shifts the given byte array bitwise to the right by one bit and returns a boolean value based on the overhang bit
            </summary>
            <param name="bytes">Byte array</param>
            <returns>Overhang bit</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.Int32)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.UInt32)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.Char)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.Int64)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.UInt64)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.Single)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.Double)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.ChangeEndian(System.Decimal)">
            <summary>
            Reverses the endianess of the given numeric value and returns the result
            </summary>
            <param name="value">Numeric value</param>
            <returns>Numeric value with the changed endianess</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.Byte)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.SByte)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.Int16)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.UInt16)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.Int32)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.UInt32)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.Int64)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.UInt64)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSuperscript(System.Decimal)">
            <summary>
            Returns a superscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Superscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.Byte)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.SByte)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.Int16)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.UInt16)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.Int32)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.UInt32)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.Int64)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.GetSubscript(System.UInt64)">
            <summary>
            Returns a subscript string, which represents the given numeric value
            </summary>
            <param name="number">Numeric value</param>
            <returns>Subscript string</returns>
        </member>
        <member name="M:CoreLib.Text.IsNumeric(System.String)">
            <summary>
            Returns whether the given string can be passed as any numeric value (integer, decimal or floating-point)
            </summary>
            <param name="value">String containing a possible numeric value</param>
            <returns>Returns whether the string is a numeric value</returns>
        </member>
        <member name="M:CoreLib.Text.ParseNumeric(System.String)">
            <summary>
            Parses the given string as numeric value and returns the possible result
            </summary>
            <param name="value">String containing a possible numeric value</param>
            <returns>Numeric value</returns>
            <exception cref="T:System.ArgumentException">Thrown, when the string does not contain any numeric value</exception>
        </member>
        <member name="M:CoreLib.Text.ToDate(System.String,System.Boolean)">
            <summary>
            Parses the given string to a date/time-instance
            </summary>
            <param name="input">String to be parsed</param>
            <param name="throw_exp">Boolean value indicating whether to throw an exception or not</param>
            <returns>Date/time-instance</returns>
            <exception cref="T:System.FormatException">Thrown if the string could not be parsed</exception>
        </member>
        <member name="M:CoreLib.Text.WordWrap(System.String,System.Int32)">
            <summary>
            Wrappes the given string, so its lines do not exceed the given width
            </summary>
            <param name="text">String</param>
            <param name="width">Maximum line width</param>
            <returns>Wrapped string</returns>
        </member>
        <member name="M:CoreLib.Text.Reverse(System.String)">
            <summary>
            Reverses the character order of the given string and returns the result
            </summary>
            <param name="input">Input string</param>
            <returns>Reversed string</returns>
        </member>
        <member name="M:CoreLib.Text.ContainsEmail(System.String)">
            <summary>
            Returns a boolean value whether the given string is an email-address or not
            </summary>
            <param name="input">String to be analyzed</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:CoreLib.Text.ContainsPhone(System.String)">
            <summary>
            Returns a boolean value whether the given string is a telephone number or not
            </summary>
            <param name="input">String to be analyzed</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:CoreLib.Text.IsNumber(System.String)">
            <summary>
            Returns a boolean value whether the given string is a integer number or not
            </summary>
            <param name="input">String to be analyzed</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:CoreLib.Text.ExtractNumber(System.String)">
            <summary>
            Extracts an integer number from the given string
            </summary>
            <param name="input">String</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:CoreLib.Text.ExtractEmail(System.String)">
            <summary>
            Extracts an email-address from the given string
            </summary>
            <param name="input">String</param>
            <returns>Email-address</returns>
        </member>
        <member name="M:CoreLib.Text.ExtractQueryStringParamValue(System.String,System.String)">
            <summary>
            Extracts the paramater value of an URI-query from the query string using the given parameter name
            </summary>
            <param name="query">Query string</param>
            <param name="param">Parameter name</param>
            <returns>Parameter value</returns>
            <exception cref="!:System.KeyNotFoundException">Thrown, if the parameter could not be found inside the query string</exception>
        </member>
        <member name="M:CoreLib.Text.EscapeControlChars(System.String)">
            <summary>
            Escapes control characters from the given string and returns the result
            </summary>
            <param name="unicode_str">String to be escaped</param>
            <returns>Escaped string</returns>
        </member>
        <member name="M:CoreLib.Text.UndecorateCPPFunction(System.String)">
            <summary>
            Undecorates Visual C++-compiled function names to their C++-signature
            </summary>
            <param name="decorated_str">Decorated C++ function name</param>
            <returns>Undecorated C++-signature</returns>
        </member>
        <member name="M:CoreLib.Text.ToString``1(``0)">
            <summary>
            Displayes the string of any given enum value
            </summary>
            <typeparam name="T">Generic enum type T</typeparam>
            <param name="value">Value of type T</param>
            <returns>String</returns>
            <exception cref="T:System.ArgumentException">Thrown, if T is not an enum</exception>
        </member>
        <member name="M:CoreLib.Text.GetUnixTimestamp(System.DateTime)">
            <summary>
            Returns the unix timestamp from the given `System::DateTime`-instance
            </summary>
            <param name="dt">`System::DateTime`-instance</param>
            <returns>Unix timestamp</returns>
        </member>
        <member name="T:CoreLib.HMode">
            <summary>
            Hexadecimal conversion mode
            </summary>
        </member>
        <member name="F:CoreLib.HMode.ASC_TO_HEX">
            <summary>
            Conversion from ASCII8 to hexadecimal
            </summary>
        </member>
        <member name="F:CoreLib.HMode.HEX_TO_ASC">
            <summary>
            Conversion from hexadecimal to ASCII8
            </summary>
        </member>
        <member name="T:CoreLib.OMode">
            <summary>
            Casing mode
            </summary>
        </member>
        <member name="F:CoreLib.OMode.UpperCase">
            <summary>
            Upper case
            </summary>
        </member>
        <member name="F:CoreLib.OMode.LowerCase">
            <summary>
            Lower case
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.NATOAlphabet">
            <summary>
            Manages all functions concerning the NATO phonic alphabet
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.NATOAlphabet.Translate(System.Char)">
            <summary>
            Returns the NATO phonic translation of the given character
            </summary>
            <param name="c">Character</param>
            <returns>NATO phonic translation</returns>
        </member>
        <member name="M:CoreLib.Conversion.NATOAlphabet.Translate(System.String)">
            <summary>
            Returns the NATO phonic translation of the given string
            </summary>
            <param name="str">String</param>
            <returns>NATO phonic translation</returns>
        </member>
        <member name="P:CoreLib.Conversion.NATOAlphabet.Alphabet">
            <summary>
            Returns the internal NATO phonic alphabet dictionary
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.GermanPseudoRussian">
            <summary>
            Manages a conversion from the German language to a Pseudo-Russian language.
            <para/>
            The Pseudo-Russian is written using cyrillic letters, but sounds like German, when read with Russian pronounciation
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.GermanPseudoRussian.Init">
            <summary>
            Initializes the translation dictionary
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.GermanPseudoRussian.GermanToPseudorussian(System.String)">
            <summary>
            Converts a given German string to Pseudo-Russian
            </summary>
            <param name="german">German string</param>
            <returns>Pseudo-Russian string</returns>
        </member>
        <member name="P:CoreLib.Conversion.GermanPseudoRussian.PseudoTranslation">
            <summary>
            Pseudo-Russian letter/syllable dictionary
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.MSIL">
            <summary>
            Manages all basic methods involving the MSIL-language (Microsoft Intermediate Language)
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.MSIL.GetMSILBytes(System.Reflection.MethodInfo)">
            <summary>
            Decompiles the given method body into an array of MSIL-bytes
            </summary>
            <param name="method">Method body to decompile</param>
            <returns>Array of MSIL-bytes</returns>
        </member>
        <member name="M:CoreLib.Conversion.MSIL.DecompileBody(System.Text.StringBuilder@,System.Byte[])">
            <summary>
            Converts an array of MSIL-bytes into a readable MSIL-string
            </summary>
            <param name="sb">StringBuilder, into which the MSIL-string will be written</param>
            <param name="msil">MSIL-bytes</param>
        </member>
        <member name="P:CoreLib.Conversion.MSIL.ArgumentSize">
            <summary>
            A dictionary of MSIL-OPCodes and their corresponding argument size
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.Serialization">
            <summary>
            Converts any serializable object to a XML-string and back
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.Serialize``1(``0)">
            <summary>
            Generates the XML-string based on the given generic object value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="obj">Object value of the type T</param>
            <returns>XML-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.Deserialize``1(System.String)">
            <summary>
            Generates a generic object value based on the given XML-string
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="xml">XML-string</param>
            <returns>Object value of the type T</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.Deserialize(System.String,System.Type)">
            <summary>
            Generates an object value based on the given XML-string
            </summary>
            <param name="xml">XML-string</param>
            <param name="t">The object's type</param>
            <returns>Object value</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.UTF8ts(System.Byte[])">
            <summary>
            Converts an array of UTF8-bytes to their string representation
            </summary>
            <param name="bytes">Array of UTF8-bytes</param>
            <returns>UTF8-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.UTF8fs(System.String)">
            <summary>
            Converts a UTF8-string to its underlying byte-array
            </summary>
            <param name="string">UTF8-string</param>
            <returns>Array of UTF8-bytes</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.SerializeJSON``1(``0)">
            <summary>
            Generates the JSON-string based on the given generic object value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="obj">Object value of the type T</param>
            <returns>JSON-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.DeserializeJSON``1(System.String)">
            <summary>
            Generates a generic object value based on the given JSON-string
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="json">JSON-string</param>
            <returns>Object value of the type T</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.DeserializeJSON(System.String,System.Type)">
            <summary>
            Generates an object value based on the given JSON-string
            </summary>
            <param name="json">JSON-string</param>
            <param name="t">The object's type</param>
            <returns>Object value</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.FormatJSON(System.String,System.UInt32)">
            <summary>
            Performs a basic formatting operation on the given JSON string.
            <para/>
            Do NOT use on partly formatted strings - only on unformatted ones
            </summary>
            <param name="json">Unformatted JSON string</param>
            <param name="tabwidth">Preferred tab width (default is 4)</param>
            <returns>Formatted JSON string</returns>
        </member>
        <member name="M:CoreLib.Conversion.Serialization.FormatXML(System.String,System.UInt32)">
            <summary>
            Performs a basic formatting operation on the given XML string.
            </summary>
            <param name="xml">Unformatted XML string</param>
            <param name="tabwidth">Preferred tab width (default is 4)</param>
            <returns>Formatted XML string</returns>
        </member>
        <member name="T:CoreLib.Conversion.INativeUnion`1">
            <summary>
            A native, generic union interface containing a native and managed target structure pointer
            </summary>
            <typeparam name="T">Target structure</typeparam>
        </member>
        <member name="P:CoreLib.Conversion.INativeUnion`1.Pointer">
            <summary>
            Native pointer
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.INativeUnion`1.GCPointer">
            <summary>
            Managed pointer
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.BoolInt">
            <summary>
            An integer value, which can be converted to a 4-byte boolean array
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.BoolInt.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="val">Integer value</param>
        </member>
        <member name="M:CoreLib.Conversion.BoolInt.#ctor(System.Boolean[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="val">Boolean array value</param>
        </member>
        <member name="M:CoreLib.Conversion.BoolInt.op_Implicit(CoreLib.Conversion.BoolInt)~System.Boolean[]">
            <summary>
            Returns the boolean value array
            </summary>
            <param name="ins">BoolInt instance</param>
            <returns>Boolean value array</returns>
        </member>
        <member name="M:CoreLib.Conversion.BoolInt.op_Implicit(CoreLib.Conversion.BoolInt)~System.Int32">
            <summary>
            Returns the integer value
            </summary>
            <param name="ins">BoolInt instance</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.BoolInt.op_Implicit(System.Boolean[])~CoreLib.Conversion.BoolInt">
            <summary>
            Returns a BoolInt instance
            </summary>
            <param name="bool">Boolean value array</param>
            <returns>BoolInt instance</returns>
        </member>
        <member name="M:CoreLib.Conversion.BoolInt.op_Implicit(System.Int32)~CoreLib.Conversion.BoolInt">
            <summary>
            Returns a BoolInt instance
            </summary>
            <param name="int">Integer value</param>
            <returns>BoolInt instance</returns>
        </member>
        <member name="P:CoreLib.Conversion.BoolInt.Int">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.BoolInt.Bool">
            <summary>
            Boolean value array
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.BoolInt.Pointer">
            <summary>
            Native pointer
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.BoolInt.GCPointer">
            <summary>
            Managed pointer
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.BoolInt.Item(System.Int32)">
            <summary>
            Boolean value array
            </summary>
            <param name="index">Array index</param>
            <returns>Boolean value at the given index</returns>
        </member>
        <member name="T:CoreLib.Conversion.LongInt">
            <summary>
            A long integer value, which can be converted into two integer values
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.LongInt.I1">
            <summary>
            First integer value
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.LongInt.I2">
            <summary>
            Second integer value
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.LongInt.L1">
            <summary>
            Long integer value
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.LongInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="i1">First integer value</param>
            <param name="i2">Second integer value</param>
        </member>
        <member name="M:CoreLib.Conversion.LongInt.#ctor(System.Int64)">
            <summary>
            Creates a new instance
            </summary>
            <param name="l1">Long integer value</param>
        </member>
        <member name="M:CoreLib.Conversion.LongInt.op_Implicit(CoreLib.Conversion.LongInt)~System.Int64">
            <summary>
            Returns the long integer value
            </summary>
            <param name="__">LongInt instance</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:CoreLib.Conversion.LongInt.op_Implicit(System.Int64)~CoreLib.Conversion.LongInt">
            <summary>
            Returns a LongInt instance
            </summary>
            <param name="__">long integer value</param>
            <returns>LongInt instance</returns>
        </member>
        <member name="P:CoreLib.Conversion.LongInt.Pointer">
            <summary>
            Native pointer
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.LongInt.GCPointer">
            <summary>
            Managed pointer
            </summary>
        </member>
        <member name="T:CoreLib.Generic.IsLower`1">
            <summary>
            Comparison delegate function, which compares two items and returns whether the first one is lower than the second one
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="elem1">First element of the type T</param>
            <param name="elem2">Second element of the type T</param>
            <returns>Conmparison result</returns>
        </member>
        <member name="T:CoreLib.Generic.Tree`1">
            <summary>
            Represents a two-dimensional generic binary tree 
            </summary>
            <typeparam name="T">Generic type T</typeparam>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.Clear">
            <summary>
            Clears all tree nodes
            </summary>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.Contains(`0)">
            <summary>
            Returns, whether the tree contains the given node value
            </summary>
            <param name="element">Node value</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.AddElement(`0)">
            <summary>
            Adds a new node value to the binary tree
            </summary>
            <param name="element">Node value</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.AddElements(`0[])">
            <summary>
            Adds a range of new node values to the binary tree
            </summary>
            <param name="elements">Node values</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.AddElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of new node values to the binary tree
            </summary>
            <param name="elements">Node values</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.RemoveElement(`0)">
            <summary>
            Removes the given node value from the binary tree and returns whether it has been removed
            </summary>
            <param name="element">Node value</param>
            <returns>Removal ooperation result</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.RemoveElements(`0[])">
            <summary>
            Removes the given node values from the binary tree and returns whether they have been removed
            </summary>
            <param name="elements">Node values</param>
            <returns>Removal ooperation result</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.RemoveElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the given node values from the binary tree and returns whether they have been removed
            </summary>
            <param name="elements">Node values</param>
            <returns>Removal ooperation result</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.Occurences(`0)">
            <summary>
            Counts the number of coocurences of the given node value and returns the counting result
            </summary>
            <param name="element">Node value</param>
            <returns>Number of occurences</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.ToArray">
            <summary>
            Converts the tree into a generic array and returns the conversion result
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.InOrder">
            <summary>
            Returns the tree as ordered array
            </summary>
            <returns>Array with all elements in order</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.InReverseOrder">
            <summary>
            Returns the tree as reversly ordered array
            </summary>
            <returns>Array with all elements in reverse order</returns>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.Dispose">
            <summary>
            Disposes the tree and releases all underlying resources
            </summary>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(CoreLib.Generic.IsLower{`0})">
            <summary>
            Creates a new instance
            </summary>
            <param name="Comparator">Delegate method used for value comparison</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(`0)">
            <summary>
            Creates a new instance
            </summary>
            <param name="Element">First element to be added to the binary tree</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(`0[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="Elements">Range of element to be added to the binary tree</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance
            </summary>
            <param name="Elements">Range of element to be added to the binary tree</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(CoreLib.Generic.IsLower{`0},`0)">
            <summary>
            Creates a new instance
            </summary>
            <param name="Comparator">Delegate method used for value comparison</param>
            <param name="Element">First element to be added to the binary tree</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(CoreLib.Generic.IsLower{`0},`0[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="Comparator">Delegate method used for value comparison</param>
            <param name="Elements">Range of element to be added to the binary tree</param>
        </member>
        <member name="M:CoreLib.Generic.Tree`1.#ctor(CoreLib.Generic.IsLower{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance
            </summary>
            <param name="Comparator">Delegate method used for value comparison</param>
            <param name="Elements">Range of element to be added to the binary tree</param>
        </member>
        <member name="P:CoreLib.Generic.Tree`1.DefaultComparator">
            <summary>
            Default node comparison method
            </summary>
        </member>
        <member name="P:CoreLib.Generic.Tree`1.Comparator">
            <summary>
            Current node comparison method
            </summary>
        </member>
        <member name="P:CoreLib.Generic.Tree`1.Raw">
            <summary>
            The tree root node
            </summary>
        </member>
        <member name="P:CoreLib.Generic.Tree`1.Count">
            <summary>
            Counts recursively all nodes in the current tree
            </summary>
        </member>
        <member name="T:CoreLib.Generic.TreeNode`1">
            <summary>
            Represents a two-dimensional generic binary tree node
            </summary>
            <typeparam name="T">Generic type T</typeparam>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.Contains(`0)">
            <summary>
            Returns, whether the node contains the given node value
            </summary>
            <param name="element">Node value</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.AddElement(`0)">
            <summary>
            Adds a new node value to the node
            </summary>
            <param name="element">Node value</param>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.RemoveElement(`0)">
            <summary>
            Removes the given node value from the node and returns whether it has been removed
            </summary>
            <param name="element">Node value</param>
            <returns>Removal ooperation result</returns>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.Occurences(`0)">
            <summary>
            Counts the number of coocurences of the given node value and returns the counting result
            </summary>
            <param name="element">Node value</param>
            <returns>Number of occurences</returns>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.ToArray">
            <summary>
            Converts the node into a generic array and returns the conversion result
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.Clear">
            <summary>
            Clears all nodes
            </summary>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Generic.TreeNode`1.#ctor(`0)">
            <summary>
            Creates a new instance
            </summary>
            <param name="value">First element to be added to the binary node</param>
        </member>
        <member name="P:CoreLib.Generic.TreeNode`1.Value">
            <summary>
            Binary tree node value
            </summary>
        </member>
        <member name="P:CoreLib.Generic.TreeNode`1.Comp">
            <summary>
            Node comparison delegate method
            </summary>
        </member>
        <member name="P:CoreLib.Generic.TreeNode`1.Left">
            <summary>
            Left tree node
            </summary>
        </member>
        <member name="P:CoreLib.Generic.TreeNode`1.Right">
            <summary>
            Right tree node
            </summary>
        </member>
        <member name="P:CoreLib.Generic.TreeNode`1.Count">
            <summary>
            Counts recursively all nodes in the current node
            </summary>
        </member>
        <member name="T:CoreLib.Generic.Mutex`1">
            <summary>
            A generic mutal exclusion class
            </summary>
            <typeparam name="T">Generic type T</typeparam>
        </member>
        <member name="M:CoreLib.Generic.Mutex`1.Free">
            <summary>
            Frees the mutex and returns its locked object instance or the default type value
            </summary>
            <returns>Locked object instance or the default type value</returns>
        </member>
        <member name="M:CoreLib.Generic.Mutex`1.Lock(`0)">
            <summary>
            Locks the given object instance
            </summary>
            <param name="value">Object instance</param>
            <exception cref="T:System.InvalidOperationException">Thrown, if the mutex is already locked</exception>
        </member>
        <member name="M:CoreLib.Generic.Mutex`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Generic.Mutex`1.#ctor(`0)">
            <summary>
            Creates a new instance and locks the given object instance
            </summary>
            <param name="value">Object instance</param>
        </member>
        <member name="P:CoreLib.Generic.Mutex`1.IsLocked">
            <summary>
            Returns whether the current mutex instance is locked
            </summary>
        </member>
        <member name="P:CoreLib.Generic.Mutex`1.Value">
            <summary>
            Returns the current value
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown, if the mutex is not locked</exception>
        </member>
        <member name="T:CoreLib.Generic.nDimensionalTree`1">
            <summary>
            Represents a n-dimensional generic tree
            </summary>
            <typeparam name="T">Generic type T</typeparam>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Clear">
            <summary>
            Clears all tree nodes
            </summary>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Add(CoreLib.Generic.nDimensionalNode{`0})">
            <summary>
            Adds a new node to the tree
            </summary>
            <param name="node">Tree node</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Add(CoreLib.Generic.nDimensionalNode{`0}[])">
            <summary>
            Adds a new range of nodes to the tree
            </summary>
            <param name="nodes">Array of nodes</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Add(System.Collections.Generic.IEnumerable{CoreLib.Generic.nDimensionalNode{`0}})">
            <summary>
            Adds a new range of nodes to the tree
            </summary>
            <param name="nodes">Range of nodes</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Remove(CoreLib.Generic.nDimensionalNode{`0})">
            <summary>
            Removes a node from the tree and returns whether it has been removed
            </summary>
            <param name="node">Node to be removed</param>
            <returns>Removal result</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Remove(CoreLib.Generic.nDimensionalNode{`0}[])">
            <summary>
            Removes multiple nodes from the tree and returns whether they have been removed
            </summary>
            <param name="nodes">Nodes to be removed</param>
            <returns>Removal result</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Remove(System.Collections.Generic.IEnumerable{CoreLib.Generic.nDimensionalNode{`0}})">
            <summary>
            Removes multiple nodes from the tree and returns whether they have been removed
            </summary>
            <param name="nodes">Nodes to be removed</param>
            <returns>Removal result</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Sort(System.Comparison{CoreLib.Generic.nDimensionalNode{`0}})">
            <summary>
            Sorts all tree nodes using a given generic comparison method
            </summary>
            <param name="comparison">Generic comparison method</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.Dispose">
            <summary>
            Disposes the tree and releases all underlying resources
            </summary>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalTree`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalTree`1.Root">
            <summary>
            The tree root node
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalTree`1.RecursiveCount">
            <summary>
            Counts recursively all nodes in the current tree
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalTree`1.TopLevelCount">
            <summary>
            Counts all nodes on the top level of the current tree
            </summary>
        </member>
        <member name="T:CoreLib.Generic.nDimensionalNode`1">
            <summary>
            Represents a n-dimensional generic tree node
            </summary>
            <typeparam name="T">Generic type T</typeparam>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Clear">
            <summary>
            Clears all sub-nodes
            </summary>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Add(`0)">
            <summary>
            Adds a new sub-node to the current node with the given value
            </summary>
            <param name="node">Value, which will be stored in the new sub-node</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Add(`0[])">
            <summary>
            Adds a new range of values to the current node, which will be stored in newly created sub-nodes
            </summary>
            <param name="node">Values, which will be stored the new sub-nodes</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a new range of values to the current node, which will be stored in newly created sub-nodes
            </summary>
            <param name="node">Values, which will be stored the new sub-nodes</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Add(CoreLib.Generic.nDimensionalNode{`0})">
            <summary>
            Adds a new sub-node to the current node
            </summary>
            <param name="node">Sub-node</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Add(CoreLib.Generic.nDimensionalNode{`0}[])">
            <summary>
            Adds a new range of sub-nodes to the current node
            </summary>
            <param name="nodes">Array of sub-nodes</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Add(System.Collections.Generic.IEnumerable{CoreLib.Generic.nDimensionalNode{`0}})">
            <summary>
            Adds a new range of sub-nodes to the current node
            </summary>
            <param name="nodes">Range of sub-nodes</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Remove(CoreLib.Generic.nDimensionalNode{`0})">
            <summary>
            Removes a sub-node from the current node and returns whether it has been removed
            </summary>
            <param name="node">Sub-node to be removed</param>
            <returns>Removal result</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Remove(CoreLib.Generic.nDimensionalNode{`0}[])">
            <summary>
            Removes multiple sub-nodes from the current node and returns whether they have been removed
            </summary>
            <param name="nodes">Sub-nodes to be removed</param>
            <returns>Removal result</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Remove(System.Collections.Generic.IEnumerable{CoreLib.Generic.nDimensionalNode{`0}})">
            <summary>
            Removes multiple sub-nodes from the current node and returns whether they have been removed
            </summary>
            <param name="nodes">Sub-nodes to be removed</param>
            <returns>Removal result</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Sort(System.Comparison{CoreLib.Generic.nDimensionalNode{`0}})">
            <summary>
            Sorts all sub-nodes using a given generic comparison method
            </summary>
            <param name="comparison">Generic comparison method</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.AllValues">
            <summary>
            Returns all values in this node and its sub-nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.AllNodes">
            <summary>
            Returns this node and its sub-nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.op_Implicit(CoreLib.Generic.nDimensionalNode{`0})~`0">
            <summary>
            Returns the value of the given node
            </summary>
            <param name="node">Node</param>
            <returns>Node value</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.op_Implicit(CoreLib.Generic.nDimensionalNode{`0})~`0[]">
            <summary>
            Returns all child node values of the given node
            </summary>
            <param name="node">Node</param>
            <returns>Array of child node values</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.op_Implicit(CoreLib.Generic.nDimensionalNode{`0})~CoreLib.Generic.nDimensionalNode{`0}[]">
            <summary>
            Returns all child nodes of the given node
            </summary>
            <param name="node">Node</param>
            <returns>Array of child nodes</returns>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.Dispose">
            <summary>
            Disposes the node and releases all underlying resources
            </summary>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.#ctor(`0)">
            <summary>
            Creates a new instance
            </summary>
            <param name="value">Node value</param>
        </member>
        <member name="M:CoreLib.Generic.nDimensionalNode`1.#ctor(`0,CoreLib.Generic.nDimensionalNode{`0})">
            <summary>
            Creates a new instance
            </summary>
            <param name="value">Node value</param>
            <param name="parent">Node parent</param>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalNode`1.Children">
            <summary>
            A list of sub-nodes
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalNode`1.Parent">
            <summary>
            The parent node
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalNode`1.Value">
            <summary>
            The node value
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalNode`1.Item(System.Int32)">
            <summary>
            Returns the sub-node at the given index
            </summary>
            <param name="index">Node index</param>
            <returns>The sub-node at the given index</returns>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalNode`1.RecursiveCount">
            <summary>
            Counts recursively all sub-nodes in the current node
            </summary>
        </member>
        <member name="P:CoreLib.Generic.nDimensionalNode`1.Count">
            <summary>
            Counts all top-level sub-nodes on the of the current node
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.Monitor">
            <summary>
            Contains basic monitor screen methods
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.Monitor.ChangeState(CoreLib.Hardware.MonitorState)">
            <summary>
            Changes the current monitor state to the given one
            </summary>
            <param name="state">New monitor state</param>
            <returns>HRESULT code</returns>
        </member>
        <member name="E:CoreLib.Hardware.Monitor.OnStateChanged">
            <summary>
            Fired, if the currerent monitor state changes
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.MonitorState">
            <summary>
            Represents the different possible states of a monitor screen
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.MonitorState.On">
            <summary>
            The monitor is turned on
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.MonitorState.Off">
            <summary>
            The monitor is turned off
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.MonitorState.StandBy">
            <summary>
            The monitor is in standby-mode
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.Turing.WordList">
            <summary>
            Represents a list containing valid turing words
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.Turing.Instruction">
            <summary>
            Represents an instruction for the turing machine
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.Instruction.SIZE">
            <summary>
            The size of the `CoreLib::Hardware::Turing::Instruction`-structure in bytes
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.Turing.Instruction.GetBytes">
            <summary>
            Returns the raw byte array representing the current instruction instance
            </summary>
            <returns>Raw byte array</returns>
        </member>
        <member name="M:CoreLib.Hardware.Turing.Instruction.FromBytes(System.Byte[])">
            <summary>
            Returns an instruction instance represented by the given raw byte array
            </summary>
            <param name="arr">Raw byte array</param>
            <returns>Instruction instance</returns>
        </member>
        <member name="P:CoreLib.Hardware.Turing.Instruction.BinaryFlags">
            <summary>
            Sets or gets the binary instruction flags
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.Turing.Instruction.Flags">
            <summary>
            Sets or gets the instruction flags
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.Turing.Instruction.InputWord">
            <summary>
            Sets or gets the input word (zero matches the blank-character)
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.Turing.Instruction.OutputWord">
            <summary>
            Sets or gets the output word (zero matches the blank-character)
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.Turing.Instruction.InputState">
            <summary>
            Sets or gets the input state
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.Turing.Instruction.OutputState">
            <summary>
            Sets or gets the output state
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.Turing.InstructionFlags">
            <summary>
            An enumeration of possible Turing instruction flags
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.Read">
            <summary>
            Reads the current word from the Turing storage into the cache
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.Write">
            <summary>
            Writes the cached word onto the Turing storage
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.Erase">
            <summary>
            Erases the current word from the Turing storage
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.__RESERVED10">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.MoveLeft">
            <summary>
            Moves the Turing machine's head by one field to the left
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.MoveRight">
            <summary>
            Moves the Turing machine's head by one field to the right
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.__RESERVED02">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.Turing.InstructionFlags.__RESERVED01">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CoreLib.Hardware.U6Processor.HardwareInterface.U6ASMScreenForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.HardwareInterface.U6ASMScreenForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.HardwareInterface.U6ASMScreenForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.U6Processor.U6ASMCompiler">
            <summary>
            Contains all U6ASM compiler functions
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompiler.Compile(System.String,CoreLib.Hardware.U6Processor.U6ASMCompilerError[]@,CoreLib.Hardware.U6Processor.U6ASMCompilerOptions@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Compiles the given U6ASM plain code to U6ASM bytecode
            </summary>
            <param name="code">U6ASM plain code</param>
            <param name="errors">U6ASM compiler errors [out]</param>
            <param name="options">U6ASM compiler options [out]</param>
            <returns>U6ASM bytecode</returns>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompiler.Compile(System.String,CoreLib.Hardware.U6Processor.U6ASMCompilerError[]@,CoreLib.Hardware.U6Processor.U6ASMCompilerOptions@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Reflection.Assembly[])">
            <summary>
            Compiles the given U6ASM plain code to U6ASM bytecode
            </summary>
            <param name="code">U6ASM plain code</param>
            <param name="errors">U6ASM compiler errors [out]</param>
            <param name="options">U6ASM compiler options [out]</param>
            <param name="assemblies">Referenced assemblies</param>
            <returns>U6ASM bytecode</returns>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompiler.Decompile(System.String)">
            <summary>
            Decompiles U6ASM bytecode to U6ASM plain code
            </summary>
            <param name="bytecode">U6ASM bytecode</param>
            <returns>U6ASM plain code</returns>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompiler.Decompile(System.String,System.Reflection.Assembly[])">
            <summary>
            Decompiles U6ASM bytecode to U6ASM plain code
            </summary>
            <param name="bytecode">U6ASM bytecode</param>
            <param name="assemblies">Referenced assemblies</param>
            <returns>U6ASM plain code</returns>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompiler.U6ASMtoCS(System.String,CoreLib.Hardware.U6Processor.U6ASMCompilerOptions)">
            <summary>
            Compiles U6ASM bytecode to C# code
            </summary>
            <param name="bytecode">U6ASM bytecode</param>
            <param name="options">U6ASM compiler options</param>
            <returns>C# code</returns>
        </member>
        <member name="T:CoreLib.Hardware.U6Processor.U6ASMCompilerException">
            <summary>
            A U6ASM compiler exception
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompilerException.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompilerException.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="msg">Exception message</param>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompilerException.#ctor(System.Exception)">
            <summary>
            Creates a new instance
            </summary>
            <param name="ex">Base exception</param>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompilerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance
            </summary>
            <param name="msg">Exception message</param>
            <param name="ex">Base exception</param>
        </member>
        <member name="T:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions">
            <summary>
            Represents a collection of U6ASM compiler options
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.initSTACKValues">
            <summary>
            Initial string stack values
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.initREGValues">
            <summary>
            Initial register values
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.initRAMValues">
            <summary>
            Initial memory values
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.ReferencedAssemblies">
            <summary>
            A list of referenced (mangaged) assemblies
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.PInvokeAssemblies">
            <summary>
            A list of unmanaged (native) assemblies
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.WIN32Description">
            <summary>
            The description string of the target Win32-application
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.WIN32Copyright">
            <summary>
            The copyright string of the target Win32-application
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.WIN32Author">
            <summary>
            The author name of the target Win32-application
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.WIN32Name">
            <summary>
            The name of the target Win32-application
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.WIN32Icon">
            <summary>
            The icon path of the target Win32-application
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.IDs">
            <summary>
            A list of hardware IDs, which are required by the target application
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.REGSize">
            <summary>
            The target emulated register size
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerOptions.RAMSize">
            <summary>
            The target emulated memory size
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.U6Processor.U6ASMCompilerError">
            <summary>
            Represents an error or warning, which can be issued by the U6ASM compiler
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.U6Processor.U6ASMCompilerError.GetHashCode">
            <summary>
            Returns the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerError.Line">
            <summary>
            Error/Warning line
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerError.Warning">
            <summary>
            A value which determins whether the current instance is an error or a warning.
            <para/>
            false := error
            <para/>
            true := warning
            </summary>
        </member>
        <member name="P:CoreLib.Hardware.U6Processor.U6ASMCompilerError.Message">
            <summary>
            Error/Warning message
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.U6Processor.PreprocessorLineState">
            <summary>
            An enumeration of possible current preprocessor line states
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.U6preASM">
            <summary>
            [Obsolete] U6ASM-Precompiler
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.U6BinaryFormat">
            <summary>
            Provides functions for the U6BF (U6. Binary Format)
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.ToBinaryString(System.Object[])">
            <summary>
            Creates a U6BF-string from the given values
            </summary>
            <param name="values">Values to be converted</param>
            <returns>U6BF-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.FromBinaryString(System.String)">
            <summary>
            Returns a list of objects based on the given U6BF-string
            </summary>
            <param name="str">U6BF-string</param>
            <returns>List of objects</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.GetBinaryObjectValues(System.String)">
            <summary>
            Returns an array of objects based on the given U6BF-string
            </summary>
            <param name="str">U6BF-string</param>
            <returns>Array of objects</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.GetBinaryObjectTypes(System.String)">
            <summary>
            Returns an array of the types, which are representing the object values based on the given U6BF-string
            </summary>
            <param name="str">U6BF-string</param>
            <returns>Array of the types</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.GetBinaryObjectSizes(System.String)">
            <summary>
            Returns an array of the sizes of object values based on the given U6BF-string
            </summary>
            <param name="str">U6BF-string</param>
            <returns>Array of the sizes</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.ToBinaryString``1(``0)">
            <summary>
            Returns a U6BF-string based on the given generic value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="value">Object value of the type T</param>
            <returns>U6BF-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6BinaryFormat.ToBinaryString(System.Object)">
            <summary>
            Returns a U6BF-string based on the given object value
            </summary>
            <param name="value">Object value</param>
            <returns>U6BF-string</returns>
        </member>
        <member name="T:CoreLib.Conversion.U6BinaryType">
            <summary>
            Possible U6BF object types and their CLR-mapping
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.bool">
            <summary>
            Represents U6BF::bool and System.Boolean
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.byte">
            <summary>
            Represents U6BF::byte and System.Byte
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.sbyte">
            <summary>
            Represents U6BF::sbyte and System.SByte
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.short">
            <summary>
            Represents U6BF::short and System.Int16
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.ushort">
            <summary>
            Represents U6BF::ushort and System.UInt16
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.char">
            <summary>
            Represents U6BF::char and System.Character
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.int">
            <summary>
            Represents U6BF::int and System.Int32
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.uint">
            <summary>
            Represents U6BF::uint and System.UInt32
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.long">
            <summary>
            Represents U6BF::long and System.Int64
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.ulong">
            <summary>
            Represents U6BF::ulong and System.UInt64
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.string">
            <summary>
            Represents U6BF::string and System.String
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.float">
            <summary>
            Represents U6BF::float and System.Single
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.double">
            <summary>
            Represents U6BF::double and System.Double
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.decimal">
            <summary>
            Represents U6BF::decimal and System.Decimal
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6BinaryType.int_arr">
            <summary>
            Represents U6BF::int[] and System.Int32[]
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.U6ObjectNotation">
            <summary>
            Contains all basic U6ObjectNotation-functions
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6ObjectNotation.GetU6ON(System.String)">
            <summary>
            Converts a XML-string to a U6ON-string
            </summary>
            <param name="xml">XML-string</param>
            <returns>U6ON-string</returns>
        </member>
        <member name="T:CoreLib.Conversion.U6ONDocument">
            <summary>
            U6ObjectNotation-document
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6ONDocument.GetString(System.Int32)">
            <summary>
            Returns the U6ON-string, which represents the current document
            </summary>
            <param name="tab">Optional indentation offset</param>
            <returns>U6ON-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONDocument.GetXML">
            <summary>
            Returns the XML-document represented by this U6ON-document
            </summary>
            <returns>XML-document</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONDocument.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6ONDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Creates a new instance based on a given XML-document
            </summary>
            <param name="doc">XML-document</param>
        </member>
        <member name="M:CoreLib.Conversion.U6ONDocument.op_Implicit(System.Xml.XmlDocument)~CoreLib.Conversion.U6ONDocument">
            <summary>
            Converts the XML-document to a U6ON-document
            </summary>
            <param name="x">XML-document</param>
            <returns>U6ON-document</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONDocument.op_Implicit(CoreLib.Conversion.U6ONDocument)~System.Xml.XmlDocument">
            <summary>
            Converts the U6ON-document to a XML-document
            </summary>
            <param name="u">U6ON-document</param>
            <returns>XML-document</returns>
        </member>
        <member name="P:CoreLib.Conversion.U6ONDocument.Name">
            <summary>
            U6ON Document name
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONDocument.Value">
            <summary>
            U6ON Document value
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONDocument.Children">
            <summary>
            U6ON Document chlid nodes
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONDocument.Attributes">
            <summary>
            U6ON Document attributes
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.U6ONNode">
            <summary>
            U6ObjectNotation-document node
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6ONNode.GetXML">
            <summary>
            Returns the XML-node represented by this U6ON-node
            </summary>
            <returns>XML-node</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONNode.GetString(System.Int32)">
            <summary>
            Returns the U6ON-string, which represents the current node
            </summary>
            <param name="tab">Optional indentation offset</param>
            <returns>U6ON-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONNode.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6ONNode.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new instance based on a given XML-node
            </summary>
            <param name="xml">XML-node</param>
        </member>
        <member name="M:CoreLib.Conversion.U6ONNode.op_Implicit(System.Xml.XmlNode)~CoreLib.Conversion.U6ONNode">
            <summary>
            Converts the XML-node to a U6ON-node
            </summary>
            <param name="x">XML-node</param>
            <returns>U6ON-node</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONNode.op_Implicit(CoreLib.Conversion.U6ONNode)~System.Xml.XmlNode">
            <summary>
            Converts the U6ON-node to a XML-node
            </summary>
            <param name="u">U6ON-node</param>
            <returns>XML-node</returns>
        </member>
        <member name="P:CoreLib.Conversion.U6ONNode.Name">
            <summary>
            U6ON Node name
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONNode.Value">
            <summary>
            U6ON Node value
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONNode.Type">
            <summary>
            U6ON Node type
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONNode.Children">
            <summary>
            U6ON Node children
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONNode.Attributes">
            <summary>
            U6ON Node attributes
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.U6ONAttribute">
            <summary>
            U6ObjectNotation-node attribute
            </summary>
        </member>
        <member name="M:CoreLib.Conversion.U6ONAttribute.GetString">
            <summary>
            Returns the U6ON-string, which represents the current attribute
            </summary>
            <returns>U6ON-string</returns>
        </member>
        <member name="M:CoreLib.Conversion.U6ONAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="name">Attribute name</param>
            <param name="value">Attribute value</param>
            <param name="prefix">Attribute prefix</param>
        </member>
        <member name="M:CoreLib.Conversion.U6ONAttribute.#ctor(System.Xml.XmlAttribute)">
            <summary>
            Creates a new instance based on a given XML-attribute
            </summary>
            <param name="attr">XML-attribute</param>
        </member>
        <member name="P:CoreLib.Conversion.U6ONAttribute.Name">
            <summary>
            U6ON Attribute name
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONAttribute.Value">
            <summary>
            U6ON Attribute value
            </summary>
        </member>
        <member name="P:CoreLib.Conversion.U6ONAttribute.Prefix">
            <summary>
            U6ON Attribute prefix
            </summary>
        </member>
        <member name="T:CoreLib.Conversion.U6ONNodeType">
            <summary>
            U6ObjectNotation-node type
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.None">
            <summary>
            No defined type
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.Element">
            <summary>
            Element node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.CDATA">
            <summary>
            Escape node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.Entity">
            <summary>
            Entity node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.EntityReference">
            <summary>
            Entity reference node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.Declaration">
            <summary>
            Declaration node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.ProcessingInstruction">
            <summary>
            Progressing instruction node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.Comment">
            <summary>
            Comment node
            </summary>
        </member>
        <member name="F:CoreLib.Conversion.U6ONNodeType.Notation">
            <summary>
            Notation node
            </summary>
        </member>
        <member name="T:CoreLib.common">
            <summary>
            Common object functions
            </summary>
        </member>
        <member name="M:CoreLib.common.VAR_DUMP_ANSI(System.Object,System.Int32)">
            <summary>
            Dumpes an object as ANSI string
            </summary>
            <param name="obj">Object to be dumped</param>
            <param name="depth">Dumping depth</param>
            <returns>ANSI string</returns>
        </member>
        <member name="M:CoreLib.common.VAR_DUMP_UTF8(System.Object,System.Int32)">
            <summary>
            Dumpes an object as UTF-8 string
            </summary>
            <param name="obj">Object to be dumped</param>
            <param name="depth">Dumping depth</param>
            <returns>UTF-8 string</returns>
        </member>
        <member name="M:CoreLib.common.VAR_DUMP(System.Int32*,System.Int32,System.Int32)">
            <summary>
            Dumpes a pinned unmanaged object as WIN-RE string
            </summary>
            <param name="gcptr">Object pointer</param>
            <param name="size">Object size</param>
            <param name="depth">Dumping depth</param>
            <returns>WIN-RE string</returns>
        </member>
        <member name="M:CoreLib.common.var_dump(System.Object,System.Boolean,System.Int32)">
            <summary>
            Dumpes an object as ANSI or UTF-8 string
            </summary>
            <param name="obj">Object to be dumped</param>
            <param name="utf8">true if the string should be returned as UTF-8 format or false, if it should be a ANSI string</param>
            <param name="depth">Dumping depth</param>
            <returns>ANSI or UTF-8 string</returns>
        </member>
        <member name="T:CoreLib.de">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.de.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.de.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Abbrechen ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Passwort: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Bitte geben ihr Windows Passwort ein, um die aktuelle Aktion zu bestätigen. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Fehler ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;OK ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Passwort Überprüfung ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Das Passwort ist ungültig. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.de.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die DE ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.en">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.en.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.en.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Cancel ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Password: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Please enter your Windows password to confirm the current operation ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Error ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;OK ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Password checker ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The password is invalid. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.en.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die EN ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.Hardware.Memory">
            <summary>
            Manages all memory-concerning functions
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.Memory.MinimizeFootprint">
            <summary>
            Minimizes the current process' footprint
            </summary>
        </member>
        <member name="M:CoreLib.Hardware.Memory.LimitMemory(System.UInt32)">
            <summary>
            Limits the current process' maximum memory size to the given size
            </summary>
            <param name="MaxMemorySize">New maximum memory size</param>
        </member>
        <member name="M:CoreLib.Hardware.Memory.ScanMemory(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:CoreLib.Win32">
            <summary>
            A class which contains (nearly) all unmanaged P/Invoke calls and signatures
            </summary>
        </member>
        <member name="F:CoreLib.Win32.magnification">
            <summary>
            A module constant, pointing to the library "magnification.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.audioses">
            <summary>
            A module constant, pointing to the library "audioses.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.comctl32">
            <summary>
            A module constant, pointing to the library "comctl32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.advapi32">
            <summary>
            A module constant, pointing to the library "advapi32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.kernel32">
            <summary>
            A module constant, pointing to the library "kernel32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.gdiplus">
            <summary>
            A module constant, pointing to the library "gdiplus.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.shlwapi">
            <summary>
            A module constant, pointing to the library "shlwapi.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.dbghelp">
            <summary>
            A module constant, pointing to the library "dbghelp.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.shell32">
            <summary>
            A module constant, pointing to the library "shell32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.user32">
            <summary>
            A module constant, pointing to the library "user32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.dwmapi">
            <summary>
            A module constant, pointing to the library "dwmapi.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.msvcrt">
            <summary>
            A module constant, pointing to the library "msvcrt.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.core">
            <summary>
            A module constant, pointing to the library "coredll.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.imm32">
            <summary>
            A module constant, pointing to the library "imm32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.gdi32">
            <summary>
            A module constant, pointing to the library "gdi32.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.winmm">
            <summary>
            A module constant, pointing to the library "winmm.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.psapi">
            <summary>
            A module constant, pointing to the library "psapi.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.mpr">
            <summary>
            A module constant, pointing to the library "mpr.dll"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.uclibtaglibimpl">
            <summary>
            A module constant, pointing to the library "uclib-tgli.so"
            </summary>
        </member>
        <member name="F:CoreLib.Win32.uclibhwext">
            <summary>
            A module constant, pointing to the library "uclib.hwext.dll"
            </summary>
        </member>
        <member name="T:CoreLib.IWIN32WINDOWCONVERTER">
            <summary>
            Represents an interface and converter between an unmanaged window handle and the COM-IWin32Window interface
            </summary>
        </member>
        <member name="T:CoreLib.PEHeader">
            <summary>
            Represents the Header of a PE/COFF/MSDOS executable file
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.SubsystemStrings">
            <summary>
            A list of string representations of MS-DOS subsystems
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.MachineStrings">
            <summary>
            A list of string representations of machines
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.dosHeader">
            <summary>
            The DOS header
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.fileHeader">
            <summary>
            The file header
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.optionalHeader32">
            <summary>
            Optional 32 bit file header 
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.optionalHeader64">
            <summary>
            Optional 64 bit file header 
            </summary>
        </member>
        <member name="F:CoreLib.PEHeader.imageSectionHeaders">
            <summary>
            Image Section headers. Number of sections is in the file header.
            </summary>
        </member>
        <member name="M:CoreLib.PEHeader.#ctor(System.String)">
            <summary>
            Returns the PE-header stored in the given file
            </summary>
            <param name="file">File path</param>
        </member>
        <member name="M:CoreLib.PEHeader.GetCallingAssmblyHeader">
            <summary>
            Returns the header of the .NET assembly that called this function
            </summary>
            <returns>PE Header</returns>
        </member>
        <member name="M:CoreLib.PEHeader.GetAssemblyHeader(System.Reflection.Assembly)">
            <summary>
            Returns the header of the given .NET assembly
            </summary>
            <param name="assembly">.NET assembly</param>
            <returns>PE Header</returns>
        </member>
        <member name="M:CoreLib.PEHeader.GetAssemblyHeader">
            <summary>
            Gets the header of the .NET assembly that called this function
            </summary>
            <returns>PE Header</returns>
        </member>
        <member name="M:CoreLib.PEHeader.FromBinaryReader``1(System.IO.BinaryReader)">
            <summary>
            Reads in a block from a file and converts it to the struct type specified by the template parameter
            </summary>
            <typeparam name="T">Generic Type T</typeparam>
            <param name="reader">Binary reader</param>
            <returns>Instance of T</returns>
        </member>
        <member name="P:CoreLib.PEHeader.Is32BitHeader">
            <summary>
            Returns, whether the file header is a 32-Bit one
            </summary>
        </member>
        <member name="P:CoreLib.PEHeader.FileHeader">
            <summary>
            Returns the file header
            </summary>
        </member>
        <member name="P:CoreLib.PEHeader.OptionalHeader32">
            <summary>
            Returns the optional 32-Bit header
            </summary>
        </member>
        <member name="P:CoreLib.PEHeader.OptionalHeader64">
            <summary>
            Returns the optional 64-Bit header
            </summary>
        </member>
        <member name="P:CoreLib.PEHeader.ImageSectionHeaders">
            <summary>
            Returns a list of image section headers
            </summary>
        </member>
        <member name="P:CoreLib.PEHeader.TimeStamp">
            <summary>
            Gets the timestamp from the file header
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeReg">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeDsect">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeNoLoad">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeGroup">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeNoPadded">
            <summary>
            The section should not be padded to the next boundary. This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES. This is valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeCopy">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.ContentCode">
            <summary>
            The section contains executable code.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.ContentInitializedData">
            <summary>
            The section contains initialized data.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.ContentUninitializedData">
            <summary>
            The section contains uninitialized data.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.LinkOther">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.LinkInfo">
            <summary>
            The section contains comments or other information. The .drectve section has this type. This is valid for object files only.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.TypeOver">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.LinkRemove">
            <summary>
            The section will not become part of the image. This is valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.LinkComDat">
            <summary>
            The section contains COMDAT data. For more information, see section 5.5.6, COMDAT Sections (Object Only). This is valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.NoDeferSpecExceptions">
            <summary>
            Reset speculative exceptions handling bits in the TLB entries for this section.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.RelativeGP">
            <summary>
            The section contains data referenced through the global pointer (GP).
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemPurgeable">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Memory16Bit">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryLocked">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryPreload">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align1Bytes">
            <summary>
            Align data on a 1-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align2Bytes">
            <summary>
            Align data on a 2-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align4Bytes">
            <summary>
            Align data on a 4-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align8Bytes">
            <summary>
            Align data on an 8-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align16Bytes">
            <summary>
            Align data on a 16-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align32Bytes">
            <summary>
            Align data on a 32-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align64Bytes">
            <summary>
            Align data on a 64-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align128Bytes">
            <summary>
            Align data on a 128-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align256Bytes">
            <summary>
            Align data on a 256-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align512Bytes">
            <summary>
            Align data on a 512-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align1024Bytes">
            <summary>
            Align data on a 1024-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align2048Bytes">
            <summary>
            Align data on a 2048-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align4096Bytes">
            <summary>
            Align data on a 4096-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.Align8192Bytes">
            <summary>
            Align data on an 8192-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.LinkExtendedRelocationOverflow">
            <summary>
            The section contains extended relocations.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryDiscardable">
            <summary>
            The section can be discarded as needed.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryNotCached">
            <summary>
            The section cannot be cached.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryNotPaged">
            <summary>
            The section is not pageable.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryShared">
            <summary>
            The section can be shared in memory.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryExecute">
            <summary>
            The section can be executed as code.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryRead">
            <summary>
            The section can be read.
            </summary>
        </member>
        <member name="F:CoreLib.DataSectionFlags.MemoryWrite">
            <summary>
            The section can be written to.
            </summary>
        </member>
        <member name="T:CoreLib.Live.Finances.StockExchange">
            <summary>
            A class, which manages current stock exchange prices in real-time
            </summary>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.UpdateStockMetalPrices">
            <summary>
            Forces the API to update the stock exchange metal prices
            </summary>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.UpdateExchangeRates">
            <summary>
            Forces the API to update the currency exchange rates
            </summary>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.GetStockPrice(CoreLib.Live.Finances.StockMetal)">
            <summary>
            Returns the given resource's current stock exchange price (in EUR per gr.)
            </summary>
            <param name="resource">Resource</param>
            <returns>Current resource price</returns>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.GetStockPrice(CoreLib.Live.Finances.StockMetal,CoreLib.Live.Finances.Currency)">
            <summary>
            Returns the given resource's current stock exchange price in the given curreny (per gr.)
            </summary>
            <param name="resource">Resource</param>
            <param name="currency">Currency</param>
            <returns>Current resource price</returns>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.ConvertCurrencies(CoreLib.Live.Finances.Currency,CoreLib.Live.Finances.Currency)">
            <summary>
            Converts 1.0¤ of the input currency into the output currency and returns the corresponding value
            </summary>
            <param name="in">Input currency</param>
            <param name="out">Output currency</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:CoreLib.Live.Finances.StockExchange.ConvertCurrencies(System.Double,CoreLib.Live.Finances.Currency,CoreLib.Live.Finances.Currency)">
            <summary>
            Converts the given value of the input currency into the output currency and returns the corresponding value
            </summary>
            <param name="value">Input value</param>
            <param name="in">Input currency</param>
            <param name="out">Output currency</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:CoreLib.Live.Finances.OANDAScript">
            <summary>
            A JavaScript helper class, which is injected into the stock exchange API via DOM
            </summary>
        </member>
        <member name="M:CoreLib.Live.Finances.OANDAScript.ExecSSCode">
            <summary>
            A method which forces the DOM parent to execute the server-side code
            </summary>
        </member>
        <member name="T:CoreLib.Live.Finances.Currency">
            <summary>
            An enumeration of stock exchange currencies
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.NDEF">
            <summary>
            NOT DEFINED, ¤. Represents no currency.
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.EUR">
            <summary>
            EURO, €. Represents the currency of the European Union
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.GBP">
            <summary>
            GREAT BRITISH POUND, £. Represents the currency of Great Britain
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.CHF">
            <summary>
            SWISS FRANC, SFr. Represents the currency of Switzerland
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.JPY">
            <summary>
            JAPANESE YEN, ¥. Represents the currency of Japan
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.CNY">
            <summary>
            CHINESE YUAN, ¥. Represents the currency of China
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.RUB">
            <summary>
            RUSSIAN RUBLE, ₽. Represents the currency of the Russian Federation
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.AUD">
            <summary>
            AUSTRAILIAN DOLLAR, $. Represents the currency of Australia
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.CAD">
            <summary>
            CANADIAN DOLLAR, $. Represents the currency of Canada
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.USD">
            <summary>
            UNITED STATES DOLLAR, $. Represents the currency of the United States of America
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.Currency.BTC">
            <summary>
            BITCOIN, ฿ or Ƀ. Represents the virtual currency of Bitcoins
            </summary>
        </member>
        <member name="T:CoreLib.Live.Finances.StockMetal">
            <summary>
            An enumeration of (precious) metals, whose prices can be retrieved from stock exchange APIs
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Iron">
            <summary>
            Represents the stock exchange resource `Iron`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Gold">
            <summary>
            Represents the stock exchange resource `Gold`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Silver">
            <summary>
            Represents the stock exchange resource `Silver`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Palladium">
            <summary>
            Represents the stock exchange resource `Palladium`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Platinum">
            <summary>
            Represents the stock exchange resource `Platinum`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Radium">
            <summary>
            Represents the stock exchange resource `Radium`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Titan">
            <summary>
            Represents the stock exchange resource `Titan`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Copper">
            <summary>
            Represents the stock exchange resource `Copper`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Rhodium">
            <summary>
            Represents the stock exchange resource `Rhodium`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Nickel">
            <summary>
            Represents the stock exchange resource `Nickel`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Aluminium">
            <summary>
            Represents the stock exchange resource `Aluminium`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Zinc">
            <summary>
            Represents the stock exchange resource `Zinc`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Lead">
            <summary>
            Represents the stock exchange resource `Lead`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Uranium">
            <summary>
            Represents the stock exchange resource `Uranium`
            </summary>
        </member>
        <member name="F:CoreLib.Live.Finances.StockMetal.Tin">
            <summary>
            Represents the stock exchange resource `Tin`
            </summary>
        </member>
        <member name="T:CoreLib.Management.ConsoleExtensions">
            <summary>
            Contains console extension methods and properties
            </summary>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.Wait(System.Action)">
            <summary>
            Pauses the console during the execution of the given asynchronious function
            </summary>
            <param name="del">Asynchronious function</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.Wait(System.Boolean*)">
            <summary>
            Pauses the console until the value of the given boolean-pointer is true
            </summary>
            <param name="ptr">Boolean pointer</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.SetFont(System.String)">
            <summary>
            Sets the console font to a given font family
            </summary>
            <param name="family">Name of the font family</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.AdvancedAnimatedWrite(System.String,System.Single)">
            <summary>
            Writes the given text using a character transision animation
            </summary>
            <param name="value">Text to be written</param>
            <param name="speed">Animation speed (0...1)</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.AdvancedAnimatedWriteLine(System.Single)">
            <summary>
            Writes a new line using a character transision animation
            </summary>
            <param name="speed">Animation speed (0...1)</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.AdvancedAnimatedWriteLine(System.String,System.Single)">
            <summary>
            Writes the given text and appends a new line using a character transision animation
            </summary>
            <param name="value">Text to be written</param>
            <param name="speed">Animation speed (0...1)</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.HexDump(System.Byte[])">
            <summary>
            Dumps the given byte array as hexadecimal text viewer
            </summary>
            <param name="value">BYte array to be dumped</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.HexDump(System.String)">
            <summary>
            Fetches the UTF16 byte array from the given string and dumps it as hexadecimal text viewer
            </summary>
            <param name="value">String to be dumped</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.HexDump(System.String,System.Text.Encoding)">
            <summary>
            Fetches the byte array from the given string unsing the given encoding and dumps it as hexadecimal text viewer
            </summary>
            <param name="value">String to be dumped</param>
            <param name="enc">String encoding</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.StreamDump(System.IO.Stream)">
            <summary>
            Fetches unread bytes from the given raw byte stream and dumps it as hexadecimal text viewer
            </summary>
            <param name="stream">Raw byte stream</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.StreamDump(System.Byte[])">
            <summary>
            Fetches unread bytes from the given byte stream and dumps it as hexadecimal text viewer
            </summary>
            <param name="stream">Byte stream</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.StreamDump(System.String)">
            <summary>
            Fetches unread bytes from the given string stream and dumps it as hexadecimal text viewer
            </summary>
            <param name="stream">String stream</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.StreamDump(System.String,System.Text.Encoding)">
            <summary>
            Fetches unread bytes from the given string stream and dumps it as hexadecimal text viewer using the given encoding
            </summary>
            <param name="stream">String stream</param>
            <param name="enc">String encoding</param>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleSession">
            <summary>
            Starts a cmd-session inside the current console and ends, when the user types the 'exit'-command
            </summary>
            <returns>The cmd exit code</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(CoreLib.Audio.Note)">
            <summary>
            Dumps a musical note visually
            </summary>
            <param name="note">Musical note</param>
            <returns>
            Point, wich represents the size of the drawn note
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(CoreLib.Audio.Note[])">
            <summary>
            Dumps an array of musical notes (= tune) visually
            </summary>
            <param name="tune">Musical notes</param>
            <returns>
            Point, wich represents the size of the drawn notes
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(System.Collections.Generic.List{CoreLib.Audio.Note})">
            <summary>
            Dumps a list of musical notes (= tune) visually
            </summary>
            <param name="tune">Musical notes</param>
            <returns>
            Point, wich represents the size of the drawn notes
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(System.Collections.Generic.IEnumerable{CoreLib.Audio.Note})">
            <summary>
            Dumps a range of musical notes (= tune) visually
            </summary>
            <param name="tune">Musical notes</param>
            <returns>
            Point, wich represents the size of the drawn notes
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(CoreLib.Audio.Note,CoreLib.Audio.NoteConversionMode)">
            <summary>
            Dumps a musical note converted by the given conversion mode visually
            </summary>
            <param name="note">Musical note</param>
            <param name="conv">Preferred note conversion mode</param>
            <returns>
            Point, wich represents the size of the drawn note
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(CoreLib.Audio.Note[],CoreLib.Audio.NoteConversionMode)">
            <summary>
            Dumps an array of musical notes (= tune) converted by the given conversion mode visually
            </summary>
            <param name="tune">Musical notes</param>
            <param name="conv">Preferred note conversion mode</param>
            <returns>
            Point, wich represents the size of the drawn notes
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(System.Collections.Generic.List{CoreLib.Audio.Note},CoreLib.Audio.NoteConversionMode)">
            <summary>
            Dumps a list of musical notes (= tune) converted by the given conversion mode visually
            </summary>
            <param name="tune">Musical notes</param>
            <param name="conv">Preferred note conversion mode</param>
            <returns>
            Point, wich represents the size of the drawn notes
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.MusicDump(System.Collections.Generic.IEnumerable{CoreLib.Audio.Note},CoreLib.Audio.NoteConversionMode)">
            <summary>
            Dumps a range of musical notes (= tune) converted by the given conversion mode visually
            </summary>
            <param name="tune">Musical notes</param>
            <param name="conv">Preferred note conversion mode</param>
            <returns>
            Point, wich represents the size of the drawn notes
            <para/>
            { X := width | Y := height }
            </returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleMessageBox(System.String)">
            <summary>
            Shows an ASCII console message box, displays the given message and returns the message box dialog result
            </summary>
            <param name="message">Message box content (message)</param>
            <returns>Message box dialog result</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleMessageBox(System.String,System.String)">
            <summary>
            Shows an ASCII console message box, displays the given message and title and returns the message box dialog result
            </summary>
            <param name="message">Message box content (message)</param>
            <param name="title">Message box title</param>
            <returns>Message box dialog result</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleMessageBox(System.String,System.String,CoreLib.Management.ConsoleDialogButtons)">
            <summary>
            Shows an ASCII console message box, displays the given message, title and buttons and returns the message box dialog result
            </summary>
            <param name="message">Message box content (message)</param>
            <param name="title">Message box title</param>
            <param name="buttons">Message box buttons</param>
            <returns>Message box dialog result</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleMessageBox(System.String,System.String,CoreLib.Management.ConsoleDialogButtons,CoreLib.Management.ConsoleDialogIcon)">
            <summary>
            Shows an ASCII console message box, displays the given message, title, buttons and icon and returns the message box dialog result
            </summary>
            <param name="message">Message box content (message)</param>
            <param name="title">Message box title</param>
            <param name="buttons">Message box buttons</param>
            <param name="icon">Message box icon</param>
            <returns>Message box dialog result</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleInputBox(System.String)">
            <summary>
            Shows an ASCII console input box, displays the given message and returns the entered value
            </summary>
            <param name="message">Input box message</param>
            <returns>Entered string value</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleInputBox(System.String,System.String)">
            <summary>
            Shows an ASCII console input box, displays the given message and title and returns the entered value
            </summary>
            <param name="message">Input box message</param>
            <param name="title">Input box title</param>
            <returns>Entered string value</returns>
        </member>
        <member name="M:CoreLib.Management.ConsoleExtensions.ConsoleInputBox(System.String,System.String,System.String)">
            <summary>
            Shows an ASCII console input box, displays the given message and title and returns the entered value or the given default value
            </summary>
            <param name="message">Input box message</param>
            <param name="title">Input box title</param>
            <param name="default">Default string value</param>
            <returns>Entered string value</returns>
        </member>
        <member name="P:CoreLib.Management.ConsoleExtensions.CursorPosition">
            <summary>
            Sets or gets the current console cursor position
            </summary>
        </member>
        <member name="P:CoreLib.Management.ConsoleExtensions.ConsoleColor">
            <summary>
            Sets or gets the current console color byte value
            </summary>
        </member>
        <member name="T:CoreLib.Management.ConsoleDialogButtons">
            <summary>
            An enumeration of possible console dialog buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.YesNo">
            <summary>
            Shows the YES and NO buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.YesNoCancel">
            <summary>
            Shows the YES, NO and CANCEL buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.OK">
            <summary>
            Shows the OK button
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.OKCancel">
            <summary>
            Shows the OK and CANCEL buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.AcceptDecline">
            <summary>
            Shows the ACCEPT and DECLINE buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.AcceptDeclineCancel">
            <summary>
            Shows the ACCEPT, DECLINE and CANCEL buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.Retry">
            <summary>
            Shows the RETRY button
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.RetryCancel">
            <summary>
            Shows the RETRY and CANCEL buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.RetryIgnore">
            <summary>
            Shows the RETRY and IGNORE buttons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogButtons.RetryIgnoreCancel">
            <summary>
            Shows the RETRY, IGNORE and CANCEL buttons
            </summary>
        </member>
        <member name="T:CoreLib.Management.ConsoleDialogIcon">
            <summary>
            An enumeration of possible console dialog icons
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogIcon.None">
            <summary>
            No icon
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogIcon.Question">
            <summary>
            A question icon
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogIcon.Information">
            <summary>
            An information icon
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogIcon.Exclamation">
            <summary>
            An exclamation icon
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogIcon.Error">
            <summary>
            An error icon
            </summary>
        </member>
        <member name="T:CoreLib.Management.ConsoleDialogResult">
            <summary>
            An enumeration of possible console dialog results
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.Yes">
            <summary>
            The YES button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.No">
            <summary>
            The NO button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.OK">
            <summary>
            The OK button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.Cancel">
            <summary>
            The CANCEL button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.Accept">
            <summary>
            The ACCEPT button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.Decline">
            <summary>
            The DECLINE button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.Retry">
            <summary>
            The RETRY button has been clicked
            </summary>
        </member>
        <member name="F:CoreLib.Management.ConsoleDialogResult.Ignore">
            <summary>
            The IGNORE button has been clicked
            </summary>
        </member>
        <member name="T:CoreLib.Management.Environment">
            <summary>
            Contains system environment methods
            </summary>
        </member>
        <member name="M:CoreLib.Management.Environment.IsVirtualHost">
            <summary>
            Returns, whether the current host is a virtual one or not
            </summary>
            <returns>true := virtual machine/host, false := regular machine/host</returns>
        </member>
        <member name="M:CoreLib.Management.Environment.Is64Bit(System.Diagnostics.Process)">
            <summary>
            Returns whether the given process is a 64-Bit process or not
            </summary>
            <param name="p">Process instance</param>
            <returns>Check result</returns>
        </member>
        <member name="E:CoreLib.Management.Environment.PowerModeChanged">
            <summary>
            Fired, if the current power mode changes
            </summary>
        </member>
        <member name="E:CoreLib.Management.Environment.SessionSwitch">
            <summary>
            Fired, if the user switches the current session or the current session swithes its state
            </summary>
        </member>
        <member name="E:CoreLib.Management.Environment.SessionEnding">
            <summary>
            Fired, if the user finishes the current session
            </summary>
        </member>
        <member name="T:CoreLib.Management.FileSystemExtensions">
            <summary>
            Contains basic extension methods for filesystem operations
            </summary>
        </member>
        <member name="F:CoreLib.Management.FileSystemExtensions.DOS_MSG_OFFSET">
            <summary>
            PE-DOS message file offset
            </summary>
        </member>
        <member name="F:CoreLib.Management.FileSystemExtensions.DOS_MSG_LENGTH">
            <summary>
            PE-DOS message length
            </summary>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.PreventDecompilation(System.String)">
            <summary>
            Changes the binary PE-header of the given file to prevent a .NET decompilation
            </summary>
            <param name="file">Path to PE-file</param>
            <exception cref="!:System.FileNotFoundException">Thrown when the given file could not be found</exception>
            <exception cref="T:System.ArgumentException"> Thrown when the file size is lower than 225 bytes</exception>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.IsRoot(System.IO.DirectoryInfo)">
            <summary>
            Returns whether the given directory is a root directory.
            </summary>
            <param name="di">Directory</param>
            <returns></returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.GetFileHash``1(System.String)">
            <summary>
            Generates the hashcode of the given file using a hash algorithm
            </summary>
            <typeparam name="T">Hash algorithm (must derice from class, IHashAlgorithm, IDisposable and new)</typeparam>
            <param name="file">File path</param>
            <returns>File hashcode as ASCII8-string</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.GetFileHashHex``1(System.String)">
            <summary>
            Generates the hexadecimal hashcode of the given file using a hash algorithm
            </summary>
            <typeparam name="T">Hash algorithm (must derice from class, IHashAlgorithm, IDisposable and new)</typeparam>
            <param name="file">File path</param>
            <returns>File hashcode as hexadecimal string</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.GetRelativePath(System.String,System.String)">
            <summary>
            Returns the relaitve path between two files (from the source to the target file)
            </summary>
            <param name="file">Source file</param>
            <param name="target">Target file</param>
            <returns>Relative path</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.StrFormatByteSize(System.Int64)">
            <summary>
            Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
            <param name="filesize">The numeric value to be converted</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.SavePEHashcode(System.String)">
            <summary>
            Stores the hashcode of the given PE/DOS file into its DOS header and returns the generated hascode
            </summary>
            <param name="file">PE/DOS file, which will be modified</param>
            <rereturns>The generated hashcode</rereturns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.DoesPEHashcodeMatch(System.String)">
            <summary>
            Reads the hashcode inside the DOS header of the given PE/DOS and compares it with its body.
            The returned value is a boolean value indicating whether the two hashcodes are matching
            </summary>
            <param name="file">PE/DOS file, which will be read</param>
            <returns>The hashcode comparison result</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.HasSubDirectory(System.String,System.String)">
            <summary>
            Returns whether the given parent directory has the given child directory as subdirectory
            </summary>
            <param name="parent">Parent directory</param>
            <param name="child">Child directory</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.HasSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Returns whether the given parent directory has the given child directory as subdirectory
            </summary>
            <param name="parent">Parent directory</param>
            <param name="child">Child directory</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.HasSubDirectory(System.String,System.IO.DirectoryInfo)">
            <summary>
            Returns whether the given parent directory has the given child directory as subdirectory
            </summary>
            <param name="parent">Parent directory</param>
            <param name="child">Child directory</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.HasSubDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Returns whether the given parent directory has the given child directory as subdirectory
            </summary>
            <param name="parent">Parent directory</param>
            <param name="child">Child directory</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Management.FileSystemExtensions.GetUNCPath(System.String)">
            <summary>
            Returns the UNC path of the given string
            <para/>
            <i>UNC stands for "Universal Naming Convention"</i>
            <para/>
            <see cref="!:https://en.wikipedia.org/wiki/Path_(computing)#Uniform_Naming_Convention">
            Click here for more information
            </see>
            </summary>
            <param name="path">Input path</param>
            <returns>UNC converted path</returns>
        </member>
        <member name="T:CoreLib.Management.Network.Internet">
            <summary>
            Manages all functions and methods concerning a internet connection
            </summary>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.Resolve(System.Net.IPAddress)">
            <summary>
            Resolves the given IP-address to an host name and returns it
            </summary>
            <param name="ipaddr">IP-address</param>
            <returns>Host name</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.Resolve(System.String)">
            <summary>
            Resolves the given host name to an IP-address and returns it
            </summary>
            <param name="hostname">Host name</param>
            <returns>IP-address</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.URLExists(System.Uri)">
            <summary>
            Returns, whether the given URI exists
            </summary>
            <param name="uri">URI</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.URLExists(System.String)">
            <summary>
            Returns, whether the given URL exists
            </summary>
            <param name="url">URL</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.GetISP">
            <summary>
            Returns the current ISP name (if existent)
            </summary>
            <returns>ISP name</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.GetLocation">
            <summary>
            Returns the current IP location (if found)
            </summary>
            <returns>IP location</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.GetHostName">
            <summary>
            Returns the current host name (if resolved)
            </summary>
            <returns>Current host name</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.Resolve">
            <summary>
            Resolves the current internet connection and returns the resolving result
            </summary>
            <returns>IP resolving result</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.GetExternalIP">
            <summary>
            Returns the current external IP address
            </summary>
            <returns>External IP address</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Internet.FetchDocument(System.String)">
            <summary>
            Returns the HTML document fetched at the given URL
            </summary>
            <param name="url">URL</param>
            <returns>HTML document</returns>
        </member>
        <member name="P:CoreLib.Management.Network.Internet.IsConnected">
            <summary>
            Returns, wether the current machine is connected to the internet
            </summary>
        </member>
        <member name="T:CoreLib.Management.Network.HEADClient">
            <summary>
            Represents a HEAD-client
            </summary>
        </member>
        <member name="M:CoreLib.Management.Network.HEADClient.GetWebRequest(System.Uri)">
            <summary>
            Performs the HEAD-request at the given URI and returns the underlying web request
            </summary>
            <param name="address">URI</param>
            <returns>Web request</returns>
        </member>
        <member name="P:CoreLib.Management.Network.HEADClient.HeadOnly">
            <summary>
            Returns, whether the request is an HEAD-only one
            </summary>
        </member>
        <member name="T:CoreLib.Management.Network.IPResolveResult">
            <summary>
            Represents an IP resolving result
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.IPResolveResult.IPAddress">
            <summary>
            The current IP address
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.IPResolveResult.IPLocation">
            <summary>
            The current IP location
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.IPResolveResult.Hostname">
            <summary>
            The current host name
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.IPResolveResult.ISP">
            <summary>
            The current ISP
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.IPResolveResult.IsUsingTor">
            <summary>
            Returns, wether the current connection is using tor
            </summary>
        </member>
        <member name="T:CoreLib.Management.Network.Network">
            <summary>
            Manages all functions concerning networking operations
            </summary>
        </member>
        <member name="M:CoreLib.Management.Network.Network.GetCurrentNetworkInterface">
            <summary>
            Returns the currently used network interface (if any)
            </summary>
            <returns>Currently used network interface</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Network.GetDevices">
            <summary>
            Returns a list of found network devices inside the current network
            </summary>
            <returns>List of network devices</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Network.GetDevices(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Returns a list of found network devices inside the network associated with the given network interface
            </summary>
            <param name="iface">Network interface</param>
            <returns>List of network devices</returns>
        </member>
        <member name="M:CoreLib.Management.Network.Network.GetNetworkMask(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Returns the IPv4 netmask of the network connected to the given network interface
            </summary>
            <param name="iface">Network interface</param>
            <returns>IPv4 Network mask</returns>
        </member>
        <member name="T:CoreLib.Management.Network.NetworkDevice">
            <summary>
            Represents a simple network device
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.NetworkDevice.IP">
            <summary>
            Returns the network device's IP address
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.NetworkDevice.MAC">
            <summary>
            Returns the network device's MAC address
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.NetworkDevice.Vendor">
            <summary>
            Returns the network device's vendor name
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.NetworkDevice.HostName">
            <summary>
            Returns the network device's host name
            </summary>
        </member>
        <member name="P:CoreLib.Management.Network.NetworkDevice.IsAlive">
            <summary>
            Returns, whether the network device is currently online (alive) or not
            </summary>
        </member>
        <member name="T:CoreLib.Math.Complex">
            <summary>
            Represents a complex number
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.Compare``1(CoreLib.Math.Complex)">
            <summary>
            Compares the current complex number to the given one and returns the comparison result
            </summary>
            <typeparam name="T">Generic comparer type</typeparam>
            <param name="other">Second complex number</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.Compare(CoreLib.Math.Complex,CoreLib.Math.IComplexComparer)">
            <summary>
            Compares the current complex number to the given one and returns the comparison result
            </summary>
            <param name="comparer">Comparer instance</param>
            <param name="other">Second complex number</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.Equals(System.Object)">
            <summary>
            Indicates whether <c>obj</c> is equal to this instance.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.Equals(CoreLib.Math.Complex)">
            <summary>
            Indicates whether <c>z</c> is equal to this instance.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.GetHashCode">
            <summary>
            Gets the hashcode of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.CompareTo(CoreLib.Math.Complex)">
            <summary>
            Compare this complex number with another complex number.
            </summary>
            <remarks>
            The complex number's modulus takes precedence over the argument.
            </remarks>
            <param name="other">The complex number to compare with.</param>
        </member>
        <member name="M:CoreLib.Math.Complex.ToString">
            <summary>
            Prints a readable string represenation of the complex number
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreLib.Math.Complex.ToString(System.Globalization.NumberFormatInfo)">
            <summary>
            Prints a readable string represenation of the complex number using the given number format
            </summary>
            <param name="numberFormat">Number format</param>
            <returns>String represenation</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.FromRealImaginary(System.Double,System.Double)">
            <summary>
            Creates a complex number from a given real and imaginary part
            </summary>
            <param name="r">Real part</param>
            <param name="i">Imaginary part</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.FromModulusArgument(System.Double,System.Double)">
            <summary>
            Creates a complex number from a given modulus and argument
            </summary>
            <param name="modulus">Modulus</param>
            <param name="argument">Argument</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.Compare``1(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Compares the two given complex numbers using the given comperator and returns the comparison result
            </summary>
            <typeparam name="T">Generic comparer type</typeparam>
            <param name="c1">First complex number</param>
            <param name="c2">Second complex number</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.Compare(CoreLib.Math.Complex,CoreLib.Math.Complex,CoreLib.Math.IComplexComparer)">
            <summary>
            Compares the two given complex numbers using the given comperator and returns the comparison result
            </summary>
            <param name="c1">First complex number</param>
            <param name="c2">Second complex number</param>
            <param name="comparer">Comparer instance</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.Complex.#cctor">
            <summary>
            Default static constructor
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new complex number
            </summary>
            <param name="r">Real part</param>
            <param name="i">Imaginary part</param>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Equality(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Inequality(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_UnaryPlus(CoreLib.Math.Complex)">
            <summary>
            Unary addition.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_UnaryNegation(CoreLib.Math.Complex)">
            <summary>
            Unary minus.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Addition(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Subtraction(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Addition(CoreLib.Math.Complex,System.Double)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Subtraction(CoreLib.Math.Complex,System.Double)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Addition(System.Double,CoreLib.Math.Complex)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Subtraction(System.Double,CoreLib.Math.Complex)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Multiply(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Multiply(System.Double,CoreLib.Math.Complex)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Multiply(CoreLib.Math.Complex,System.Double)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Division(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Division(System.Double,CoreLib.Math.Complex)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Division(CoreLib.Math.Complex,System.Double)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Complex.op_Implicit(System.Double)~CoreLib.Math.Complex">
            <summary>
            Implicit conversion of a re double to a re <c>Complex</c>.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.Zero">
            <summary>
            Represents the zero value. This field is constant.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.One">
            <summary>
            Represents the <c>1</c> value. This field is constant.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.I">
            <summary>
            Represents the imaginary unit number. This field is constant.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.NaN">
            <summary>
            Represents a value that is not a number. This field is constant.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.Infinity">
            <summary>
            Represents the infinity value. This field is constant.
            </summary>
            <remarks>
            The semantic associated to this value is a <c>Complex</c> of 
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative MathNet.PreciseNumerics and MathNet.Symbolics packages
            instead.
            </remarks>
        </member>
        <member name="P:CoreLib.Math.Complex.RealImaginaryComparer">
            <summary>
            Returns the `CoreLib::Math::RealImaginaryLexComparer`-instance
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.ModulusArgumentComparer">
            <summary>
            Returns the `CoreLib::Math::ModulusArgumentLexComparer`-instance
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.ArgumentModulusComparer">
            <summary>
            Returns the `CoreLib::Math::ArgumentModulusLexComparer`-instance
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.Real">
            <summary>
            Gets or sets the real part of this <c>Complex</c>.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.Imaginary">
            <summary>
            Gets or sets the imaginary part of this <c>Complex</c>.
            </summary>
            <seealso cref="F:CoreLib.Math.Complex.re"/>
        </member>
        <member name="P:CoreLib.Math.Complex.IsZero">
            <summary>
            Indicates whether the <c>Complex</c> is zero.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.IsOne">
            <summary>
            Indicates whether the <c>Complex</c> is one.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.IsI">
            <summary>
            Indicates whether the <c>Complex</c> is the imaginary unit.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.IsNaN">
            <summary>
            Indicates whether the provided <c>Complex</c> evaluates to a
            value that is not a number.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.IsInfinity">
            <summary>
            Indicates the provided <c>Complex</c> evaluates to an
            infinite value.
            </summary>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="P:CoreLib.Math.Complex.IsReal">
            <summary>
            Indicates the provided <c>Complex</c> is real.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.IsRealNonNegative">
            <summary>
            Indicates the provided <c>Complex</c> is real and not negative, that is >= 0.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.IsImaginary">
            <summary>
            Indicates the provided <c>Complex</c> is imaginary.
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.Modulus">
            <summary>
            Gets or sets the modulus of this <c>Complex</c>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set a negative modulus.
            </exception>
            <remarks>
            If this <c>Complex</c> is zero when the modulus is set,
            the Complex is assumed to be positive re with an argument of zero.
            </remarks>
            <seealso cref="P:CoreLib.Math.Complex.Argument"/>
        </member>
        <member name="P:CoreLib.Math.Complex.ModulusSquared">
            <summary>
            Gets or sets the squared modulus of this <c>Complex</c>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set a negative modulus.
            </exception>
            <remarks>
            If this <c>Complex</c> is zero when the modulus is set,
            the Complex is assumed to be positive re with an argument of zero.
            </remarks>
            <seealso cref="P:CoreLib.Math.Complex.Argument"/>
        </member>
        <member name="P:CoreLib.Math.Complex.Argument">
            <summary>
            Gets or sets the argument of this <c>Complex</c>.
            </summary>
            <remarks>
            Argument always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex</c> is zero, the Complex
            is assumed to be positive re with an argument of zero.
            </remarks>
        </member>
        <member name="P:CoreLib.Math.Complex.Conjugate">
            <summary>
            Gets or sets the conjugate of this <c>Complex</c>.
            </summary>
            <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex
            a = b.Conjugate
            </code>
            </remarks>
        </member>
        <member name="P:CoreLib.Math.Complex.Bytes">
            <summary>
            The internal byte representation
            </summary>
        </member>
        <member name="P:CoreLib.Math.Complex.Pointer">
            <summary>
            Returns the pointer to this instance
            </summary>
        </member>
        <member name="T:CoreLib.Math.RealImaginaryComparer">
            <summary>
            A complex number comperator, which first real part and then the imaginary one
            </summary>
        </member>
        <member name="T:CoreLib.Math.IComplexComparer">
            <summary>
            Base interface for a complex number comparer
            </summary>
        </member>
        <member name="M:CoreLib.Math.RealImaginaryComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares the two given object instances
            </summary>
            <param name="x">First object instance</param>
            <param name="y">Second object instance</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.RealImaginaryComparer.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:CoreLib.Math.ModulusArgumentComparer">
            <summary>
            A complex number comperator, which first compares the modulus and then the argument
            </summary>
        </member>
        <member name="M:CoreLib.Math.ModulusArgumentComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares the two given object instances
            </summary>
            <param name="x">First object instance</param>
            <param name="y">Second object instance</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ModulusArgumentComparer.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:CoreLib.Math.ArgumentModulusComparer">
            <summary>
            A complex number comperator, which first compares the argument and then the modulus
            </summary>
        </member>
        <member name="M:CoreLib.Math.ArgumentModulusComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares the two given object instances
            </summary>
            <param name="x">First object instance</param>
            <param name="y">Second object instance</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ArgumentModulusComparer.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:CoreLib.Math.Encryption.HashAlgorithms">
            <summary>
            Contains basic hash functions
            </summary>
        </member>
        <member name="T:CoreLib.Math.Encryption.HMACSHA3">
            <summary>
            Reprsents the SHA3 hash-based message authentifiaction code (HMAC)
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.HMACSHA3.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.HMACSHA3.#ctor(System.Int32)">
            <summary>
            Creates a new instance using the given hash size
            </summary>
            <param name="hashBitLength">Hash size (in bits)</param>
        </member>
        <member name="M:CoreLib.Math.Encryption.HMACSHA3.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance using the given hash size and a predefined key
            </summary>
            <param name="key">Key</param>
            <param name="hashBitLength">Hash size (in bits)</param>
        </member>
        <member name="T:CoreLib.Math.Encryption.SHA3">
            <summary>
            Computes the SHA3 hash for the input data
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.#ctor">
            <summary>
            Initializes a new instance of SHA3
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of SHA3 using the given hash size
            </summary>
            <param name="hashBitLength">Hash size (in bits)</param>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.Create">
            <summary>
            Creates an instance of the default implementation of SHA3
            </summary>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
            <returns>
            A new instance of SHA3
            </returns>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.Create(System.String)">
            <summary>
            Creates an instance of a specified implementation of SHA3
            </summary>
            <param name="hashName">The name of the specific implementation of SHA3 to be used</param>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm described by the <paramref name="hashName" /> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.
            </exception>
            <returns>
            A new instance of SHA3 using the specified implementation
            </returns>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            The core hash function, which hashes the given byte array
            </summary>
            <param name="array">Byte array</param>
            <param name="ibStart">Array offset/start</param>
            <param name="cbSize">Array length</param>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.HashFinal">
            <summary>
            Returns the final hash value
            </summary>
            <returns>Final hash value</returns>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.Initialize">
            <summary>
            Initializes the hash alogrithm
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.ROL(System.UInt64,System.Int32)">
            <summary>
            Performs an internal left bitwise rotation based on the hash size
            </summary>
            <param name="a">Value to be rotated</param>
            <param name="offset">Roation offset</param>
            <returns>Rotated value</returns>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3.AddToBuffer(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Adds the given array to the internal buffer at the given offset with the given Length
            </summary>
            <param name="array">Array</param>
            <param name="offset">Offset</param>
            <param name="count">Length</param>
        </member>
        <member name="P:CoreLib.Math.Encryption.SHA3.KeccakR">
            <summary>
            Sets or gets the internal KeccakR-value
            </summary>
        </member>
        <member name="P:CoreLib.Math.Encryption.SHA3.SizeInBytes">
            <summary>
            Returns the hash size in bytes
            </summary>
        </member>
        <member name="P:CoreLib.Math.Encryption.SHA3.HashByteLength">
            <summary>
            Returns the hash length in bytes
            </summary>
        </member>
        <member name="P:CoreLib.Math.Encryption.SHA3.CanReuseTransform">
            <summary>
            Returns, whether the algorithm can reuse the transformation
            </summary>
        </member>
        <member name="P:CoreLib.Math.Encryption.SHA3.Hash">
            <summary>
            Returns the internal hash value
            </summary>
        </member>
        <member name="P:CoreLib.Math.Encryption.SHA3.HashSize">
            <summary>
            Returns the hash size
            </summary>
        </member>
        <member name="T:CoreLib.Math.Encryption.SHA3Managed">
            <summary>
            Computes the SHA3 hash algorithm for the input data using the managed library.
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3Managed.#ctor">
            <summary>
            Initializes a new instance of SHA3 using the hash size of 512 bits
            </summary>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3Managed.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of SHA3 using the given hash size
            </summary>
            <param name="hashBitLength">Hash size (in bits)</param>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3Managed.HashFinal">
            <summary>
            Returns the final hash value
            </summary>
            <returns>Final hash value</returns>
        </member>
        <member name="M:CoreLib.Math.Encryption.SHA3Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            The core hash function, which hashes the given byte array
            </summary>
            <param name="array">Byte array</param>
            <param name="ibStart">Array offset/start</param>
            <param name="cbSize">Array length</param>
        </member>
        <member name="T:CoreLib.JoiningDelegate`1">
            <summary>
            Combines the generic value with the referenced output value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="elem">Element of type T</param>
            <param name="res">Referenced output value of type T</param>
        </member>
        <member name="T:CoreLib.JoiningDelegate`2">
            <summary>
            Joins two generic values and combines the result with the referenced output value
            </summary>
            <typeparam name="Tout">Generic output type T/out</typeparam>
            <typeparam name="Tin">Generic input type T/in</typeparam>
            <param name="e1">First element of type T/in</param>
            <param name="e2">Second element of type T/in</param>
            <param name="res">Referenced output value of type T/out</param>
        </member>
        <member name="T:CoreLib.LINQExtensions">
            <summary>
            Provides generic LINQ extensions
            </summary>
        </member>
        <member name="M:CoreLib.LINQExtensions.Clone``1(``0)">
            <summary>
            Generically clones a class instance
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="obj">Class instance of the type T</param>
            <returns>Cloned class instance</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.HashClass``2(``1)">
            <summary>
            Generates the hash code of the given object value using the given hash alogrithm and returns the byte array representing the hash code
            </summary>
            <typeparam name="H">Hash algorithm</typeparam>
            <typeparam name="T">Generic class type T</typeparam>
            <param name="obj">Object value of type T</param>
            <returns>Hash code as byte array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.HashStruct``2(``1)">
            <summary>
            Generates the hash code of the given object value using the given hash alogrithm and returns the byte array representing the hash code
            </summary>
            <typeparam name="H">Hash algorithm</typeparam>
            <typeparam name="T">Generic struct type T</typeparam>
            <param name="obj">Object value of type T</param>
            <returns>Hash code as byte array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Contains``1(``0[],``0[])">
            <summary>
            Returns whether a given generic source array contains a generic array match
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="source">Generic source array</param>
            <param name="match">Generic array match</param>
        </member>
        <member name="M:CoreLib.LINQExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns whether a given generic source range contains a generic range match
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="source">Generic source range</param>
            <param name="match">Generic range match</param>
        </member>
        <member name="M:CoreLib.LINQExtensions.Process``1(``0[],System.Func{``0,``0})">
            <summary>
            Performes a processing of all elements inside the given array and returns the processed result
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="source">Source array</param>
            <param name="func">Processing delegate function</param>
            <returns>Processed array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Process``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Performes a processing of all elements inside the given range and returns the processed result
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="source">Source range</param>
            <param name="func">Processing delegate function</param>
            <returns>Processed range</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Convert``2(``0[],System.Func{``0,``1})">
            <summary>
            Converts an array of type T1 to an array of type T2
            </summary>
            <typeparam name="T1">Generic type T1</typeparam>
            <typeparam name="T2">Generic type T2</typeparam>
            <param name="source">Source array (of type T1)</param>
            <param name="func">Conversion function</param>
            <returns>Output array (of type T2)</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a range of type T1 to a range of type T2
            </summary>
            <typeparam name="T1">Generic type T1</typeparam>
            <typeparam name="T2">Generic type T2</typeparam>
            <param name="source">Source range (of type T1)</param>
            <param name="func">Conversion function</param>
            <returns>Output range (of type T2)</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Batches the generic input range, so that its output sub-ranges have the maximum given size
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="source">Source range</param>
            <param name="batchSize">Batch size</param>
            <returns>Output (batched) range</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.YieldBatchElements``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
            <summary>
            Returns a sub-range of the given generic input range, wich has a given maximum batch size
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="source">Source range</param>
            <param name="batchSize">Batch size</param>
            <returns>Output (batched) range</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.ShiftRight``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shifts all generic list elements by a given offset to the right
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="values">List to be shifted</param>
            <param name="shift">Shift offset</param>
            <returns>Shifted list</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``1(``0[],CoreLib.JoiningDelegate{``0})">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="values">Generic input array</param>
            <param name="func">Generic joining delegate function</param>
            <returns>Joined result value</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``2(``0[],CoreLib.JoiningDelegate{``1,``0})">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T1">Generic source type T1</typeparam>
            <typeparam name="T2">Generic source type T2</typeparam>
            <param name="values">Generic input array of type T1</param>
            <param name="func">Generic joining delegate function</param>
            <returns>Joined result value of type T2</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``1(``0[],CoreLib.JoiningDelegate{``0},``0)">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="values">Generic input array</param>
            <param name="func">Generic joining delegate function</param>
            <param name="defaultvalue">The default value, which is used to join the first element, if the source array's size is smaller than 2</param>
            <returns>Joined result value</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``2(``0[],CoreLib.JoiningDelegate{``1,``0},``0)">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T1">Generic source type T1</typeparam>
            <typeparam name="T2">Generic source type T2</typeparam>
            <param name="values">Generic input array of type T1</param>
            <param name="func">Generic joining delegate function</param>
            <param name="defaultvalue">The default value, which is used to join the first element, if the source array's size is smaller than 2</param>
            <returns>Joined result value of type T2</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},CoreLib.JoiningDelegate{``0})">
            <summary>
            Joins all elements of the given generic input range using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="values">Generic input range</param>
            <param name="func">Generic joining delegate function</param>
            <returns>Joined result value</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``2(System.Collections.Generic.IEnumerable{``0},CoreLib.JoiningDelegate{``1,``0})">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T1">Generic source type T1</typeparam>
            <typeparam name="T2">Generic source type T2</typeparam>
            <param name="values">Generic input range of type T1</param>
            <param name="func">Generic joining delegate function</param>
            <returns>Joined result value of type T2</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},CoreLib.JoiningDelegate{``0},``0)">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">Generic input range</param>
            <param name="func">Generic joining delegate function</param>
            <param name="defaultvalue">The default value, which is used to join the first element, if the source range's size is smaller than 2</param>
            <returns>Joined result value</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Join``2(System.Collections.Generic.IEnumerable{``0},CoreLib.JoiningDelegate{``1,``0},``0)">
            <summary>
            Joins all elements of the given generic input array using a generic joining delegate function and returns the joined result value
            </summary>
            <typeparam name="T1">Generic source type T1</typeparam>
            <typeparam name="T2">Generic source type T2</typeparam>
            <param name="values">Generic input range of type T1</param>
            <param name="func">Generic joining delegate function</param>
            <param name="defaultvalue">The default value, which is used to join the first element, if the source range's size is smaller than 2</param>
            <returns>Joined result value of type T2</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Shuffle``1(``0[])">
            <summary>
            Randomly shuffles a generic array and returns the shuffled array
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="array">Input array</param>
            <returns>Shuffled array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly shuffles a generic list and returns the shuffled range
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="array">Input list</param>
            <returns>Shuffled range</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Rotate``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Rotates the given generic range by the given ammount to the right
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="values">Generic range</param>
            <param name="ammount">Rotation ammount</param>
            <returns>Rotated result</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Union``1(``0[][])">
            <summary>
            Unions all elements of a two-dimensional jagged array to a single-dimensional array
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="jagged">Two-dimensional jagged array</param>
            <returns>Single-dimensional array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Union``1(``0[][][])">
            <summary>
            Unions all elements of a three-dimensional jagged array to a single-dimensional array
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="jagged">Three-dimensional jagged array</param>
            <returns>Single-dimensional array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Union``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Unions all elements of a two-dimensional jagged range to a single-dimensional array
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="jagged">Two-dimensional jagged range</param>
            <returns>Single-dimensional array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Union``1(System.Collections.Generic.IEnumerable{``0}[][])">
            <summary>
            Unions all elements of a three-dimensional jagged range to a single-dimensional array
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="jagged">Three-dimensional jagged range</param>
            <returns>Single-dimensional array</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.MoveElement``1(``0[],System.Int32,System.Int32)">
            <summary>
            Moves an array element from a given source index to a given target index
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="array">The array, whoms element will be moved</param>
            <param name="sourceIndex">'Source' index</param>
            <param name="targetIndex">'Target' index</param>
            <returns>Array with the moved element</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Traverse``1(System.Array)">
            <summary>
            Traverses through the given n-dimensional jagged array and returns all items in a single-dimensional generic range
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="jagged">N-dimensional jagged array</param>
            <returns>Single-dimensional range</returns>
            <exception cref="T:System.InvalidCastException">Thrown, if an array element is not the type T</exception>
        </member>
        <member name="M:CoreLib.LINQExtensions.Union``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Unions all elements of a two-dimensional jagged range to a single-dimensional range
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="jagged">Two-dimensional jagged range</param>
            <returns>Single-dimensional range</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Add``2(System.Collections.Generic.Dictionary{``0,``1},System.Tuple{``0,``1})">
            <summary>
            Adds a new tuple entry to the given dictionary
            </summary>
            <typeparam name="T">Generic key type</typeparam>
            <typeparam name="U">Generic value type</typeparam>
            <param name="dic">Dictionary</param>
            <param name="tpl">Tuple entry</param>
        </member>
        <member name="M:CoreLib.LINQExtensions.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Tuple{``0,``1}[])">
            <summary>
            Adds a list of tuple entries to the given dictionary
            </summary>
            <typeparam name="T">Generic key type</typeparam>
            <typeparam name="U">Generic value type</typeparam>
            <param name="dic">Dictionary</param>
            <param name="tpls">Tuple entries</param>
        </member>
        <member name="M:CoreLib.LINQExtensions.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Adds a list of tuple entries to the given dictionary
            </summary>
            <typeparam name="T">Generic key type</typeparam>
            <typeparam name="U">Generic value type</typeparam>
            <param name="dic">Dictionary</param>
            <param name="tpls">Tuple entries</param>
        </member>
        <member name="M:CoreLib.LINQExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the action sequentially on each element of the given list
            </summary>
            <typeparam name="T">Generic list type parameter</typeparam>
            <param name="values">List</param>
            <param name="action">Action</param>
        </member>
        <member name="M:CoreLib.LINQExtensions.ToDebugString(System.Collections.IDictionary)">
            <summary>
            Returns the debug string representation of the given IDictionary interface
            </summary>
            <param name="dictionary">Dictionary</param>
            <returns>Debug string representation</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.ToDebugString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns the debug string representation of the given generic IDictionary interface
            </summary>
            <typeparam name="TKey">Dictionary key type</typeparam>
            <typeparam name="TValue">Dictionary value type</typeparam>
            <param name="dictionary">Dictionary</param>
            <returns>Debug string representation</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.NULL``1(``0)">
            <summary>
            Returns the nullptr (independant of the arguments)
            </summary>
            <typeparam name="T">Generic type T</typeparam>
            <param name="obj">Object instance of T</param>
            <returns>nullptr</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.Reverse``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Reverses the given dictionary
            </summary>
            <typeparam name="TKey">Generic key type</typeparam>
            <typeparam name="TValue">Generic value type</typeparam>
            <param name="source">Input dictionary</param>
            <returns>Reversed dictionary</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``2">
            <summary>
            Returns an array of reflection types, which contains the 2 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``3">
            <summary>
            Returns an array of reflection types, which contains the 3 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``4">
            <summary>
            Returns an array of reflection types, which contains the 4 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``5">
            <summary>
            Returns an array of reflection types, which contains the 5 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``6">
            <summary>
            Returns an array of reflection types, which contains the 6 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``7">
            <summary>
            Returns an array of reflection types, which contains the 7 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``8">
            <summary>
            Returns an array of reflection types, which contains the 8 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``9">
            <summary>
            Returns an array of reflection types, which contains the 9 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``10">
            <summary>
            Returns an array of reflection types, which contains the 10 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``11">
            <summary>
            Returns an array of reflection types, which contains the 11 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``12">
            <summary>
            Returns an array of reflection types, which contains the 12 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``13">
            <summary>
            Returns an array of reflection types, which contains the 13 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``14">
            <summary>
            Returns an array of reflection types, which contains the 14 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``15">
            <summary>
            Returns an array of reflection types, which contains the 15 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``16">
            <summary>
            Returns an array of reflection types, which contains the 16 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``17">
            <summary>
            Returns an array of reflection types, which contains the 17 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``18">
            <summary>
            Returns an array of reflection types, which contains the 18 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``19">
            <summary>
            Returns an array of reflection types, which contains the 19 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``20">
            <summary>
            Returns an array of reflection types, which contains the 20 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``21">
            <summary>
            Returns an array of reflection types, which contains the 21 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``22">
            <summary>
            Returns an array of reflection types, which contains the 22 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``23">
            <summary>
            Returns an array of reflection types, which contains the 23 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``24">
            <summary>
            Returns an array of reflection types, which contains the 24 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``25">
            <summary>
            Returns an array of reflection types, which contains the 25 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``26">
            <summary>
            Returns an array of reflection types, which contains the 26 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``27">
            <summary>
            Returns an array of reflection types, which contains the 27 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``28">
            <summary>
            Returns an array of reflection types, which contains the 28 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``29">
            <summary>
            Returns an array of reflection types, which contains the 29 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``30">
            <summary>
            Returns an array of reflection types, which contains the 30 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``31">
            <summary>
            Returns an array of reflection types, which contains the 31 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``32">
            <summary>
            Returns an array of reflection types, which contains the 32 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``33">
            <summary>
            Returns an array of reflection types, which contains the 33 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``34">
            <summary>
            Returns an array of reflection types, which contains the 34 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``35">
            <summary>
            Returns an array of reflection types, which contains the 35 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``36">
            <summary>
            Returns an array of reflection types, which contains the 36 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``37">
            <summary>
            Returns an array of reflection types, which contains the 37 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``38">
            <summary>
            Returns an array of reflection types, which contains the 38 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``39">
            <summary>
            Returns an array of reflection types, which contains the 39 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``40">
            <summary>
            Returns an array of reflection types, which contains the 40 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``41">
            <summary>
            Returns an array of reflection types, which contains the 41 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``42">
            <summary>
            Returns an array of reflection types, which contains the 42 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``43">
            <summary>
            Returns an array of reflection types, which contains the 43 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``44">
            <summary>
            Returns an array of reflection types, which contains the 44 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``45">
            <summary>
            Returns an array of reflection types, which contains the 45 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``46">
            <summary>
            Returns an array of reflection types, which contains the 46 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``47">
            <summary>
            Returns an array of reflection types, which contains the 47 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``48">
            <summary>
            Returns an array of reflection types, which contains the 48 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``49">
            <summary>
            Returns an array of reflection types, which contains the 49 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``50">
            <summary>
            Returns an array of reflection types, which contains the 50 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``51">
            <summary>
            Returns an array of reflection types, which contains the 51 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``52">
            <summary>
            Returns an array of reflection types, which contains the 52 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``53">
            <summary>
            Returns an array of reflection types, which contains the 53 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``54">
            <summary>
            Returns an array of reflection types, which contains the 54 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``55">
            <summary>
            Returns an array of reflection types, which contains the 55 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``56">
            <summary>
            Returns an array of reflection types, which contains the 56 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``57">
            <summary>
            Returns an array of reflection types, which contains the 57 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``58">
            <summary>
            Returns an array of reflection types, which contains the 58 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``59">
            <summary>
            Returns an array of reflection types, which contains the 59 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <typeparam name="T59">Generic Type №59</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``60">
            <summary>
            Returns an array of reflection types, which contains the 60 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <typeparam name="T59">Generic Type №59</typeparam>
            <typeparam name="T60">Generic Type №60</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``61">
            <summary>
            Returns an array of reflection types, which contains the 61 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <typeparam name="T59">Generic Type №59</typeparam>
            <typeparam name="T60">Generic Type №60</typeparam>
            <typeparam name="T61">Generic Type №61</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``62">
            <summary>
            Returns an array of reflection types, which contains the 62 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <typeparam name="T59">Generic Type №59</typeparam>
            <typeparam name="T60">Generic Type №60</typeparam>
            <typeparam name="T61">Generic Type №61</typeparam>
            <typeparam name="T62">Generic Type №62</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``63">
            <summary>
            Returns an array of reflection types, which contains the 63 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <typeparam name="T59">Generic Type №59</typeparam>
            <typeparam name="T60">Generic Type №60</typeparam>
            <typeparam name="T61">Generic Type №61</typeparam>
            <typeparam name="T62">Generic Type №62</typeparam>
            <typeparam name="T63">Generic Type №63</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="M:CoreLib.LINQExtensions.GetTypes``64">
            <summary>
            Returns an array of reflection types, which contains the 64 given generic types
            </summary>
            <typeparam name="T1">Generic Type №1</typeparam>
            <typeparam name="T2">Generic Type №2</typeparam>
            <typeparam name="T3">Generic Type №3</typeparam>
            <typeparam name="T4">Generic Type №4</typeparam>
            <typeparam name="T5">Generic Type №5</typeparam>
            <typeparam name="T6">Generic Type №6</typeparam>
            <typeparam name="T7">Generic Type №7</typeparam>
            <typeparam name="T8">Generic Type №8</typeparam>
            <typeparam name="T9">Generic Type №9</typeparam>
            <typeparam name="T10">Generic Type №10</typeparam>
            <typeparam name="T11">Generic Type №11</typeparam>
            <typeparam name="T12">Generic Type №12</typeparam>
            <typeparam name="T13">Generic Type №13</typeparam>
            <typeparam name="T14">Generic Type №14</typeparam>
            <typeparam name="T15">Generic Type №15</typeparam>
            <typeparam name="T16">Generic Type №16</typeparam>
            <typeparam name="T17">Generic Type №17</typeparam>
            <typeparam name="T18">Generic Type №18</typeparam>
            <typeparam name="T19">Generic Type №19</typeparam>
            <typeparam name="T20">Generic Type №20</typeparam>
            <typeparam name="T21">Generic Type №21</typeparam>
            <typeparam name="T22">Generic Type №22</typeparam>
            <typeparam name="T23">Generic Type №23</typeparam>
            <typeparam name="T24">Generic Type №24</typeparam>
            <typeparam name="T25">Generic Type №25</typeparam>
            <typeparam name="T26">Generic Type №26</typeparam>
            <typeparam name="T27">Generic Type №27</typeparam>
            <typeparam name="T28">Generic Type №28</typeparam>
            <typeparam name="T29">Generic Type №29</typeparam>
            <typeparam name="T30">Generic Type №30</typeparam>
            <typeparam name="T31">Generic Type №31</typeparam>
            <typeparam name="T32">Generic Type №32</typeparam>
            <typeparam name="T33">Generic Type №33</typeparam>
            <typeparam name="T34">Generic Type №34</typeparam>
            <typeparam name="T35">Generic Type №35</typeparam>
            <typeparam name="T36">Generic Type №36</typeparam>
            <typeparam name="T37">Generic Type №37</typeparam>
            <typeparam name="T38">Generic Type №38</typeparam>
            <typeparam name="T39">Generic Type №39</typeparam>
            <typeparam name="T40">Generic Type №40</typeparam>
            <typeparam name="T41">Generic Type №41</typeparam>
            <typeparam name="T42">Generic Type №42</typeparam>
            <typeparam name="T43">Generic Type №43</typeparam>
            <typeparam name="T44">Generic Type №44</typeparam>
            <typeparam name="T45">Generic Type №45</typeparam>
            <typeparam name="T46">Generic Type №46</typeparam>
            <typeparam name="T47">Generic Type №47</typeparam>
            <typeparam name="T48">Generic Type №48</typeparam>
            <typeparam name="T49">Generic Type №49</typeparam>
            <typeparam name="T50">Generic Type №50</typeparam>
            <typeparam name="T51">Generic Type №51</typeparam>
            <typeparam name="T52">Generic Type №52</typeparam>
            <typeparam name="T53">Generic Type №53</typeparam>
            <typeparam name="T54">Generic Type №54</typeparam>
            <typeparam name="T55">Generic Type №55</typeparam>
            <typeparam name="T56">Generic Type №56</typeparam>
            <typeparam name="T57">Generic Type №57</typeparam>
            <typeparam name="T58">Generic Type №58</typeparam>
            <typeparam name="T59">Generic Type №59</typeparam>
            <typeparam name="T60">Generic Type №60</typeparam>
            <typeparam name="T61">Generic Type №61</typeparam>
            <typeparam name="T62">Generic Type №62</typeparam>
            <typeparam name="T63">Generic Type №63</typeparam>
            <typeparam name="T64">Generic Type №64</typeparam>
            <returns>Array of reflection types</returns>
        </member>
        <member name="T:CoreLib.Generic.EnumExtensions">
            <summary>
            Contains enum extension methods
            </summary>
        </member>
        <member name="M:CoreLib.Generic.EnumExtensions.GetAllItems``1(System.Enum)">
            <summary>
            Returns all elements inside the given enum type
            </summary>
            <typeparam name="T">Enum type T</typeparam>
            <returns>Enum items</returns>
        </member>
        <member name="M:CoreLib.Generic.EnumExtensions.GetAllItems``1">
            <summary>
            Returns all elements inside the given enum type
            </summary>
            <typeparam name="T">Enum type T</typeparam>
            <returns>Enum items</returns>
        </member>
        <member name="M:CoreLib.Generic.EnumExtensions.GetAllSelectedItems``1(System.Enum)">
            <summary>
            Gets all implicitly selected enum values inside a flagged enum value
            </summary>
            <typeparam name="T">Enum type T</typeparam>
            <param name="value">Flagged enum value</param>
            <returns>Range of iumplicitly selected enum values</returns>
        </member>
        <member name="M:CoreLib.Generic.EnumExtensions.Contains``1(System.Enum,``0)">
            <summary>
            Returns whether the given flagged enum value contains the given requested implicit flag
            </summary>
            <typeparam name="T">Enum type T</typeparam>
            <param name="value">Flagged enum value</param>
            <param name="request">Requested implicit flag</param>
            <returns>Check result</returns>
        </member>
        <member name="T:CoreLib.Generic.GenericSerialization">
            <summary>
            Converts any serializable object to a binary byte array and back
            </summary>
        </member>
        <member name="M:CoreLib.Generic.GenericSerialization.SerializeClass``1(``0)">
            <summary>
            Generates the binary byte array based on the given generic object value
            </summary>
            <typeparam name="T">Generic class type T</typeparam>
            <param name="obj">Object value of the type T</param>
            <returns>Binary byte array representing the generic object value</returns>
        </member>
        <member name="M:CoreLib.Generic.GenericSerialization.DeserializeClass``1(System.Byte[])">
            <summary>
            Generates a generic object value based on the given binary byte array
            </summary>
            <typeparam name="T">Generic class type T</typeparam>
            <param name="arr">Binary byte array representing the generic object value</param>
            <returns>Object value of the type T</returns>
        </member>
        <member name="M:CoreLib.Generic.GenericSerialization.SerializeStruct``1(``0)">
            <summary>
            Generates the binary byte array based on the given generic object value
            </summary>
            <typeparam name="T">Generic struct type T</typeparam>
            <param name="obj">Object value of the type T</param>
            <returns>Binary byte array representing the generic object value</returns>
        </member>
        <member name="M:CoreLib.Generic.GenericSerialization.DeserializeStruct``1(System.Byte[])">
            <summary>
            Generates a generic object value based on the given binary byte array
            </summary>
            <typeparam name="T">Generic struct type T</typeparam>
            <param name="arr">Binary byte array representing the generic object value</param>
            <returns>Object value of the type T</returns>
        </member>
        <member name="T:CoreLib.Generic.PatternMatcher`1">
            <summary>
            Represents a generic pattern matcher, which executes given functions based on generic input
            </summary>
            <typeparam name="Output">The functions output generic type</typeparam>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Clear">
            <summary>
            Clears the internal pattern list
            </summary>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Case``1(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Case``1(System.Func{``0,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Case``1(System.Predicate{``0},`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T and the given condition
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="condition">Pattern condition</param>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Case(System.Predicate{System.Object},System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="condition">Pattern condition</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Case``1(System.Predicate{``0},System.Func{``0,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T and the given condition
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="condition">Pattern condition</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Default(`0)">
            <summary>
            Adds the default case, which returns the given value
            </summary>
            <param name="o">Default value</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Default(System.Func{System.Object,`0})">
            <summary>
            Adds the default case, which returns the given value
            </summary>
            <param name="function">Default value</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.Match(System.Object)">
            <summary>
            Matches the given object with the stored patterns and returns the object in question
            </summary>
            <param name="o">Object to be compared with</param>
            <returns>Output object instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:CoreLib.Generic.PatternMatcher`1.Item(System.Object)">
            <summary>
            Matches the given object with the stored patterns and returns the object in question
            </summary>
            <param name="o">Object to be compared with</param>
            <returns>Output object instance</returns>
        </member>
        <member name="T:CoreLib.Generic.PatternMatcher`2">
            <summary>
            Represents a generic pattern matcher, which executes given functions based on generic input
            </summary>
            <typeparam name="Input">The functions input generic type (the pattern type)</typeparam>
            <typeparam name="Output">The functions output generic type (the return value type)</typeparam>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.Clear">
            <summary>
            Clears the internal pattern list
            </summary>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;,&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.Case(System.Predicate{`1},`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T and the given condition
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="condition">Pattern condition</param>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;,&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.Case(System.Predicate{`1},System.Func{`1,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="condition">Pattern condition</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;,&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.Default(`0)">
            <summary>
            Adds the default case, which returns the given value
            </summary>
            <param name="o">Default value</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;,&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.Default(System.Func{`1,`0})">
            <summary>
            Adds the default case, which returns the given value
            </summary>
            <param name="function">Default value</param>
            <returns>Current CoreLib::Generic::PatternMatcher&lt;,&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.Match(`1)">
            <summary>
            Matches the given object with the stored patterns and returns the object in question
            </summary>
            <param name="o">Object to be compared with</param>
            <returns>Output object instance</returns>
        </member>
        <member name="M:CoreLib.Generic.PatternMatcher`2.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:CoreLib.Generic.PatternMatcher`2.Item(`1)">
            <summary>
            Matches the given object with the stored patterns and returns the object in question
            </summary>
            <param name="o">Object to be compared with</param>
            <returns>Output object instance</returns>
        </member>
        <member name="T:CoreLib.Generic.TypeMatcher`1">
            <summary>
            Represents a generic type pattern matcher, which executes given functions based on generic input and input type
            </summary>
            <typeparam name="Output">The functions output generic type</typeparam>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Clear">
            <summary>
            Clears the internal pattern list
            </summary>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``1(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``1(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``1(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``1(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``2(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T2
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``2(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T2
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``2(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T2
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``2(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T2
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``3(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T3
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``3(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T3
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``3(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T3
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``3(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T3
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``4(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T4
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``4(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T4
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``4(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T4
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``4(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T4
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``5(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T5
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``5(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T5
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``5(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T5
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``5(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T5
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``6(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T6
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``6(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T6
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``6(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T6
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``6(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T6
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``7(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T7
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``7(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T7
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``7(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T7
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``7(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T7
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``8(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T8
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``8(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T8
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``8(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T8
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``8(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T8
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``9(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T9
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``9(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T9
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``9(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T9
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``9(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T9
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``10(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T10
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``10(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T10
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``10(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T10
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``10(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T10
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``11(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T11
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``11(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T11
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``11(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T11
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``11(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T11
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``12(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T12
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``12(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T12
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``12(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T12
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``12(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T12
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``13(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T13
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``13(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T13
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``13(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T13
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``13(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T13
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``14(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T14
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``14(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T14
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``14(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T14
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``14(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T14
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``15(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T15
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``15(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T15
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``15(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T15
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``15(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T15
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``16(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T16
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``16(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T16
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``16(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T16
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``16(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T16
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``17(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T17
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``17(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T17
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``17(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T17
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``17(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T17
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``18(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T18
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``18(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T18
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``18(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T18
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``18(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T18
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``19(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T19
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``19(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T19
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``19(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T19
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``19(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T19
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``20(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T20
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``20(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T20
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``20(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T20
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``20(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T20
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``21(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T21
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``21(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T21
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``21(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T21
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``21(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T21
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``22(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T22
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``22(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T22
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``22(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T22
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``22(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T22
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``23(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T23
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``23(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T23
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``23(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T23
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``23(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T23
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``24(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T24
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``24(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T24
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``24(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T24
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``24(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T24
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``25(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T25
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``25(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T25
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``25(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T25
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``25(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T25
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``26(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T26
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``26(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T26
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``26(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T26
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``26(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T26
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``27(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T27
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``27(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T27
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``27(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T27
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``27(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T27
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``28(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T28
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``28(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T28
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``28(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T28
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``28(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T28
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``29(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T29
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``29(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T29
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``29(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T29
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``29(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T29
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``30(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T30
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``30(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T30
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``30(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T30
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``30(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T30
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``31(`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T31
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <typeparam name="T31">Generic pattern type T31</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``31(System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T31
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <typeparam name="T31">Generic pattern type T31</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``31(System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T31
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <typeparam name="T31">Generic pattern type T31</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case``31(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern types T1..T31
            </summary>
            <typeparam name="T1">Generic pattern type T1</typeparam>
            <typeparam name="T2">Generic pattern type T2</typeparam>
            <typeparam name="T3">Generic pattern type T3</typeparam>
            <typeparam name="T4">Generic pattern type T4</typeparam>
            <typeparam name="T5">Generic pattern type T5</typeparam>
            <typeparam name="T6">Generic pattern type T6</typeparam>
            <typeparam name="T7">Generic pattern type T7</typeparam>
            <typeparam name="T8">Generic pattern type T8</typeparam>
            <typeparam name="T9">Generic pattern type T9</typeparam>
            <typeparam name="T10">Generic pattern type T10</typeparam>
            <typeparam name="T11">Generic pattern type T11</typeparam>
            <typeparam name="T12">Generic pattern type T12</typeparam>
            <typeparam name="T13">Generic pattern type T13</typeparam>
            <typeparam name="T14">Generic pattern type T14</typeparam>
            <typeparam name="T15">Generic pattern type T15</typeparam>
            <typeparam name="T16">Generic pattern type T16</typeparam>
            <typeparam name="T17">Generic pattern type T17</typeparam>
            <typeparam name="T18">Generic pattern type T18</typeparam>
            <typeparam name="T19">Generic pattern type T19</typeparam>
            <typeparam name="T20">Generic pattern type T20</typeparam>
            <typeparam name="T21">Generic pattern type T21</typeparam>
            <typeparam name="T22">Generic pattern type T22</typeparam>
            <typeparam name="T23">Generic pattern type T23</typeparam>
            <typeparam name="T24">Generic pattern type T24</typeparam>
            <typeparam name="T25">Generic pattern type T25</typeparam>
            <typeparam name="T26">Generic pattern type T26</typeparam>
            <typeparam name="T27">Generic pattern type T27</typeparam>
            <typeparam name="T28">Generic pattern type T28</typeparam>
            <typeparam name="T29">Generic pattern type T29</typeparam>
            <typeparam name="T30">Generic pattern type T30</typeparam>
            <typeparam name="T31">Generic pattern type T31</typeparam>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Predicate{System.Type},`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T and the given condition
            </summary>
            <param name="condition">Pattern type condition</param>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Predicate{System.Type},System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="condition">Pattern type condition</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Predicate{System.Type},System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="condition">Pattern type condition</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Predicate{System.Type},System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="condition">Pattern type condition</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Type,`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T and the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Type,System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Type,System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Type,System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Collections.Generic.IEnumerable{System.Type},`0)">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given generic pattern type T and the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="o">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Collections.Generic.IEnumerable{System.Type},System.Func{`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Object,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Case(System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds a new case to the internal list, which returns the given output value, if the pattern matches the given condition
            </summary>
            <param name="t">Pattern type</param>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Default(`0)">
            <summary>
            Adds the default value to the internal list, which will be returned if no pattern will be matched
            </summary>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Default(System.Func{`0})">
            <summary>
            Adds the default value to the internal list, which will be returned if no pattern will be matched
            </summary>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Default(System.Func{System.Object,`0})">
            <summary>
            Adds the default value to the internal list, which will be returned if no pattern will be matched
            </summary>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Default(System.Func{System.Object,System.Type,`0})">
            <summary>
            Adds the default value to the internal list, which will be returned if no pattern will be matched
            </summary>
            <param name="function">Output value, which will be returned, if the case is a match</param>
            <returns>Current CoreLib::Generic::TypeMatcher&lt;&gt;-instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Match(System.Type)">
            <summary>
            Matches the given type with the stored patterns and returns the object in question
            </summary>
            <param name="t">Pattern type</param>
            <returns>Output object instance</returns>
        </member>
        <member name="M:CoreLib.Generic.TypeMatcher`1.Match``1(System.Object)">
            <summary>
            Matches the given object with the stored patterns and returns the object in question
            </summary>
            <typeparam name="T">Pattern type</typeparam>
            <param name="o">Object to be compared with</param>
            <returns>Output object instance</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:CoreLib.Generic.TypeMatcher`1.Match(System.Type,System.Object)" ignoriert -->
        <member name="M:CoreLib.Generic.TypeMatcher`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "P:CoreLib.Generic.TypeMatcher`1.Item(System.Type)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "P:CoreLib.Generic.TypeMatcher`1.Item(System.Object)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "P:CoreLib.Generic.TypeMatcher`1.Item(System.Type,System.Object)" ignoriert -->
        <member name="T:CoreLib.Math.FourierSeries">
            <summary>
            Contains basic methods concerning the Fourier-expansion, -series and -transform
            </summary>
        </member>
        <member name="M:CoreLib.Math.FourierSeries.DiscreteFourierTransfrom(System.Double[],System.Int32)">
            <summary>
            Provides the Discrete Fourier Transform for a real-valued input signal
            </summary>
            <param name="input">The signal to transform</param>
            <param name="partials">The maximum number of partials to calculate. If not value is given it defaults to input/2</param>
            <returns>
            The respective cos and sin components of the signal
            </returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:CoreLib.Math.FourierSeries.InverseDiscreteFourierTransfrom(System.Double[],System.Double[],System.Int32)" ignoriert -->
        <member name="T:CoreLib.Math.GenerationDelegate">
            <summary>
            The mathematical function generation delegate
            </summary>
            <returns>Mathematical function</returns>
        </member>
        <member name="T:CoreLib.Math.FunctionDelegate`1">
            <summary>
            The mathematical function delegate
            </summary>
            <typeparam name="T">Generic parameter type T</typeparam>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="T:CoreLib.Math.InverseFunctionDelegate`1">
            <summary>
            The mathematical inverse function delegate
            </summary>
            <typeparam name="T">Generic parameter type T</typeparam>
            <param name="arg">Function argument</param>
            <returns>Function result</returns>
        </member>
        <member name="T:CoreLib.Math.MathFunction">
            <summary>
            Represents a mathematical function
            </summary>
        </member>
        <member name="T:CoreLib.Math.IFunction`1">
            <summary>
            Represents the base of a mathematical function
            </summary>
            <typeparam name="T">Generic parameter type T</typeparam>
        </member>
        <member name="M:CoreLib.Math.IFunction`1.Calculate(`0[])">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.IFunction`1.Calculate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.IFunction`1.CalculateInverse(`0)">
            <summary>
            Calculates the inverse result based on the given input parameters
            </summary>
            <param name="arg">Function argument</param>
            <returns>Function result</returns>
        </member>
        <member name="P:CoreLib.Math.IFunction`1.HasInverse">
            <summary>
            Returns whether the function has a inverse function
            </summary>
        </member>
        <member name="P:CoreLib.Math.IFunction`1.FunctionType">
            <summary>
            Returns the functions input and result type
            </summary>
        </member>
        <member name="P:CoreLib.Math.IFunction`1.Inverse">
            <summary>
            Returns the inverse function
            </summary>
        </member>
        <member name="P:CoreLib.Math.IFunction`1.UnderlyingFunction">
            <summary>
            Returns the underlying calculation function
            </summary>
        </member>
        <member name="F:CoreLib.Math.MathFunction.EPSILON_SQRT">
            <summary>
            The square root of epsilon √ε = 0.0000001
            </summary>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CoreLib#Math#IFunction{System#Decimal}#Calculate(System.Decimal[])">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CoreLib#Math#IFunction{System#Decimal}#Calculate(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Calculate(System.Decimal[])">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Calculate(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CalculateInverse(System.Decimal)">
            <summary>
            Calculates the inverse result based on the given input parameters
            </summary>
            <param name="arg">Function argument</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CoreLib#Math#IFunction{System#Decimal}#CalculateInverse(System.Decimal)">
            <summary>
            Calculates the inverse result based on the given input parameters
            </summary>
            <param name="arg">Function argument</param>
            <returns>Function result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Benchmark(System.Decimal[])">
            <summary>
            Performs a benchmark on the function with 1000 iterations and returns the average calculation time [in ms]
            </summary>
            <param name="args">Function arguments</param>
            <returns>Average calculation time [in ms]</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Benchmark(System.UInt32,System.Decimal[])">
            <summary>
            Performs a benchmark on the function with the given iteration count and returns the average calculation time [in ms]
            </summary>
            <param name="iterations">Number of iterations</param>
            <param name="args">Function arguments</param>
            <returns>Average calculation time [in ms]</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Benchmark(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Performs a benchmark on the function with 1000 iterations and returns the average calculation time [in ms]
            </summary>
            <param name="args">Function arguments</param>
            <returns>Average calculation time [in ms]</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Benchmark(System.UInt32,System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Performs a benchmark on the function with the given iteration count and returns the average calculation time [in ms]
            </summary>
            <param name="iterations">Number of iterations</param>
            <param name="args">Function arguments</param>
            <returns>Average calculation time [in ms]</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Pitch(System.Decimal[])">
            <summary>
            Returns the function's pitch at the given point, which calculated with the precision √ε
            </summary>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Pitch(System.Decimal,System.Decimal[])">
            <summary>
            Returns the function's pitch at the given point, which calculated with the given precision
            </summary>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Derivative">
            <summary>
            Returns the derivative function of the current function instance which is calculated with the precision √ε
            </summary>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Derivative(System.Decimal)">
            <summary>
            Returns the derivative function of the current function instance which is calculated with the given precision
            </summary>
            <param name="precision">Derivative precision</param>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Integral(System.Decimal,System.Decimal)">
            <summary>
            Returns the integral of the function enclosed by the X-axis, the current function and the given interval [α,β] using the integral resolution of √ε
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <returns>The calcutlated integral</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Integral(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns the integral of the function enclosed by the X-axis, the current function and the given interval [α,β] using the given integral resolution
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <param name="resolution">Integral resolution</param>
            <returns>The calcutlated integral</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Average(System.Decimal,System.Decimal)">
            <summary>
            Returns the average of the function enclosed by the X-axis, the current function and the given interval [α,β] using the average resolution of √ε
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <returns>The calcutlated average</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Average(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns the average of the function enclosed by the X-axis, the current function and the given interval [α,β] using the given average resolution
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <param name="resolution">Average resolution</param>
            <returns>The calcutlated average</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.LimitZero">
            <summary>
            Returns the function value when approched to 0 and returns the calculated value
            </summary>
            <returns>Approched function value in 0</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Limit(System.Decimal)">
            <summary>
            Returns the function value when approched to the given limit and returns the calculated value
            </summary>
            <param name="x">Limit</param>
            <returns>Approched function value in the given limit</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.ConvergesNegativeInfinity">
            <summary>
            Checks, whether the current function converges when approched to -∞ and returns the convergence point (or null, if none exists)
            </summary>
            <returns>Convergence point</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.ConvergesPositiveInfinity">
            <summary>
            Checks, whether the current function converges when approched to ∞ and returns the convergence point (or null, if none exists)
            </summary>
            <returns>Convergence point</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.NullPoints">
            <summary>
            Returns a list of so-called 'null-points', which are points, where the function result is equal to zero
            </summary>
            <returns>List of null-points</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CrtitcalPoints">
            <summary>
            Returns a list of so-called 'critical points', which are points, where the function result is equal to zero or has a local/global maxima/minima
            </summary>
            <returns>List of critical points</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.LocalMaxima">
            <summary>
            Returns a list of so-called 'local maximas', which are points, where the function's derivate is equal to zero and the functions curvature is negative
            </summary>
            <returns>List of local maximas</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.LocalMinima">
            <summary>
            Returns a list of so-called 'local minimas', which are points, where the function's derivate is equal to zero and the functions curvature is positive
            </summary>
            <returns>List of local minimas</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CalculateValues(System.Decimal,System.Decimal)">
            <summary>
            Calculates the 10000 input values in the given interval and returns their corresponding function values in an ordered array
            </summary>
            <param name="α">Lower (inclusive) interval limit</param>
            <param name="β">Upper (inclusive) interval limit</param>
            <returns>Function value array</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CalculateValues(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Calculates the input values in the given interval using the given step and returns their corresponding function values in an ordered array
            </summary>
            <param name="α">Lower (inclusive) interval limit</param>
            <param name="β">Upper (inclusive) interval limit</param>
            <param name="step">Step</param>
            <returns>Function value array</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.GetILBytes">
            <summary>
            Returns the MSIL/CIL bytes which represent the internal mathematical function
            </summary>
            <returns>MSIL/CIL bytes</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.GetILCode">
            <summary>
            Returns the MSIL/CIL code which represents the internal mathematical function
            </summary>
            <returns>MSIL/CIL code</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.ToConstant(CoreLib.Math.MathFunction)">
            <summary>
            Converts the given mathematical polynomial function to a constant function
            </summary>
            <param name="func">Mathematical polynomial function</param>
            <returns>Mathematical constant function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.ToString">
            <summary>
            Returns the string representation of the current function instance
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Equals(System.Object)">
            <summary>
            Checks whether the current instance is equal with the given one and returns the check result
            </summary>
            <param name="obj">Mathfunction instance</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Integral(CoreLib.Math.MathFunction,System.Decimal,System.Decimal)">
            <summary>
            Returns the integral of the given function enclosed by the X-axis, the given function and the given interval [α,β] using the integral resolution of √ε
            </summary>
            <param name="func">Mathematical function</param>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <returns>The calcutlated integral</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Integral(CoreLib.Math.MathFunction,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns the integral of the given function enclosed by the X-axis, the given function and the given interval [α,β] using the given integral resolution
            </summary>
            <param name="func">Mathematical function</param>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <param name="resolution">Integral resolution</param>
            <returns>The calcutlated integral</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Create(System.Decimal)">
            <summary>
            Creates a new mathematical constant method without an inverse method
            </summary>
            <param name="constant">Constant value</param>
            <returns>Mathematical constant method</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.Create(System.Nullable{System.Decimal})">
            <summary>
            Creates a new mathematical constant method without an inverse method
            </summary>
            <param name="constant">Constant value</param>
            <returns>Mathematical constant method</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.FromString(System.String)">
            <summary>
            Tries to evaluate the given string as a mathematical c# function and returns the evaluation result
            </summary>
            <param name="s">String to be parsed</param>
            <returns>Mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.FromDelegate(System.Func{System.Double,System.Nullable{System.Double}})">
            <summary>
            Implicitly casts the given double delegate to a corresponding function (without inverse)
            </summary>
            <param name="del">Double delegate</param>
            <returns>Function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.FromDelegate(System.Func{System.Decimal,System.Nullable{System.Decimal}})">
            <summary>
            Implicitly casts the given decimal delegate to a corresponding function (without inverse)
            </summary>
            <param name="del">Decimal delegate</param>
            <returns>Function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CreatePolynomial(System.String)">
            <summary>
            Creates a polynomial mathematical function using the given polynomial function string
            </summary>
            <param name="poly">Polynomial function string</param>
            <returns>Polynomial mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CreatePolynomial(CoreLib.Math.PolynomialParameter[])">
            <summary>
            Creates a polynomial mathematical function using the given polynomial function parameters aXⁿ
            </summary>
            <param name="parameters">List of polynomial function parameters aXⁿ</param>
            <returns>Polynomial mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.CreatePolynomial(System.Decimal,System.Decimal)">
            <summary>
            Creates a polynomial mathematical function with the degree(1) using the given polynomial function parameter aXⁿ
            </summary>
            <param name="factor">Factor a</param>
            <param name="exponent">Exponent n</param>
            <returns>Polynomial mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.PolynomialDivision(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Performs a polinomial division on the two given polynomial functions and returns the result
            </summary>
            <param name="f1">First polynomial function</param>
            <param name="f2">Second polynomial function</param>
            <returns>A tuple containing the division result and the remainder</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(System.Decimal)">
            <summary>
            Creates a new mathematical constant method without an inverse method
            </summary>
            <param name="constant">Constant value</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(System.Nullable{System.Decimal})">
            <summary>
            Creates a new mathematical constant method without an inverse method
            </summary>
            <param name="constant">Constant value</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(System.String)">
            <summary>
            Creates a new polynomial mathematical method without an inverse method using the given polynomial function string
            </summary>
            <param name="poly">Polynomial function string</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Creates a new polynomial mathematical method without an inverse method using the given polynomial function parameters aXⁿ
            </summary>
            <param name="parameters">List of polynomial function parameters aXⁿ</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(CoreLib.Math.PolynomialParameter[])">
            <summary>
            Creates a new polynomial mathematical method without an inverse method using the given polynomial function parameters aXⁿ
            </summary>
            <param name="parameters">List of polynomial function parameters aXⁿ</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(CoreLib.Math.FunctionDelegate{System.Decimal})">
            <summary>
            Creates a new mathematical method without an inverse method
            </summary>
            <param name="func">The underlying mathematical delegate</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.#ctor(CoreLib.Math.FunctionDelegate{System.Decimal},CoreLib.Math.InverseFunctionDelegate{System.Decimal})">
            <summary>
            Creates a new mathematical method
            </summary>
            <param name="func">The underlying mathematical delegate</param>
            <param name="invs">The underlying mathematical inverse function delegate</param>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Equality(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Returns whether the two given mathematical functions are equal
            </summary>
            <param name="ƒ1">First mathematical function</param>
            <param name="ƒ2">Second mathematical function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Inequality(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Returns whether the two given mathematical functions are not equal
            </summary>
            <param name="ƒ1">First mathematical function</param>
            <param name="ƒ2">Second mathematical function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_UnaryNegation(CoreLib.Math.MathFunction)">
            <summary>
            Returns the negative of the given function
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Increment(CoreLib.Math.MathFunction)">
            <summary>
            Adds the unit-function to the given one [commutative]
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Decrement(CoreLib.Math.MathFunction)">
            <summary>
            Subtracts the unit-function from the given one
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Addition(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Adds two functions together [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Subtraction(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Subtracts the second function from the first one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Multiply(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Multiplies the seond function with the first one [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Division(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Divides the first function by the second one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Modulus(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Performs a modulos-operation using the two given functions
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Addition(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Adds a function to a decimal number [commutative]
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Subtraction(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Subtracts a decimal number from a function
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Multiply(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Multiplies a function with a decimal number [commutative]
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Division(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Performs a division using a given function and decimal number
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Modulus(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Performs a modulus-operation using a given function and decimal number
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Addition(System.Decimal,CoreLib.Math.MathFunction)">
            <summary>
            Adds a function to a decimal number [commutative]
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Subtraction(System.Decimal,CoreLib.Math.MathFunction)">
            <summary>
            Subtracts a function from a decimal number
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Multiply(System.Decimal,CoreLib.Math.MathFunction)">
            <summary>
            Multiplies a function with a decimal number [commutative]
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Division(System.Decimal,CoreLib.Math.MathFunction)">
            <summary>
            Performs a division using a given function and decimal number
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Modulus(System.Decimal,CoreLib.Math.MathFunction)">
            <summary>
            Performs a modulus-operation using a given function and decimal number
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_ExclusiveOr(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Calaculates the potency of the two given functions and returns the operator result
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_ExclusiveOr(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Calaculates the potency of the given function and decimal number and returns the operator result
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_ExclusiveOr(System.Decimal,CoreLib.Math.MathFunction)">
            <summary>
            Calaculates the potency of the given decimal number and function and returns the operator result
            </summary>
            <param name="func">Function</param>
            <param name="num">Decimal number</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_BitwiseOr(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Calculates the limit of the first given function at the point given by the second function and returns the operation result
            </summary>
            <param name="func">First function</param>
            <param name="lim">Limit function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_BitwiseOr(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Calculates the limit of the first given function at the given constant and returns the operation result
            </summary>
            <param name="func">First function</param>
            <param name="lim">Limit constant</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_BitwiseAnd(CoreLib.Math.MathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Contacenates two functions with another and returns the operation result
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_LeftShift(CoreLib.Math.MathFunction,System.Int32)">
            <summary>
            Contacinates the given function a given number of times and returns the operation result
            </summary>
            <param name="func">Function</param>
            <param name="iter">Iteration count</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_OnesComplement(CoreLib.Math.MathFunction)">
            <summary>
            Returns the mathematical inverse method of the given function
            </summary>
            <param name="func">Function</param>
            <returns>Mathematical inverse method</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_LogicalNot(CoreLib.Math.MathFunction)">
            <summary>
            Returns the mathematical inverse function of the given function
            </summary>
            <param name="func">Function</param>
            <returns>Mathematical inverse function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(System.String)~CoreLib.Math.MathFunction">
            <summary>
            Tries to evaluate the given string as a mathematical c# function and returns the evaluation result
            </summary>
            <param name="funcstr">String to be parsed</param>
            <returns>Mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(CoreLib.Math.FunctionDelegate{System.Decimal})~CoreLib.Math.MathFunction">
            <summary>
            Implicitly casts the given mathematical method to a corresponding function (without inverse)
            </summary>
            <param name="del">Mathematical method</param>
            <returns>Function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(System.Func{System.Double,System.Nullable{System.Double}})~CoreLib.Math.MathFunction">
            <summary>
            Implicitly casts the given decimal delegate to a corresponding function (without inverse)
            </summary>
            <param name="del">Decimal delegate</param>
            <returns>Function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(System.Func{System.Decimal,System.Nullable{System.Decimal}})~CoreLib.Math.MathFunction">
            <summary>
            Implicitly casts the given decimal delegate to a corresponding function (without inverse)
            </summary>
            <param name="del">Decimal delegate</param>
            <returns>Function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(CoreLib.Math.MathFunction)~CoreLib.Math.FunctionDelegate{System.Decimal}">
            <summary>
            Implicitly casts the given function to its mathematical method
            </summary>
            <param name="func">Funcion</param>
            <returns>Mathematical method</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(CoreLib.Math.MathFunction)~CoreLib.Math.InverseFunctionDelegate{System.Decimal}">
            <summary>
            Implicitly casts the given function to its mathematical inverse method
            </summary>
            <param name="func">Funcion</param>
            <returns>Mathematical inverse method</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(CoreLib.Math.PolynomialParameter[])~CoreLib.Math.MathFunction">
            <summary>
            Converts the given list of polynomial parameters to a mathematical function
            </summary>
            <param name="p">List of polynomial parameters</param>
            <returns>Mathematical polynomial function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunction.op_Implicit(CoreLib.Math.MathFunction)~CoreLib.Math.PolynomialParameter[]">
            <summary>
            Converts the given mathematical polynomial function to a list of polynomial parameters
            </summary>
            <param name="f">Mathematical polynomial function</param>
            <returns>List of polynomial parameters</returns>
        </member>
        <member name="P:CoreLib.Math.MathFunction.FunctionType">
            <summary>
            Returns the functions input and result type [mscorlib]System::decimal
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.VisibleName">
            <summary>
            Sets or gets the visible name of this method
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.HasInverse">
            <summary>
            Returns whether the function has a inverse function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.MethodInfo">
            <summary>
            Returns the method information about the mathematical calculation method
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.InverseMethodInfo">
            <summary>
            Returns the method information about the inverse mathematical calculation method
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.CPPSignature">
            <summary>
            Returns the C++-Signature of the mathematical calculation method
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.InverseCPPSignature">
            <summary>
            Returns the C++-Signature of the inverse mathematical calculation method
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.δx">
            <summary>
            Returns the derivative function of the current function instance with default precision
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.Item(System.Decimal[])">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="P:CoreLib.Math.MathFunction.Inverse">
            <summary>
            Returns the inverse function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.UnderlyingFunction">
            <summary>
            Returns the underlying calculation function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.NullValue">
            <summary>
            Returns the function's null value [= ƒ(0)]
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.IsContinuous">
            <summary>
            Returns, whether the current function is Continuous
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.IsConstant">
            <summary>
            Returns, whether the current function is a constant one
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.IsPolynomial">
            <summary>
            Returns, whether the current function is a (pure) polynomial function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.PolynomialDegree">
            <summary>
            Returns the polynomial degree of the current function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.Polynome">
            <summary>
            Returns the polynomial parameters, which represent the current mathematical (polynomial) function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.IsPeriodic">
            <summary>
            Returns, whether the function is periodic or not
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunction.Period">
            <summary>
            Returns the function's period
            </summary>
        </member>
        <member name="T:CoreLib.Math.MathFunctions">
            <summary>
            Contains a collection of important mathematical functions
            </summary>
        </member>
        <member name="M:CoreLib.Math.MathFunctions.Evaluate(System.String)">
            <summary>
            Tries to evaluate the given string as a mathematical c# function and returns the evaluation result
            </summary>
            <param name="s">String to be parsed</param>
            <returns>Mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunctions.Evaluate(System.String,System.Boolean)">
            <summary>
            Tries to evaluate the given string as a mathematical c# function and returns the evaluation result
            </summary>
            <param name="s">String to be parsed</param>
            <param name="throwerror">Field, which indicates whether any occuring error shall be thrown</param>
            <returns>Mathematical function</returns>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.Σ">
            <summary>
            Represents the sum Σ of all numbers from [0] to [1] using the step [2]
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.Π">
            <summary>
            Represents the product Π of all numbers from [0] to [1] using the step [2]
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.Γ">
            <summary>
            Represents the gamma function Γ of [0]
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.e">
            <summary>
            Represents the exponential function eᵡ with the number [0] as exponent
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.sin">
            <summary>
            Represents the trigonometric function sin(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.cos">
            <summary>
            Represents the trigonometric function cos(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.tan">
            <summary>
            Represents the trigonometric function tan(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.cot">
            <summary>
            Represents the trigonometric function cot(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.sec">
            <summary>
            Represents the trigonometric function sec(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.csc">
            <summary>
            Represents the trigonometric function csc(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arcsin">
            <summary>
            Represents the inverse trigonometric function sin⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arccos">
            <summary>
            Represents the inverse trigonometric function cos⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arctan">
            <summary>
            Represents the inverse trigonometric function tan⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arccot">
            <summary>
            Represents the inverse trigonometric function cot⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arcsec">
            <summary>
            Represents the inverse trigonometric function sec⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arccsc">
            <summary>
            Represents the inverse trigonometric function csc⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.sinh">
            <summary>
            Represents the trigonometric function sinh(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.cosh">
            <summary>
            Represents the trigonometric function cosh(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.tanh">
            <summary>
            Represents the trigonometric function tanh(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.coth">
            <summary>
            Represents the trigonometric function coth(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.sech">
            <summary>
            Represents the trigonometric function sech(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.csch">
            <summary>
            Represents the trigonometric function csch(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arcsinh">
            <summary>
            Represents the inverse trigonometric function sinh⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arccosh">
            <summary>
            Represents the inverse trigonometric function cosh⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arctanh">
            <summary>
            Represents the inverse trigonometric function tanh⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arccoth">
            <summary>
            Represents the inverse trigonometric function coth⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arcsech">
            <summary>
            Represents the inverse trigonometric function sech⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.arccsch">
            <summary>
            Represents the inverse trigonometric function csch⁻¹(x) with the number [0] as argument x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.null">
            <summary>
            Represents the mathematical null-function ƒ : x --> 0
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.unit">
            <summary>
            Represents the mathematical unit-function ƒ : x --> 1
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.x">
            <summary>
            Represents the mathematical function ƒ : x --> x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.x2">
            <summary>
            Represents the mathematical function ƒ : x --> x²
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.x3">
            <summary>
            Represents the mathematical function ƒ : x --> x³
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.x4">
            <summary>
            Represents the mathematical function ƒ : x --> x⁴
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.MultiplicativeInverse">
            <summary>
            Represents the mathematical function ƒ : x --> x⁻¹
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.SquareRoot">
            <summary>
            Represents the mathematical function ƒ : x --> √x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.QubicRoot">
            <summary>
            Represents the mathematical function ƒ : x --> ∛x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.FourthRoot">
            <summary>
            Represents the mathematical function ƒ : x --> ∜x
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.log">
            <summary>
            Represents the mathematical function ƒ : x --> logₑ(x)
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.log2">
            <summary>
            Represents the mathematical function ƒ : x --> log₂(x)
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.log3">
            <summary>
            Represents the mathematical function ƒ : x --> log₃(x)
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.log10">
            <summary>
            Represents the mathematical function ƒ : x --> log₁₀(x)
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.PowerOf2">
            <summary>
            Represents the mathematical function ƒ : x --> 2ᵡ
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.PowerOf3">
            <summary>
            Represents the mathematical function ƒ : x --> 3ᵡ
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.PowerOf10">
            <summary>
            Represents the mathematical function ƒ : x --> 10ᵡ
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.One">
            <summary>
            Represents the constant mathematical function ƒ : x --> 1
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctions.Zero">
            <summary>
            Represents the constant mathematical function ƒ : x --> 0
            </summary>
        </member>
        <member name="T:CoreLib.Math.ConstantMathFunction">
            <summary>
            Represents a constant mathematical function
            </summary>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Pitch(System.Decimal[])">
            <summary>
            Returns the function's pitch at the given point, which calculated with the precision √ε
            </summary>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Pitch(System.Decimal,System.Decimal[])">
            <summary>
            Returns the function's pitch at the given point, which calculated with the given precision
            </summary>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Derivative">
            <summary>
            Returns the derivative function of the current function instance which is calculated with the precision √ε
            </summary>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Derivative(System.Decimal)">
            <summary>
            Returns the derivative function of the current function instance which is calculated with the given precision
            </summary>
            <param name="precision">Derivative precision</param>
            <returns>Derivative function</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Integral(System.Decimal,System.Decimal)">
            <summary>
            Returns the integral of the function enclosed by the X-axis, the current function and the given interval [α,β] using the integral resolution of √ε
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <returns>The calcutlated integral</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Integral(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns the integral of the function enclosed by the X-axis, the current function and the given interval [α,β] using the given integral resolution
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <param name="resolution">Integral resolution</param>
            <returns>The calcutlated integral</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Average(System.Decimal,System.Decimal)">
            <summary>
            Returns the average of the function enclosed by the X-axis, the current function and the given interval [α,β] using the average resolution of √ε
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <returns>The calcutlated average</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Average(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns the average of the function enclosed by the X-axis, the current function and the given interval [α,β] using the given average resolution
            </summary>
            <param name="α">Interval parameter [α,...)</param>
            <param name="β">Interval parameter (...,β]</param>
            <param name="resolution">Average resolution</param>
            <returns>The calcutlated average</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.ConvergesNegativeInfinity">
            <summary>
            Checks, whether the current function converges when approched to -∞ and returns the convergence point (or null, if none exists)
            </summary>
            <returns>Convergence point</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.ConvergesPositiveInfinity">
            <summary>
            Checks, whether the current function converges when approched to ∞ and returns the convergence point (or null, if none exists)
            </summary>
            <returns>Convergence point</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.NullPoints">
            <summary>
            Returns a list of so-called 'null-points', which are points, where the function result is equal to zero
            </summary>
            <returns>List of null-points</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.CrtitcalPoints">
            <summary>
            Returns a list of so-called 'critical points', which are points, where the function result is equal to zero or has a local/global maxima/minima
            </summary>
            <returns>List of critical points</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.LocalMaxima">
            <summary>
            Returns a list of so-called 'local maximas', which are points, where the function's derivate is equal to zero and the functions curvature is negative
            </summary>
            <returns>List of local maximas</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.LocalMinima">
            <summary>
            Returns a list of so-called 'local minimas', which are points, where the function's derivate is equal to zero and the functions curvature is positive
            </summary>
            <returns>List of local minimas</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.CalculateValues(System.Decimal,System.Decimal)">
            <summary>
            Calculates the 10000 input values in the given interval and returns their corresponding function values in an ordered array
            </summary>
            <param name="α">Lower (inclusive) interval limit</param>
            <param name="β">Upper (inclusive) interval limit</param>
            <returns>Function value array</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.CalculateValues(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Calculates the input values in the given interval using the given step and returns their corresponding function values in an ordered array
            </summary>
            <param name="α">Lower (inclusive) interval limit</param>
            <param name="β">Upper (inclusive) interval limit</param>
            <param name="step">Step</param>
            <returns>Function value array</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.LimitZero">
            <summary>
            Returns the function value when approched to 0 and returns the calculated value
            </summary>
            <returns>Approched function value in 0</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.Limit(System.Decimal)">
            <summary>
            Returns the function value when approched to the given limit and returns the calculated value
            </summary>
            <param name="x">Limit</param>
            <returns>Approched function value in the given limit</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.#ctor(System.Double)">
            <summary>
            Creates a new mathematical constant method without an inverse method
            </summary>
            <param name="constant">Constant value</param>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.#ctor(System.Decimal)">
            <summary>
            Creates a new mathematical constant method without an inverse method
            </summary>
            <param name="constant">Constant value</param>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.#ctor(System.String)">
            <summary>
            Creates a new constant mathematical method without an inverse method using the given polynomial function string
            </summary>
            <param name="poly">Polynomial function string</param>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.#ctor(CoreLib.Math.PolynomialParameter[])">
            <summary>
            Creates a new constant mathematical method without an inverse method using the given polynomial function parameters aXⁿ
            </summary>
            <param name="parameters">List of polynomial function parameters aXⁿ</param>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Equality(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Checks whether the two given mathematical constant functions are equal
            </summary>
            <param name="f1">First mathematical constant function</param>
            <param name="f2">Second mathematical constant function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Inequality(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Checks whether the two given mathematical constant functions are not equal
            </summary>
            <param name="f1">First mathematical constant function</param>
            <param name="f2">Second mathematical constant function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_LessThan(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Checks whether the first given mathematical constant functions is smaller than the second one
            </summary>
            <param name="f1">First mathematical constant function</param>
            <param name="f2">Second mathematical constant function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_GreaterThan(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Checks whether the first given mathematical constant functions is greater than the second one
            </summary>
            <param name="f1">First mathematical constant function</param>
            <param name="f2">Second mathematical constant function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_LessThanOrEqual(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Checks whether the first given mathematical constant functions is smaller or equal to the second one
            </summary>
            <param name="f1">First mathematical constant function</param>
            <param name="f2">Second mathematical constant function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_GreaterThanOrEqual(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Checks whether the first given mathematical constant functions is greater or equal to the second one
            </summary>
            <param name="f1">First mathematical constant function</param>
            <param name="f2">Second mathematical constant function</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_UnaryNegation(CoreLib.Math.ConstantMathFunction)">
            <summary>
            Returns the negative of the given function
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Increment(CoreLib.Math.ConstantMathFunction)">
            <summary>
            Adds the unit-function to the given one [commutative]
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Decrement(CoreLib.Math.ConstantMathFunction)">
            <summary>
            Subtracts the unit-function from the given one
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Addition(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Adds two functions together [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Subtraction(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Subtracts the second function from the first one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Multiply(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Multiplies the seond function with the first one [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Division(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Divides the first function by the second one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Modulus(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Performs a modulos-operation using the two given functions
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_ExclusiveOr(CoreLib.Math.ConstantMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Calaculates the potency of the two given functions and returns the operator result
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_BitwiseOr(CoreLib.Math.ConstantMathFunction,CoreLib.Math.MathFunction)">
            <summary>
            Calculates the limit of the first given function at the point given by the second function and returns the operation result
            </summary>
            <param name="func">First function</param>
            <param name="lim">Limit function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_BitwiseAnd(CoreLib.Math.MathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Contacenates two functions with another and returns the operation result
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_LeftShift(CoreLib.Math.ConstantMathFunction,System.Int32)">
            <summary>
            Contacinates the given function a given number of times and returns the operation result
            </summary>
            <param name="func">Function</param>
            <param name="iter">Iteration count</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Explicit(CoreLib.Math.ConstantMathFunction)~System.Decimal">
            <summary>
            Converts the given constant mathematical function to a constant decimal number
            </summary>
            <param name="func">Constant mathematical function</param>
            <returns></returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Explicit(CoreLib.Math.ConstantMathFunction)~System.Double">
            <summary>
            Converts the given constant mathematical function to a constant decimal number
            </summary>
            <param name="func">Constant mathematical function</param>
            <returns>Constant decimal number</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Implicit(System.Decimal)~CoreLib.Math.ConstantMathFunction">
            <summary>
            Converts the given constant decimal number to a constant mathematical function
            </summary>
            <param name="num">Constant decimal number</param>
            <returns>Constant mathematical function</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunction.op_Explicit(System.Double)~CoreLib.Math.ConstantMathFunction">
            <summary>
            Converts the given constant decimal number to a constant mathematical function
            </summary>
            <param name="num">Constant decimal number</param>
            <returns>Constant mathematical function</returns>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.HasInverse">
            <summary>
            Returns whether the function has a inverse function
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.IsConstant">
            <summary>
            Returns, whether the current function is a constant one
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.IsPolynomial">
            <summary>
            Returns, whether the current function is a (pure) polynomial function
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.IsContinuous">
            <summary>
            Returns, whether the current function is continuous
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.PolynomialDegree">
            <summary>
            Returns the polynomial degree of the current function
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.Item(System.Decimal[])">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunction.δx">
            <summary>
            Returns the derivative function of the current function instance with default precision
            </summary>
        </member>
        <member name="T:CoreLib.Math.PeriodicMathFunction">
            <summary>
            Represents a periodic mathematical function
            </summary>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.ConvergesNegativeInfinity">
            <summary>
            Checks, whether the current function converges when approched to -∞ and returns the convergence point (or null, if none exists)
            </summary>
            <returns>Convergence point</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.ConvergesPositiveInfinity">
            <summary>
            Checks, whether the current function converges when approched to ∞ and returns the convergence point (or null, if none exists)
            </summary>
            <returns>Convergence point</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.Limit(System.Decimal)">
            <summary>
            Returns the function value when approched to the given limit and returns the calculated value
            </summary>
            <param name="x">Limit</param>
            <returns>Approched function value in the given limit</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.#ctor(CoreLib.Math.MathFunction,System.Decimal)">
            <summary>
            Creates a new constant mathematical method without an inverse method using the given polynomial function parameters aXⁿ
            </summary>
            <param name="parameters">List of polynomial function parameters aXⁿ</param>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_UnaryNegation(CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Returns the negative of the given function
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Increment(CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Adds the unit-function to the given one [commutative]
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Decrement(CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Subtracts the unit-function from the given one
            </summary>
            <param name="func">Function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Addition(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Adds two functions together [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Addition(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Adds two functions together [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Addition(CoreLib.Math.ConstantMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Adds two functions together [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Subtraction(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Subtracts the second function from the first one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Subtraction(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Subtracts the second function from the first one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Subtraction(CoreLib.Math.ConstantMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Subtracts the second function from the first one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Multiply(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Multiplies the seond function with the first one [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Multiply(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Multiplies the seond function with the first one [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Multiply(CoreLib.Math.ConstantMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Multiplies the seond function with the first one [commutative]
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Division(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Divides the first function by the second one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Division(CoreLib.Math.ConstantMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Divides the first function by the second one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Division(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Divides the first function by the second one
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Modulus(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Performs a modulos-operation using the two given functions
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Modulus(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Performs a modulos-operation using the two given functions
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_Modulus(CoreLib.Math.ConstantMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Performs a modulos-operation using the two given functions
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_ExclusiveOr(CoreLib.Math.PeriodicMathFunction,CoreLib.Math.ConstantMathFunction)">
            <summary>
            Calaculates the potency of the two given functions and returns the operator result
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:CoreLib.Math.PeriodicMathFunction.op_ExclusiveOr(CoreLib.Math.ConstantMathFunction,CoreLib.Math.PeriodicMathFunction)">
            <summary>
            Calaculates the potency of the two given functions and returns the operator result
            </summary>
            <param name="ƒ1">First function</param>
            <param name="ƒ2">Second function</param>
            <returns>Operation result</returns>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.IsContinuous">
            <summary>
            Returns, whether the current function is continuous
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.IsConstant">
            <summary>
            Returns, whether the current function is a constant one
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.IsPolynomial">
            <summary>
            Returns, whether the current function is a (pure) polynomial function
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.PolynomialDegree">
            <summary>
            Returns the polynomial degree of the current function
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.δx">
            <summary>
            Returns the derivative function of the current function instance with default precision
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.IsPeriodic">
            <summary>
            Returns, whether the function is periodic or not
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.Period">
            <summary>
            Returns the function's period
            </summary>
        </member>
        <member name="P:CoreLib.Math.PeriodicMathFunction.Item(System.Decimal[])">
            <summary>
            Calculates the result based on the given input parameters
            </summary>
            <param name="args">Function arguments</param>
            <returns>Function result</returns>
        </member>
        <member name="T:CoreLib.Math.PolynomialParameter">
            <summary>
            Represents a polynomial function parameter aXⁿ
            </summary>
        </member>
        <member name="F:CoreLib.Math.PolynomialParameter.SIZE">
            <summary>
            The native size of the CoreLib::Math::PolynomialParameter-structure in bytes
            </summary>
        </member>
        <member name="F:CoreLib.Math.PolynomialParameter.POLYNOM_REGEX">
            <summary>
            Represents the regex pattern, which matches a polynomial parameter
            </summary>
        </member>
        <member name="F:CoreLib.Math.PolynomialParameter.COMPOSITEPOLYNOM_REGEX">
            <summary>
            Represents the regex pattern, which matches a polynomial parameter inside a polynomial term
            </summary>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.#ctor(System.Decimal)">
            <summary>
            Creates a new polynomial function parameter aX⁰ = a⋅1 = a
            </summary>
            <param name="fac">Factor a</param>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Creates a new polynomial function parameter aXⁿ
            </summary>
            <param name="fac">Factor a</param>
            <param name="exp">Exponent n</param>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.ToString">
            <summary>
            Returns the polynomial string representation of the current polynomial parameter
            </summary>
            <returns>Polynomial string representation</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.ToString(CoreLib.Math.PolynomialParameter[])">
            <summary>
            Returns the polynomial string representation of the given list of polynomial parameters
            </summary>
            <param name="params">List of polynomial parameters</param>
            <returns>Polynomial string representation</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.ToString(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Returns the polynomial string representation of the given list of polynomial parameters
            </summary>
            <param name="params">List of polynomial parameters</param>
            <returns>Polynomial string representation</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Parse(System.String)">
            <summary>
            Parses the given string to a polynomial parameter
            </summary>
            <param name="poly">Polynomial parameter string</param>
            <returns>Polynomial parameter</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.ParsePolynom(System.String)">
            <summary>
            Parses the given string to a list of polynomial parameters
            </summary>
            <param name="poly">Polynomial parameter string</param>
            <returns>List of polynomial parameters</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Implicit(System.String)~CoreLib.Math.PolynomialParameter">
            <summary>
            Parses the given string to a polynomial parameter
            </summary>
            <param name="str">string</param>
            <returns>Polynomial parameter</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Implicit(CoreLib.Math.PolynomialParameter)~System.Tuple{System.Decimal,System.Decimal}">
            <summary>
            Converts the given polynomial parameter to a tuple of decimal values
            </summary>
            <param name="p">Polynomial parameter</param>
            <returns>Tuple of decimal values</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Implicit(System.Tuple{System.Decimal,System.Decimal})~CoreLib.Math.PolynomialParameter">
            <summary>
            Converts the given tuple of decimal values to a polynomial parameter
            </summary>
            <param name="t">Tuple of decimal values</param>
            <returns>Polynomial parameter</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Implicit(CoreLib.Math.PolynomialParameter)~CoreLib.Math.PolynomialParameter[]">
            <summary>
            Converts the given polynomial parameter to a list of polynomial parameters
            </summary>
            <param name="t">Polynomial input parameter</param>
            <returns>List of polynomial parameters</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Implicit(System.Decimal)~CoreLib.Math.PolynomialParameter">
            <summary>
            Converts the decimal number to a polynomial parameter
            </summary>
            <param name="num">Decimal number</param>
            <returns>Polynomial parameter</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_UnaryNegation(CoreLib.Math.PolynomialParameter)">
            <summary>
            Negates the given polynomial parameter
            </summary>
            <param name="p">Polynomial parameter</param>
            <returns>Negated polynomial parameter</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Division(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter)">
            <summary>
            Divides the two given polynomial parameters
            </summary>
            <param name="p1">Polynomial parameter</param>
            <param name="p2">Polynomial parameter</param>
            <returns>Division result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Multiply(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter)">
            <summary>
            Multiplies two polynomial parameters
            </summary>
            <param name="p1">Polynomial parameter</param>
            <param name="p2">Polynomial parameter</param>
            <returns>Multiplication result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Addition(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter)">
            <summary>
            Adds the given polynomial parameters
            </summary>
            <param name="p1">Polynomial parameter</param>
            <param name="p2">Polynomial parameter</param>
            <returns>Addition result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Subtraction(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter)">
            <summary>
            Subtracts the given polynomial parameters
            </summary>
            <param name="p1">Polynomial parameter</param>
            <param name="p2">Polynomial parameter</param>
            <returns>Subtraction result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Addition(CoreLib.Math.PolynomialParameter[],CoreLib.Math.PolynomialParameter)">
            <summary>
            Adds the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns></returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Subtraction(CoreLib.Math.PolynomialParameter[],CoreLib.Math.PolynomialParameter)">
            <summary>
            Subtracts the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns>Subtraction result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Addition(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter[])">
            <summary>
            Adds the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns>Addition result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Subtraction(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter[])">
            <summary>
            Subtracts the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns>Subtraction result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Division(CoreLib.Math.PolynomialParameter[],CoreLib.Math.PolynomialParameter)">
            <summary>
            Divides the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns>Division result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Multiply(CoreLib.Math.PolynomialParameter,CoreLib.Math.PolynomialParameter[])">
            <summary>
            Multiplies the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns>Multiplication result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_Multiply(CoreLib.Math.PolynomialParameter[],CoreLib.Math.PolynomialParameter)">
            <summary>
            Multiplies the given polynomial parameters
            </summary>
            <param name="pp">Polynomial parameters</param>
            <param name="p">Polynomial parameter</param>
            <returns>Multiplication result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_ExclusiveOr(CoreLib.Math.PolynomialParameter,System.Decimal)">
            <summary>
            Performs an polynomial exponential operation
            </summary>
            <param name="p1">Polynomial parameter</param>
            <param name="m">Decimal number</param>
            <returns>Exponential result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_LeftShift(CoreLib.Math.PolynomialParameter,System.Int32)">
            <summary>
            Calcutlates and reurns the given polynomial parameter's n-derivative
            </summary>
            <param name="p">Polynomial parameter</param>
            <param name="n">n</param>
            <returns>Polynomial derivative</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.op_RightShift(CoreLib.Math.PolynomialParameter,System.Int32)">
            <summary>
            Calcutlates and reurns the given polynomial parameter's n-integral
            </summary>
            <param name="p">Polynomial parameter</param>
            <param name="n">n</param>
            <returns>Polynomial integral</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Union(CoreLib.Math.PolynomialParameter[])">
            <summary>
            Reduces the given polynomial parameters to the shortest possible form and returns the unified result
            </summary>
            <param name="pp">Polynomial input parameters</param>
            <returns>Unified polynomial parameters</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Union(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},CoreLib.Math.PolynomialParameter[])">
            <summary>
            Reduces the given polynomial parameters to the shortest possible form and returns the unified result
            </summary>
            <param name="ps">Polynomial input parameters</param>
            <param name="pp">Polynomial input parameters</param>
            <returns>Unified polynomial parameters</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter}},CoreLib.Math.PolynomialParameter[])">
            <summary>
            Reduces the given polynomial parameters to the shortest possible form and returns the unified result
            </summary>
            <param name="ps">Polynomial input parameters</param>
            <param name="pp">Polynomial input parameters</param>
            <returns>Unified polynomial parameters</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Union(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter}[])">
            <summary>
            Reduces the given polynomial parameters to the shortest possible form and returns the unified result
            </summary>
            <param name="ps">Polynomial input parameters</param>
            <returns>Unified polynomial parameters</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Add(CoreLib.Math.PolynomialParameter[])">
            <summary>
            Adds the given polynomial parameters to the shortest possible form and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Unified polynomial addition result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Add(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Adds the given polynomial parameters to the shortest possible form and returns the unified result
            </summary>
            <param name="p1">Polynomial input parameters</param>
            <param name="p2">Polynomial input parameters</param>
            <returns>Unified polynomial addition result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Add(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Decimal)">
            <summary>
            Adds the given polynomial parameters to a given decimal constant number and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <param name="num">Decimal constant number</param>
            <returns>Unified polynomial addition result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Subtract(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Decimal)">
            <summary>
            Subtracts the given decimal constant number from the given polynomial parameters and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <param name="num">Decimal constant number</param>
            <returns>Unified polynomial subtraction result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Subtract(System.Decimal,System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Subtracts the given polynomial parameters from a given decimal constant number and returns the unified result
            </summary>
            <param name="num">Decimal constant number</param>
            <param name="p">Polynomial input parameters</param>
            <returns>Unified polynomial subtraction result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Subtract(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Subtracts the given polynomial parameters from each other and returns the unified result
            </summary>
            <param name="p1">Polynomial input parameters</param>
            <param name="p2">Polynomial input parameters</param>
            <returns>Unified polynomial subtraction result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Negate(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Negates the given polynomial parameters and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Unified polynomial negation result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Derivate(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Calculates the derivative of the given polynomial parameters and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Unified polynomial derivative</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Integral(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Calculates the integral of the given polynomial parameters and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Unified polynomial integral</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Multiply(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Decimal)">
            <summary>
            Multiplies the given polynomial parameters with a given decimal constant number and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <param name="num">Decimal constant number</param>
            <returns>Unified polynomial multiplication result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Multiply(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Multiplies the given polynomial parameters with each other and returns the unified result
            </summary>
            <param name="p1">Polynomial input parameters</param>
            <param name="p2">Polynomial input parameters</param>
            <returns>Unified polynomial multiplication result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Divide(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Decimal)">
            <summary>
            Divides the given polynomial parameters by a given decimal constant number and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters</param>
            <param name="num">Decimal constant number</param>
            <returns>Unified polynomial division result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Power(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.UInt32)">
            <summary>
            Calculates the power of the given polynomial parameters using a given decimal constant exponent and returns the unified result
            </summary>
            <param name="p">Polynomial input parameters as base</param>
            <param name="num">Decimal constant exponent</param>
            <returns>Unified polynomial division result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.HasDegree(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Decimal)">
            <summary>
            Checks, whether the given polynomial input parameters contain the given polynomial degree
            </summary>
            <param name="p">Polynomial input parameters</param>
            <param name="deg">Polynomial degree</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Degree(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Returns the polynomial degree of the given polynomial parameters
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Polynomial dgree</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.MDegree(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Returns the polynomial minimal degree of the given polynomial parameters
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Polynomial minimal dgree</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Continuous(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Returns, whether the given polynomial input parameters are continuous
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Divide(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter}@,System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter}@)">
            <summary>
            Performs a polynomial division using the given polynomial parameters and returns the unified result
            </summary>
            <param name="p1">Polynomial input parameters</param>
            <param name="p2">Polynomial input parameters</param>
            <param name="res">Unified polynomial division result</param>
            <param name="rem">Unified polynomial division remainder</param>
            <returns>Flag, which indicates, whether the division was successful</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.Constant(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter})">
            <summary>
            Returns wether the given polynomial parameters represent a constant function
            </summary>
            <param name="p">Polynomial input parameters</param>
            <returns>Result</returns>
        </member>
        <member name="M:CoreLib.Math.PolynomialParameter.MatchesDegree(System.Collections.Generic.IEnumerable{CoreLib.Math.PolynomialParameter},System.Decimal[])">
            <summary>
            Checks whether the given polynomial parameters match the given polynomial degrees
            </summary>
            <param name="p">Polynomial input parameters</param>
            <param name="degs">Polynomial degrees</param>
            <returns>Check result</returns>
        </member>
        <member name="P:CoreLib.Math.PolynomialParameter.Zero">
            <summary>
            Returns the polynomial parameter (0, 0) which represents 0X⁰ = 0
            </summary>
        </member>
        <member name="P:CoreLib.Math.PolynomialParameter.One">
            <summary>
            Returns the polynomial parameter (1, 0) which represents 1X⁰ = 1
            </summary>
        </member>
        <member name="P:CoreLib.Math.PolynomialParameter.X">
            <summary>
            Returns the polynomial parameter (1, 1) which represents 1X = 1
            </summary>
        </member>
        <member name="P:CoreLib.Math.PolynomialParameter.Factor">
            <summary>
            The factor a, which belongs to the current polynomial function parameter aXⁿ
            </summary>
        </member>
        <member name="P:CoreLib.Math.PolynomialParameter.Exponent">
            <summary>
            The exponent n, which belongs to the current polynomial function parameter aXⁿ
            </summary>
        </member>
        <member name="T:CoreLib.Math.MathFunctionCache">
            <summary>
            Represents a calculation cache to improve the performance of mathematical functions
            </summary>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.Calculate(System.Decimal)">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.Calculate(System.Decimal[])">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.Clear">
            <summary>
            Clears the function cache
            </summary>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.Dispose">
            <summary>
            Disposes the current object and releases all underlying resources
            </summary>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.#ctor(CoreLib.Math.MathFunction)">
            <summary>
            Creates a new function cache for the given mathematical function
            </summary>
            <param name="func">Mathematical function</param>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.#ctor(CoreLib.Math.MathFunction,System.Int32)">
            <summary>
            Creates a new function cache for the given mathematical function
            </summary>
            <param name="func">Mathematical function</param>
            <param name="max">Maximum cache size (in bytes)</param>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.op_Implicit(CoreLib.Math.MathFunction)~CoreLib.Math.MathFunctionCache">
            <summary>
            Converts the given mathematical function to its representative cache
            </summary>
            <param name="func">Mathematical function</param>
            <returns>Function cache</returns>
        </member>
        <member name="M:CoreLib.Math.MathFunctionCache.op_Implicit(CoreLib.Math.MathFunctionCache)~CoreLib.Math.MathFunction">
            <summary>
            Converts the given mathematical function cache to its representative function
            </summary>
            <param name="cache">Function cache</param>
            <returns>Mathematical function</returns>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.IsFull">
            <summary>
            Returns, whether the cache is full
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.IsNearlyFull">
            <summary>
            Returns, whether the cache is nearly full
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.MaximumSize">
            <summary>
            Retusns or sets the cache's maximum size in bytes
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.CurrentSize">
            <summary>
            Returns the cache's current size in bytes
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.UsedCache">
            <summary>
            Returns the used percentage of the current cache;
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.Function">
            <summary>
            Returns the underlying mathematical function
            </summary>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.Item(System.Decimal)">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="P:CoreLib.Math.MathFunctionCache.Item(System.Decimal[])">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="T:CoreLib.Math.ConstantMathFunctionCache">
            <summary>
            Represents a calculation cache to improve the performance of constant mathematical functions
            </summary>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunctionCache.Calculate(System.Decimal)">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunctionCache.Calculate(System.Decimal[])">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunctionCache.#ctor(CoreLib.Math.ConstantMathFunction)">
            <summary>
            Creates a new function cache for the given mathematical function
            </summary>
            <param name="func">Mathematical function</param>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunctionCache.op_Implicit(CoreLib.Math.ConstantMathFunction)~CoreLib.Math.ConstantMathFunctionCache">
            <summary>
            Converts the given mathematical function to its representative cache
            </summary>
            <param name="func">Mathematical function</param>
            <returns>Function cache</returns>
        </member>
        <member name="M:CoreLib.Math.ConstantMathFunctionCache.op_Implicit(CoreLib.Math.ConstantMathFunctionCache)~CoreLib.Math.ConstantMathFunction">
            <summary>
            Converts the given mathematical function cache to its representative function
            </summary>
            <param name="cache">Function cache</param>
            <returns>Mathematical function</returns>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.IsFull">
            <summary>
            Returns, whether the cache is full
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.IsNearlyFull">
            <summary>
            Returns, whether the cache is nearly full
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.MaximumSize">
            <summary>
            Retusns or sets the cache's maximum size in bytes
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.CurrentSize">
            <summary>
            Returns the cache's current size in bytes
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.UsedCache">
            <summary>
            Returns the used percentage of the current cache;
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.Function">
            <summary>
            Returns the underlying mathematical function
            </summary>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.Item(System.Decimal)">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="P:CoreLib.Math.ConstantMathFunctionCache.Item(System.Decimal[])">
            <summary>
            Calculates the function value at the given input value - or fetches the cached value
            </summary>
            <param name="value">Input value</param>
            <returns>Function/Cached value</returns>
        </member>
        <member name="T:CoreLib.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.CoreAudioApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.hwd_deficon">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Icon ähnlich wie (Symbol).
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.U6656_Logo">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.uac">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:CoreLib.Properties.Resources.uclib_taglibimpl">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.AssemblyMethods.PreventDecompilation(System.String)">
            <summary>
            Changes the binary PE-header of the given file to prevent a .NET decompilation
            </summary>
            <param name="file">Path to PE-file</param>
            <exception cref="!:System.FileNotFoundException">Thrown when the given file could not be found</exception>
            <exception cref="T:System.ArgumentException"> Thrown when the file size is lower than 225 bytes</exception>
        </member>
        <member name="T:CoreLib.Runtime.CommonLanguageRuntime">
            <summary>
            Manages all methods using Core CLR methods
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.CommonLanguageRuntime.operators">
            <summary>
            A list of CLR operators and their corresponding C# representation
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetHandle``1">
            <summary>
            Returns the CLR object handle of a new class object [unsafe]
            </summary>
            <typeparam name="T">The generic class object type</typeparam>
            <returns>CLR object handle</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.IsPInvoke(System.Reflection.MethodInfo)">
            <summary>
            Returns, wether the given method makes use of the P/Invoke-interface
            </summary>
            <param name="nfo">Method information</param>
            <returns>Check result</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.PassedByReference(System.Type)">
            <summary>
            Returns, whether the given type is passed by reference (independant, whether it is a reference type or not)
            </summary>
            <param name="T">Type</param>
            <returns>Verification result</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetHandle(System.Object)">
            <summary>
            Returns the CLR object handle of the given class object
            </summary>
            <param name="ins">Class object instance</param>
            <returns>CLR object handle</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetCPPSignature(System.Reflection.ConstructorInfo)">
            <summary>
            Returns the C++/CLI-Signature of the given method information
            </summary>
            <param name="nfo">Method information</param>
            <returns>C++/CLI-Signature</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetCPPSignature(System.Reflection.MethodInfo)">
            <summary>
            Returns the C++/CLI-Signature of the given method information
            </summary>
            <param name="nfo">Method information</param>
            <returns>C++/CLI-Signature</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetCPPSignature(System.Reflection.MethodBase)">
            <summary>
            Returns the C++/CLI-Signature of the given method information
            </summary>
            <param name="nfo">Method information</param>
            <returns>C++/CLI-Signature</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetCPPSignature(System.Delegate)">
            <summary>
            Returns the C++/CLI-Signature of the given method information
            </summary>
            <param name="nfo">Method information</param>
            <returns>C++/CLI-Signature</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetCPPTypeString``1">
            <summary>
            Returns the C++ string representation of the given type
            </summary>
            <typeparam name="T">Generic object type</typeparam>
            <returns>C++ string representation</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetCPPTypeString(System.Type)">
            <summary>
            Returns the C++ string representation of the given type
            </summary>
            <param name="t">Type</param>
            <returns>C++ string representation</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetTypeValueString``1(``0)">
            <summary>
            Returns the string representation (including literals) of the given object
            </summary>
            <typeparam name="T">Generic object type</typeparam>
            <param name="val">Object instance</param>
            <returns>String representation including literals</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetTypeValueString(System.Object)">
            <summary>
            Returns the string representation (including literals) of the given object
            </summary>
            <param name="val">Object instance</param>
            <returns>String representation including literals</returns>
        </member>
        <member name="M:CoreLib.Runtime.CommonLanguageRuntime.GetFSTypeString(System.Type)">
            <summary>
            Returns the F# string representation of the given type
            </summary>
            <param name="t">Type</param>
            <returns>F# string representation</returns>
        </member>
        <member name="T:CoreLib.Runtime.ELFHeader">
            <summary>
            Manages all functions concerning ELF Headers
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELFHeader.EI_MAG">
            <summary>
            The ELF magic number
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELFHeader.EI_NIDENT">
            <summary>
            The E_Ident header size
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELFHeader.E_PHDR32_SZ">
            <summary>
            The Elf32_PHdr header size
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELFHeader.E_PHDR64_SZ">
            <summary>
            The Elf64_PHdr header size
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.IELF_HEADER">
            <summary>
            An abstract ELF Header interface
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.Ident">
            <summary>
            File interpretation header
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.Type">
            <summary>
            Object file type
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.Machine">
            <summary>
            Target machine architecture type
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.Version">
            <summary>
            Object file version
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.Flags">
            <summary>
            Processor-specific machine file flags
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.HeaderSize">
            <summary>
            ELF Header size
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.TableEntrySize">
            <summary>
            Size of a program header table entry (in bytes)
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.TableEntryCount">
            <summary>
            Number of program header table entries
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.SectionEntrySize">
            <summary>
            Size of a section header table entry (in bytes)
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.SectionEntryCount">
            <summary>
            Number of section header table entries
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.SectionTableStringIndex">
            <summary>
            Index of the section header table entry, which contains the section name string table
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.TableHeaderSize">
            <summary>
            Total program table header size 
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.IELF_HEADER.SectionHeaderSize">
            <summary>
            Total section table header size 
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.ELF_HEADER32">
            <summary>
            Represents a 32-Bit ELF Header
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_ident">
            <summary>
            File interpretation header
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_type">
            <summary>
            Object file type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_machine">
            <summary>
            Target machine architecture type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_version">
            <summary>
            Object file version
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_entry">
            <summary>
            The program file's entry point (virtual) address
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_phoff">
            <summary>
            The program file's program header table offset (int bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_shoff">
            <summary>
            The program file's section header table offset (int bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_flags">
            <summary>
            Processor-specific machine file flags
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_ehsize">
            <summary>
            ELF Header size
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_phentsize">
            <summary>
            Size of a program header table entry (in bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_phnum">
            <summary>
            Number of program header table entries
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_shentsize">
            <summary>
            Size of a section header table entry (in bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_shnum">
            <summary>
            Number of section header table entries
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER32.e_shstrndx">
            <summary>
            Index of the section header table entry, which contains the section name string table
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.Ident">
            <summary>
            File interpretation header
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.Type">
            <summary>
            Object file type
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.Machine">
            <summary>
            Target machine architecture type
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.Version">
            <summary>
            Object file version
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.Flags">
            <summary>
            Processor-specific machine file flags
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.HeaderSize">
            <summary>
            ELF Header size
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.TableEntrySize">
            <summary>
            Size of a program header table entry (in bytes)
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.TableEntryCount">
            <summary>
            Number of program header table entries
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.SectionEntrySize">
            <summary>
            Size of a section header table entry (in bytes)
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.SectionEntryCount">
            <summary>
            Number of section header table entries
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.SectionTableStringIndex">
            <summary>
            Index of the section header table entry, which contains the section name string table
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.TableHeaderSize">
            <summary>
            Total program table header size 
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER32.SectionHeaderSize">
            <summary>
            Total section table header size 
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.ELF_HEADER64">
            <summary>
            Represents a 64-Bit ELF Header
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_ident">
            <summary>
            File interpretation header
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_type">
            <summary>
            Object file type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_machine">
            <summary>
            Target machine architecture type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_version">
            <summary>
            Object file version
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_entry">
            <summary>
            The program file's entry point (virtual) address
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_phoff">
            <summary>
            The program file's program header table offset (int bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_shoff">
            <summary>
            The program file's section header table offset (int bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_flags">
            <summary>
            Processor-specific machine file flags
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_ehsize">
            <summary>
            ELF Header size
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_phentsize">
            <summary>
            Size of a program header table entry (in bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_phnum">
            <summary>
            Number of program header table entries
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_shentsize">
            <summary>
            Size of a section header table entry (in bytes)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_shnum">
            <summary>
            Number of section header table entries
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.ELF_HEADER64.e_shstrndx">
            <summary>
            Index of the section header table entry, which contains the section name string table
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.Ident">
            <summary>
            File interpretation header
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.Type">
            <summary>
            Object file type
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.Machine">
            <summary>
            Target machine architecture type
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.Version">
            <summary>
            Object file version
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.Flags">
            <summary>
            Processor-specific machine file flags
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.HeaderSize">
            <summary>
            ELF Header size
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.TableEntrySize">
            <summary>
            Size of a program header table entry (in bytes)
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.TableEntryCount">
            <summary>
            Number of program header table entries
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.SectionEntrySize">
            <summary>
            Size of a section header table entry (in bytes)
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.SectionEntryCount">
            <summary>
            Number of section header table entries
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.SectionTableStringIndex">
            <summary>
            Index of the section header table entry, which contains the section name string table
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.TableHeaderSize">
            <summary>
            Total program table header size 
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.ELF_HEADER64.SectionHeaderSize">
            <summary>
            Total section table header size 
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.E_IDENT_HEADER">
            <summary>
            File interpretation header
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.ei_mag">
            <summary>
            The magic number 7fh 45h 4ch 46h
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.ei_class">
            <summary>
            Binary architecture
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.ei_data">
            <summary>
            Binary endianess
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.ei_version">
            <summary>
            ELF specification version number
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.ei_osabi">
            <summary>
            Target operating system and ABI
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.ei_abiversion">
            <summary>
            Target ABI version
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_IDENT_HEADER.__reserved__">
            <summary>
            &lt; reserved &gt;
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.E_IDENT_HEADER.Is64Bit">
            <summary>
            Returns, whether the parent header is a 64Bit one
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.E_IDENT_HEADER.MagicNumber">
            <summary>
            The magic number 7fh 45h 4ch 46h
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.E_IDENT_HEADER.Size">
            <summary>
            Returns the current header's size
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.ELF32_PHDR">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.ELF64_PHDR">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.E_MACHINE">
            <summary>
            Target machine architecture type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.NotDefined">
            <summary>
            An unknown machine
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "F:CoreLib.Runtime.E_MACHINE.M32" ignoriert -->
        <member name="F:CoreLib.Runtime.E_MACHINE.SPARC">
            <summary>
            SPARC
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.x86">
            <summary>
            Intel i80386
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M68K">
            <summary>
            Motorola 68000
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M88K">
            <summary>
            Motorola 88000
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.x860">
            <summary>
            Intel i80860
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.MIPS">
            <summary>
            MIPS I Architecture
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.S370">
            <summary>
            IBM System/370 Processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.MIPS_RS3_LE">
            <summary>
            MIPS RS3000 Little-endian
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.PARISC">
            <summary>
            Hewlett-Packard PA-RISC
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.VPP500">
            <summary>
            Fujitsu VPP500
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.SPARC32Plus">
            <summary>
            Enhanced instruction set SPARC
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.i960">
            <summary>
            Intel i80960
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.PowerPC">
            <summary>
            PowerPC 32Bit
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.PowerPC64">
            <summary>
            PowerPC 64Bit
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.V800">
            <summary>
            NEC V800
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.FR20">
            <summary>
            Fujitsu FR20
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.RH32">
            <summary>
            TRW RH-32
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.RCE">
            <summary>
            Motorola RCE
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ARM">
            <summary>
            Advanced RISC Machines ARM
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ALPHA">
            <summary>
            Digital Alpha
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.SuperH">
            <summary>
            Hitachi SuperH
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.SPARCv9">
            <summary>
            SPARC Version 9
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.Tricore">
            <summary>
            Siemens Tricore embedded processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ARC">
            <summary>
            Argonaut RISC Core, Argonaut Technologies Inc.
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.H8_300">
            <summary>
            Hitachi H8/300
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.H8_300H">
            <summary>
            Hitachi H8/300H
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.H8S">
            <summary>
            Hitachi H8S
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.H8_500">
            <summary>
            Hitachi H8/500
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.IA_64">
            <summary>
            Intel IA-64 processor architecture
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.MIPS_X">
            <summary>
            Stanford MIPS-X
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ColdFire">
            <summary>
            Motorola ColdFire
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M68HC12">
            <summary>
            Motorola M68HC12
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.MMA">
            <summary>
            Fujitsu MMA Multimedia Accelerator
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.PCP">
            <summary>
            Siemens PCP
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.NCPU">
            <summary>
            Sony nCPU embedded RISC processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.NDR1">
            <summary>
            Denso NDR1 microprocessor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.StarCore">
            <summary>
            Motorola Star*Core processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ME16">
            <summary>
            Toyota ME16 processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ST100">
            <summary>
            STMicroelectronics ST100 processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.TinyJ">
            <summary>
            Advanced Logic Corp. TinyJ embedded processor family
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.x86_64">
            <summary>
            Intel i686 architecture
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.FX66">
            <summary>
            Siemens FX66 microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ST9Plus">
            <summary>
            STMicroelectronics ST9+ 8/16 bit microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ST7">
            <summary>
            STMicroelectronics ST7 8-bit microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M68HC16">
            <summary>
            Motorola MC68HC16 Microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M68HC11">
            <summary>
            Motorola MC68HC11 Microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M68HC08">
            <summary>
            Motorola MC68HC08 Microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.M68HC05">
            <summary>
            Motorola MC68HC05 Microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.SVX">
            <summary>
            Silicon Graphics SVx
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ST19">
            <summary>
            STMicroelectronics ST19 8-bit microcontroller
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.VAX">
            <summary>
            Digital VAX
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.CRIS">
            <summary>
            Axis Communications 32-bit embedded processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.Javelin">
            <summary>
            Infineon Technologies 32-bit embedded processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.Firepath">
            <summary>
            Element14 64-bit DSP Processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.ZSP">
            <summary>
            LSI Logic 16-bit DSP Processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.MMIX">
            <summary>
            Donald Knuth's educational 64-bit processor
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.HUANY">
            <summary>
            Harvard University machine-independent object files
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.Prism">
            <summary>
            SiTera Prism
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_MACHINE.AArch64">
            <summary>
            AArch 64-bit architecture
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.EI_ABI">
            <summary>
            Target operating system and ABI
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.SystemV">
            <summary>
            UNIX System V
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.HP_UX">
            <summary>
            Hewlett-Packard UNIX system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.NetBSD">
            <summary>
            NetBSD system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.Linux">
            <summary>
            Linux system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.Solaris">
            <summary>
            Solaris system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.AIX">
            <summary>
            IBM Advanced Interactive eXecutive UNIX system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.IRIX">
            <summary>
            Silicon Graphics IRIX system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.FreeBSD">
            <summary>
            FreeBSD system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.OpenBSD">
            <summary>
            OpenBSD system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.OpenVMS">
            <summary>
            OpenVMS system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.NSK_OS">
            <summary>
            NonStop Kernel operating system
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.AROS">
            <summary>
            AR-OS Research Operating System
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.Fenix_OS">
            <summary>
            GNU Fenix Project
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.CloudABI">
            <summary>
            Cloud Application Intercafe Binary
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_ABI.Sortix">
            <summary>
            Sortix operating system
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.E_TYPE">
            <summary>
            Object file type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_TYPE.NONE">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_TYPE.Relocatable">
            <summary>
            A relocatable file
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_TYPE.Executable">
            <summary>
            An executable file
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_TYPE.Shared">
            <summary>
            A shared file
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.E_TYPE.Core">
            <summary>
            A core file
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.EI_CLASS">
            <summary>
            Binary architecture type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_CLASS.NONE">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_CLASS.CLASS32">
            <summary>
            32Bit
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_CLASS.CLASS64">
            <summary>
            64Bit
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.EI_DATA">
            <summary>
            Binary endianness type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_DATA.NONE">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_DATA.LittleEndian">
            <summary>
            Little endian (LSB)
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.EI_DATA.BigEndian">
            <summary>
            Big endian (MSB)
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.BenchmarkAttribute">
            <summary>
            The attribute to use to mark methods as being the targets of benchmarking.
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.Performance">
            <summary>
            Contains basic methods regarding application performance
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.Performance.NOOP">
            <summary>
            A empty NOOP-block
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.Performance.NOOP(System.Object)">
            <summary>
            A empty NOOP-block [used as extension method]
            </summary>
            <param name="null">Any object value (null is preferred)</param>
        </member>
        <member name="M:CoreLib.Runtime.Performance.WarmUp(System.Reflection.MethodInfo)">
            <summary>
            "Warms up" (pre-JITs) the given method for later performance improvements
            </summary>
            <param name="nfo">Reflected method information</param>
        </member>
        <member name="M:CoreLib.Runtime.Performance.WarmUp(System.String)">
            <summary>
            "Warms up" (pre-JITs) the given method for later performance improvements
            </summary>
            <param name="methodName">Method name</param>
        </member>
        <member name="M:CoreLib.Runtime.Performance.WarmUp(System.Reflection.Assembly,System.String)">
            <summary>
            "Warms up" (pre-JITs) the given method for later performance improvements
            </summary>
            <param name="asm">Assembly, which contains the method</param>
            <param name="methodName">Method name</param>
        </member>
        <member name="M:CoreLib.Runtime.Performance.FindMethodByName(System.String)">
            <summary>
            Finds a method by its given name and returns its reflected infromation
            </summary>
            <param name="methodName">Method name</param>
            <returns>Reflected method infromation</returns>
        </member>
        <member name="M:CoreLib.Runtime.Performance.MeasureTime(System.Action)">
            <summary>
            Measures the average function execution time in µs (1.000.000 iterations without warmup)
            </summary>
            <param name="func">Function to be executed</param>
            <returns>Execution duration [in µs]</returns>
        </member>
        <member name="M:CoreLib.Runtime.Performance.MeasureTime(System.Action,System.Int32)">
            <summary>
            Measures the average function execution time in µs (without warmup)
            </summary>
            <param name="func">Function to be executed</param>
            <param name="iterations">Iteration count</param>
            <returns>Execution duration [in µs]</returns>
        </member>
        <member name="M:CoreLib.Runtime.Performance.MeasureTime(System.Action,System.Int32,System.Boolean)">
            <summary>
            Measures the average function execution time in µs
            </summary>
            <param name="func">Function to be executed</param>
            <param name="iterations">Iteration count</param>
            <param name="warmup">Should the function warmup before measurement?</param>
            <returns>Execution duration [in µs]</returns>
        </member>
        <member name="M:CoreLib.Runtime.Performance.GetMethods(System.Type,System.Tuple{System.String,System.Type[]}[])">
            <summary>
            Returns all methods contained in the given base type by the given signatures
            </summary>
            <param name="base">Base type</param>
            <param name="signatures">Method signatures (consisting of its name and the parameter array)</param>
            <returns>Method information which are matching the given criteria</returns>
        </member>
        <member name="M:CoreLib.Runtime.Performance.GetMethods(System.Type,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Type[]}})">
            <summary>
            Returns all methods contained in the given base type by the given signatures
            </summary>
            <param name="base">Base type</param>
            <param name="signatures">Method signatures (consisting of its name and the parameter array)</param>
            <returns>Method information which are matching the given criteria</returns>
        </member>
        <member name="M:CoreLib.Runtime.Performance.BenchmarkAll">
            <summary>
            Benchmarks all public static methods in the calling assembly marked with the `CoreLib::Runtime::BenchmarkAttribute`-Attribute and prints the
            benchmark result to the standard console output stream
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.Performance.BenchmarkAll(System.Type[])">
            <summary>
            Benchmarks all public static methods in the given types marked with the `CoreLib::Runtime::BenchmarkAttribute`-Attribute and prints the
            benchmark result to the standard console output stream
            </summary>
            <param name="tps">Type list</param>
        </member>
        <member name="M:CoreLib.Runtime.Performance.BenchmarkAll(System.IO.Stream)">
            <summary>
            Benchmarks all public static methods in the calling assembly marked with the `CoreLib::Runtime::BenchmarkAttribute`-Attribute and prints the
            benchmark result into given stream stream
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.Performance.BenchmarkAll(System.IO.Stream,System.Type[])">
            <summary>
            Benchmarks all public static methods in the given types marked with the `CoreLib::Runtime::BenchmarkAttribute`-Attribute and prints the
            benchmark result into given stream stream
            </summary>
            <param name="tps">Type list</param>
        </member>
        <member name="T:CoreLib.sr">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.sr.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.sr.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;отказати ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;лозинка: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die унесите Виндовс лозинку да бисте потврдили текуће операције ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die грешка ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;ок ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die верификација лозинка ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Лозинка је неважећи. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.sr.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die SR ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.it">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.it.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.it.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Cancellare ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Password: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Inserisci la password di Windows per confermare l&apos;operazione in corso ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Errore ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;OK ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Verifica delle password ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die La password è valida. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.it.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die IT ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.es">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.es.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.es.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Rezignu ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Pasvorto: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Bonvolu tajpi vian Vindozo pasvorton por konfirmi la nunan operacion ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Eraro ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;OK ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Pasvorto verificación ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die La pasvorto estas nevalida. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.es.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die ES ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.fr">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.fr.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.fr.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Annuler ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;Mot de passe: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Entrer votre mot de passe Windows pour confirmer l&apos;opération en cours. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Erreur ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;OK ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Password checker ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Le mot de passe est invalide. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.fr.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die FR ähnelt.
            </summary>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Cot(System.Double)">
            <summary>
            Returns the cotangent (cot) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Cotangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sec(System.Double)">
            <summary>
            Returns the secant (sec) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Secant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Csc(System.Double)">
            <summary>
            Returns the cosecant (csc) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Cosecant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Coth(System.Double)">
            <summary>
            Returns the cotangent hyperbolicus (coth) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Cotangent hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sech(System.Double)">
            <summary>
            Returns the secant hyperbolicus (sech) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Secant hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Csch(System.Double)">
            <summary>
            Returns the cosecant hyperbolicus (csch) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Cosecant hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acot(System.Double)">
            <summary>
            Returns the inverse cotangent (arccot) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse cotangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asec(System.Double)">
            <summary>
            Returns the inverse secant (arcsec) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse secant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acsc(System.Double)">
            <summary>
            Returns the inverse cosecant (arccsc) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse cosecant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asinh(System.Double)">
            <summary>
            Returns the inverse sine hyperbolicus (arcsinh) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse sine hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acosh(System.Double)">
            <summary>
            Returns the inverse cosine hyperbolicus (arccosh) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse cosine hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Atanh(System.Double)">
            <summary>
            Returns the inverse tangent hyperbolicus (arctanh) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse tangent hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acoth(System.Double)">
            <summary>
            Returns the inverse cotangent hyperbolicus (arccoth) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse cotangent hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asech(System.Double)">
            <summary>
            Returns the inverse secant hyperbolicus (arcsech) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse secant hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acsch(System.Double)">
            <summary>
            Returns the inverse cosecant hyperbolicus (arcsech) of the given number
            </summary>
            <param name="num">Number</param>
            <returns>Inverse cosecant hyperbolicus</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sin(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Sine (sin) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Sine</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Cos(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Cosine (cos) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Cosine</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Tan(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Tangent (tan) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Tangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Cot(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Cotangent (cot) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Cotangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sec(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Secant (sec) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Secant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Csc(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Cosecant (csc) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Cosecant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asin(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Arcus Sine (asin) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Arcus Sine</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acos(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Arcus Cosine (acos) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Arcus Cosine</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Atan(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Arcus Tangent (atan) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Arcus Tangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acot(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Arcus Cotangent (acot) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Arcus Cotangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asec(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Arcus Secant (asec) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Arcus Secant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acsc(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Arcus Cosecant (acsc) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Arcus Cosecant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sinh(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Sine (sinh) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Sine</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Cosh(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosine (cosh) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Cosine</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Tanh(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Tangent (tanh) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Tangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Coth(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Cotangent (coth) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Cotangent</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sech(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Secant (sech) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Secant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Csch(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosecant (csch) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Cosecant</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asinh(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Area Sine (asinh) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Area</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acosh(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Area Cosine (acosh) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Area</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Atanh(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Area Tangent (atanh) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Area</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acoth(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Area Cotangent (acoth) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Area</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Asech(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Area Secant (asech) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Area</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Acsch(CoreLib.Math.Complex)">
            <summary>
            Trigonometric Hyperbolic Area Cosecant (acsch) of the given <c>Complex</c>.
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Trigonometric Hyperbolic Area</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Exp(CoreLib.Math.Complex)">
            <summary>
            Returns the exponential of the given <c>Complex</c>
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Exponential</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Log(CoreLib.Math.Complex)">
            <summary>
            Natural Logarithm of the given <c>Complex</c> (Base e).
            </summary>
            <param name="cpx">Complex number</param>
            <returns> Natural Logarithm</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Pow(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Raises tthe given <c>Complex</c> base with the given exponent
            </summary>
            <param name="base">Complex base</param>
            <param name="exponent">Complex exponent</param>
            <returns>Power</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Root(CoreLib.Math.Complex,CoreLib.Math.Complex)">
            <summary>
            Calculates the base of the given <c>Complex</c> using the given base.
            </summary>
            <param name="cpx">Complex number</param>
            <param name="base">Complex base</param>
            <returns>Complex root</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Pow2(CoreLib.Math.Complex)">
            <summary>
            The Square (power 2) of the given <c>Complex</c>
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Complex square</returns>
        </member>
        <member name="M:CoreLib.Math.MathHelper.Sqrt(CoreLib.Math.Complex)">
            <summary>
            The Square Root (power 1/2) of the given <c>Complex</c>
            </summary>
            <param name="cpx">Complex number</param>
            <returns>Complex square root</returns>
        </member>
        <member name="T:CoreLib.ar">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.ar.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.ar.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die إلغاء ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die كلمة السر: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die من فضلك ادخل كلمة المرور الخاصة بك ويندوز لتأكيد العملية الحالية ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die خطأ ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die حسنا ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die التحقق من كلمة المرور ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die كلمة المرور غير صالحة. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ar.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die AR ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.CommentAttribute">
            <summary>
            Adds a comment to the taget field
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.CommentAttribute.#ctor">
            <summary>
            Creates a new comment
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.CommentAttribute.#ctor(System.String)">
            <summary>
            Creates a new comment
            </summary>
            <param name="str">Comment string</param>
        </member>
        <member name="P:CoreLib.Runtime.CommentAttribute.Comment">
            <summary>
            Comment string
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.CopyrightInformationAttribute">
            <summary>
            A class which contains copyright information about a code segment or dependency
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.CopyrightInformationAttribute.#ctor">
            <summary>
            Creates a new copyright information
            </summary>
        </member>
        <member name="M:CoreLib.Runtime.CopyrightInformationAttribute.#ctor(System.String)">
            <summary>
            Creates a new copyright information
            </summary>
            <param name="str">Visible copyright string</param>
        </member>
        <member name="P:CoreLib.Runtime.CopyrightInformationAttribute.FormattedCopyrightString">
            <summary>
            Visible copyright string
            </summary>
        </member>
        <member name="P:CoreLib.Runtime.CopyrightInformationAttribute.Type">
            <summary>
            Copyright information target type
            </summary>
        </member>
        <member name="T:CoreLib.Runtime.CopyrightInformationType">
            <summary>
            Copyright information target type
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.CopyrightInformationType.Other">
            <summary>
            No specific target
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.CopyrightInformationType.InternalDependency">
            <summary>
            A code library or executable which is used as dependency from an internal source
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.CopyrightInformationType.ExternalDependency">
            <summary>
            A code library or executable which is used as dependency from an external source
            </summary>
        </member>
        <member name="F:CoreLib.Runtime.CopyrightInformationType.ExternalCodeSnippet">
            <summary>
            A code segment or snippet from an external source
            </summary>
        </member>
        <member name="T:CoreLib.zh">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.zh.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.zh.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;取消 ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;密码: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die 请输入您的Windows密码以确认当前操作 ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die 错误 ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;行 ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die 密码验证 ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die 密码是无效的。 ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.zh.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die ZH ähnelt.
            </summary>
        </member>
        <member name="T:CoreLib.ru">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:CoreLib.ru.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:CoreLib.ru.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWCcancel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;отменить ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWClabel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;пароль: ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWCmain">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Пожалуйста, введите ваш пароль для Windows, чтобы подтвердить текущую операцию ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWCmbox">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die ошибка ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWCok">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &amp;OK ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWCtitle">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die проверка пароль ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.PWCwrong">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Пароль неверен. ähnelt.
            </summary>
        </member>
        <member name="P:CoreLib.ru.ResLang">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die RU ähnelt.
            </summary>
        </member>
    </members>
</doc>
